{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1A"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_boston\n",
    "from sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "import scikitplot as skplt\n",
    "from matplotlib import style\n",
    "style.use(\"fivethirtyeight\")\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import r2_score\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data=pd.read_excel('HW3.xlsx')\n",
    "X=data.iloc[:,0:-2]\n",
    "y=data.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "fig = plt.figure()\n",
    "ax0 = fig.add_subplot(111) \n",
    "RMSE_train = []\n",
    "RMSE_test = []\n",
    "for i in range(1,100):\n",
    "    #Paramterize the model and let i be the number of minimum instances per leaf node\n",
    "    regression_model = DecisionTreeRegressor(criterion=\"mse\",max_depth=i)   \n",
    "    #Train the model\n",
    "    regression_model.fit(X_train,y_train)\n",
    "    #Predict query instances\n",
    "    predicted_train = regression_model.predict(X_train)\n",
    "    predicted_test = regression_model.predict(X_test)\n",
    "    #Calculate and append the RMSEs\n",
    "    RMSE_train.append(np.sqrt(np.sum(((y_train-predicted_train)**2)/len(y_train))))\n",
    "    RMSE_test.append(np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "   \n",
    "ax0.plot(range(1,100),RMSE_test,label='Test_Data')\n",
    "ax0.plot(range(1,100),RMSE_train,label='Train_Data')\n",
    "ax0.legend()\n",
    "ax0.set_title('RMSE with respect to the max depth')\n",
    "ax0.set_xlabel('max_depth')\n",
    "ax0.set_ylabel('RMSE')\n",
    "plt.show()\n",
    "\n",
    "#We can see the RMSE will drop significantly for training data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=DecisionTreeRegressor(criterion='mse',\n",
       "                                             max_depth=range(1, 20),\n",
       "                                             max_features=None,\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             presort=False, random_state=None,\n",
       "                                             splitter='best'),\n",
       "             iid='warn', n_jobs=None, param_grid={'max_depth': range(1, 20, 2)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='r2', verbose=0)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "depth = range(1,20)\n",
    "clf = DecisionTreeRegressor(criterion=\"mse\", max_depth=depth)\n",
    "parameters={'max_depth': range(1,20,2)}\n",
    "grid = GridSearchCV(clf, parameters,cv = 10, scoring = 'r2')\n",
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4024270151925781\n",
      "{'max_depth': 3}\n",
      "DecisionTreeRegressor(criterion='mse', max_depth=3, max_features=None,\n",
      "                      max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "                      min_impurity_split=None, min_samples_leaf=1,\n",
      "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "                      presort=False, random_state=None, splitter='best')\n",
      "R Squared:  0.57506404622763\n",
      "RMSE: 112.07941506787904\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print (grid.best_estimator_)\n",
    "print(\"R Squared: \",r2_score(y_test, grid.predict(X_test)))\n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-grid.predict(X_test))**2)/len(y_test))))\n",
    "\n",
    "#depth is 3, we have r2 score of 0.575 and RMSE of 112"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import neighbors, datasets\n",
    "scaler=StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "scaler.fit(X_train)\n",
    "X_train=scaler.transform(X_train)\n",
    "X_test=scaler.transform(X_test)\n",
    "fig = plt.figure()\n",
    "ax0 = fig.add_subplot(111) \n",
    "RMSE_train = []\n",
    "RMSE_test = []\n",
    "for i in range(1,30):\n",
    "    #Paramterize the model and let i be the number of minimum instances per leaf node\n",
    "    knn = neighbors.KNeighborsRegressor(n_neighbors=i)   \n",
    "    #Train the model\n",
    "    knn.fit(X_train,y_train)\n",
    "    #Predict query instances\n",
    "    predicted_train = knn.predict(X_train)\n",
    "    predicted_test = knn.predict(X_test)\n",
    "    #Calculate and append the RMSEs\n",
    "    RMSE_train.append(np.sqrt(np.sum(((y_train-predicted_train)**2)/len(y_train))))\n",
    "    RMSE_test.append(np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "   \n",
    "ax0.plot(range(1,30),RMSE_test,label='Test_Data')\n",
    "ax0.plot(range(1,30),RMSE_train,label='Train_Data')\n",
    "ax0.legend()\n",
    "ax0.set_title('RMSE with respect to the max depth')\n",
    "ax0.set_xlabel('max_depth')\n",
    "ax0.set_ylabel('RMSE')\n",
    "plt.show()\n",
    "\n",
    "#We scale our data first then do the analysis. \n",
    "#There is no overfitting issue here unless we choose a really small K"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=KNeighborsRegressor(algorithm='auto', leaf_size=30,\n",
       "                                           metric='minkowski',\n",
       "                                           metric_params=None, n_jobs=None,\n",
       "                                           n_neighbors=5, p=2,\n",
       "                                           weights='uniform'),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid={'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n",
       "                                         13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n",
       "                                         23, 24, 25, 26, 27, 28, 29, 30],\n",
       "                         'weights': ['uniform', 'distance']},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='r2', verbose=0)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "k_range = list(range(1,31))\n",
    "weight_options = [\"uniform\", \"distance\"]\n",
    "param_grid = dict(n_neighbors = k_range, weights = weight_options)\n",
    "knn = neighbors.KNeighborsRegressor()\n",
    "grid = GridSearchCV(knn, param_grid, cv = 10, scoring = 'r2')\n",
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3521136522247128\n",
      "{'n_neighbors': 11, 'weights': 'distance'}\n",
      "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "                    metric_params=None, n_jobs=None, n_neighbors=11, p=2,\n",
      "                    weights='distance')\n",
      "Prediction Accuracy:  0.5579974545654907\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print (grid.best_estimator_)\n",
    "print(\"Prediction Accuracy: \",r2_score(y_test, grid.predict(X_test)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 114.30796727731759\n",
      "R Squared:  0.5579974545654907\n"
     ]
    }
   ],
   "source": [
    "knn=neighbors.KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
    "                    metric_params=None, n_jobs=None, n_neighbors=11, p=2,\n",
    "                    weights='distance')\n",
    "knn.fit(X_train,y_train)\n",
    "predicted_test = grid.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))\n",
    "\n",
    "#We choose K to be 11.\n",
    "#This gives us r2 score of 0.558 and RMSE equals to 114."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 101.99670965500275\n",
      "R Squared:  0.6480798851995194\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yutingxin/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "lasso = linear_model.LassoCV()\n",
    "lasso.fit(X_train, y_train)\n",
    "\n",
    "predicted_test = lasso.predict(X_test)\n",
    "\n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))\n",
    "\n",
    "#We use LASSO and we get a 0.648 r2 amd RMSE equals to 102."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVR\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Tuning hyper-parameters for r2\n",
      "\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 1000, 'kernel': 'linear'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n",
    "                     'C': [1, 10, 100, 1000]},\n",
    "                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n",
    "\n",
    "scores = ['r2']\n",
    "\n",
    "for score in scores:\n",
    "    print(\"# Tuning hyper-parameters for %s\" % score)\n",
    "    print()\n",
    "\n",
    "    clf = GridSearchCV(SVR(), tuned_parameters, cv=5\n",
    "                       )\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 111.7602493144994\n",
      "R Squared:  0.5774807593372118\n"
     ]
    }
   ],
   "source": [
    "clf=SVR(kernel='linear', C=1000)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "predicted_test = clf.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import keras.backend as K\n",
    "from keras.models import Sequential\n",
    "from keras.datasets import mnist\n",
    "from keras.layers import Dense\n",
    "from keras.utils import np_utils\n",
    "from keras.wrappers.scikit_learn import KerasRegressor\n",
    "from kerastuner.tuners import RandomSearch\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow import keras\n",
    "\n",
    "\n",
    "from kerastuner.engine.hypermodel import HyperModel\n",
    "from kerastuner.engine.hyperparameters import HyperParameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune layers, batch size, and epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model(hidden_layers=1):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(15, activation='relu'))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n",
    "  return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=KerasRegressor(build_fn=create_model,batch_size=1000,epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs=[1,10,100]\n",
    "batch_size=[5,10,50,100]\n",
    "hidden_layers=[2,3,4,5,6,7,8]\n",
    "param_grid=dict(epochs=epochs,batch_size=batch_size,hidden_layers=hidden_layers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 131us/step - loss: 45444.3271 - accuracy: 0.0694\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 67us/step - loss: 29378.2458 - accuracy: 0.0012\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 66us/step - loss: 23196.2610 - accuracy: 6.2500e-04\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 70us/step - loss: 19671.5845 - accuracy: 0.0012\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 18099.0144 - accuracy: 0.0125\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 17373.1946 - accuracy: 0.0237\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 17081.6632 - accuracy: 0.0450\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 73us/step - loss: 16916.1921 - accuracy: 0.0331\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 70us/step - loss: 16701.3390 - accuracy: 0.0419\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 68us/step - loss: 16651.5940 - accuracy: 0.0431\n"
     ]
    }
   ],
   "source": [
    "grid=GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)\n",
    "grid_result=grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 10, 'epochs': 10, 'hidden_layers': 3}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_\n",
    "#hidden layers=3, epochs = 10, batch size=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model():\n",
    "    \n",
    "    model = Sequential()\n",
    "    model.add(Dense(23, input_dim=23, activation='relu'))\n",
    "    model.add(Dense(1, activation='relu'))\n",
    "    model.compile(loss='mean_squared_error', optimizer='adam',metrics=['accuracy'])\n",
    "    return model\n",
    "model=KerasRegressor(build_fn=create_model,batch_size=1000,epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1600/1600 [==============================] - 0s 139us/step - loss: 46193.5515 - accuracy: 0.0519\n",
      "Epoch 2/100\n",
      "1600/1600 [==============================] - 0s 106us/step - loss: 44531.1314 - accuracy: 0.0150\n",
      "Epoch 3/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 41605.1618 - accuracy: 0.0037\n",
      "Epoch 4/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 37999.2390 - accuracy: 0.0000e+00\n",
      "Epoch 5/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 34402.8988 - accuracy: 0.0000e+00\n",
      "Epoch 6/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 31195.0772 - accuracy: 0.0019\n",
      "Epoch 7/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 28592.4038 - accuracy: 6.2500e-04\n",
      "Epoch 8/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 26553.2462 - accuracy: 6.2500e-04\n",
      "Epoch 9/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 24940.3545 - accuracy: 0.0000e+00\n",
      "Epoch 10/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 23702.6493 - accuracy: 0.0012\n",
      "Epoch 11/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 22717.3152 - accuracy: 6.2500e-04\n",
      "Epoch 12/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 21901.0448 - accuracy: 0.0000e+00\n",
      "Epoch 13/100\n",
      "1600/1600 [==============================] - 0s 106us/step - loss: 21203.8680 - accuracy: 6.2500e-04\n",
      "Epoch 14/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 20569.3808 - accuracy: 0.0019\n",
      "Epoch 15/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 20008.3742 - accuracy: 0.0025\n",
      "Epoch 16/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 19534.5956 - accuracy: 0.0012\n",
      "Epoch 17/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 19123.2991 - accuracy: 0.0012\n",
      "Epoch 18/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 18772.6280 - accuracy: 0.0019\n",
      "Epoch 19/100\n",
      "1600/1600 [==============================] - 0s 115us/step - loss: 18473.8976 - accuracy: 0.0025\n",
      "Epoch 20/100\n",
      "1600/1600 [==============================] - 0s 120us/step - loss: 18222.8724 - accuracy: 0.0063\n",
      "Epoch 21/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 18008.0155 - accuracy: 0.0069\n",
      "Epoch 22/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 17831.5274 - accuracy: 0.0144\n",
      "Epoch 23/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 17671.0547 - accuracy: 0.0194\n",
      "Epoch 24/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 17552.7746 - accuracy: 0.0275\n",
      "Epoch 25/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 17440.2251 - accuracy: 0.0325\n",
      "Epoch 26/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 17349.5556 - accuracy: 0.0394\n",
      "Epoch 27/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 17278.8063 - accuracy: 0.0450\n",
      "Epoch 28/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 17225.6953 - accuracy: 0.0500\n",
      "Epoch 29/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 17152.3474 - accuracy: 0.0569\n",
      "Epoch 30/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 17088.0568 - accuracy: 0.0600\n",
      "Epoch 31/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 17044.2289 - accuracy: 0.0625\n",
      "Epoch 32/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16991.6907 - accuracy: 0.0675\n",
      "Epoch 33/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16958.0874 - accuracy: 0.0675\n",
      "Epoch 34/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16920.5600 - accuracy: 0.0700\n",
      "Epoch 35/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16887.4571 - accuracy: 0.0688\n",
      "Epoch 36/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16853.0153 - accuracy: 0.0737\n",
      "Epoch 37/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 16821.6401 - accuracy: 0.0725\n",
      "Epoch 38/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 16794.1619 - accuracy: 0.0744\n",
      "Epoch 39/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 16765.0332 - accuracy: 0.0787\n",
      "Epoch 40/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16736.3295 - accuracy: 0.0775\n",
      "Epoch 41/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 16709.0598 - accuracy: 0.0800\n",
      "Epoch 42/100\n",
      "1600/1600 [==============================] - 0s 106us/step - loss: 16687.6429 - accuracy: 0.0800\n",
      "Epoch 43/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 16654.6796 - accuracy: 0.0819\n",
      "Epoch 44/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 16644.8950 - accuracy: 0.0831\n",
      "Epoch 45/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16615.3525 - accuracy: 0.0825\n",
      "Epoch 46/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16180.1782 - accuracy: 0.08 - 0s 107us/step - loss: 16604.4598 - accuracy: 0.0869\n",
      "Epoch 47/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 15663.4423 - accuracy: 0.08 - 0s 110us/step - loss: 16581.2077 - accuracy: 0.0862\n",
      "Epoch 48/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16551.8044 - accuracy: 0.0844\n",
      "Epoch 49/100\n",
      "1600/1600 [==============================] - 0s 115us/step - loss: 16534.7384 - accuracy: 0.0862\n",
      "Epoch 50/100\n",
      "1600/1600 [==============================] - 0s 121us/step - loss: 16512.5977 - accuracy: 0.0900\n",
      "Epoch 51/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16488.6343 - accuracy: 0.0900\n",
      "Epoch 52/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16476.8082 - accuracy: 0.0887\n",
      "Epoch 53/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16449.9052 - accuracy: 0.0906\n",
      "Epoch 54/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16435.4371 - accuracy: 0.0862\n",
      "Epoch 55/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16419.7672 - accuracy: 0.0894\n",
      "Epoch 56/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16402.5156 - accuracy: 0.0894\n",
      "Epoch 57/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16385.1231 - accuracy: 0.0925\n",
      "Epoch 58/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16372.0957 - accuracy: 0.0925\n",
      "Epoch 59/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16349.5315 - accuracy: 0.0919\n",
      "Epoch 60/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16334.1156 - accuracy: 0.0944\n",
      "Epoch 61/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16326.1557 - accuracy: 0.0956\n",
      "Epoch 62/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16297.7565 - accuracy: 0.0962\n",
      "Epoch 63/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16286.4741 - accuracy: 0.0931\n",
      "Epoch 64/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16259.8506 - accuracy: 0.0950\n",
      "Epoch 65/100\n",
      "1600/1600 [==============================] - 0s 114us/step - loss: 16251.5810 - accuracy: 0.0944\n",
      "Epoch 66/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16232.0848 - accuracy: 0.0944\n",
      "Epoch 67/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16216.7838 - accuracy: 0.0938\n",
      "Epoch 68/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16208.9213 - accuracy: 0.0975\n",
      "Epoch 69/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16189.4831 - accuracy: 0.0994\n",
      "Epoch 70/100\n",
      "1600/1600 [==============================] - 0s 113us/step - loss: 16173.4083 - accuracy: 0.0969\n",
      "Epoch 71/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16149.3267 - accuracy: 0.0994\n",
      "Epoch 72/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16141.1936 - accuracy: 0.0994\n",
      "Epoch 73/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 16123.5342 - accuracy: 0.1000\n",
      "Epoch 74/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16108.4594 - accuracy: 0.1000\n",
      "Epoch 75/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 16106.1901 - accuracy: 0.1013\n",
      "Epoch 76/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 16079.0504 - accuracy: 0.1019\n",
      "Epoch 77/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16079.3763 - accuracy: 0.1006\n",
      "Epoch 78/100\n",
      "1600/1600 [==============================] - 0s 114us/step - loss: 16060.0377 - accuracy: 0.1050\n",
      "Epoch 79/100\n",
      "1600/1600 [==============================] - 0s 121us/step - loss: 16041.9655 - accuracy: 0.1044\n",
      "Epoch 80/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16025.6414 - accuracy: 0.1044\n",
      "Epoch 81/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 16019.5942 - accuracy: 0.1069\n",
      "Epoch 82/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 16002.1213 - accuracy: 0.1094\n",
      "Epoch 83/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 15993.7208 - accuracy: 0.1075\n",
      "Epoch 84/100\n",
      "1600/1600 [==============================] - 0s 109us/step - loss: 15973.6291 - accuracy: 0.1056\n",
      "Epoch 85/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15965.9703 - accuracy: 0.1100\n",
      "Epoch 86/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 15947.0591 - accuracy: 0.1119\n",
      "Epoch 87/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 15930.7256 - accuracy: 0.1144\n",
      "Epoch 88/100\n",
      "1600/1600 [==============================] - 0s 105us/step - loss: 15921.1697 - accuracy: 0.1169\n",
      "Epoch 89/100\n",
      "1600/1600 [==============================] - 0s 107us/step - loss: 15908.8949 - accuracy: 0.1163\n",
      "Epoch 90/100\n",
      "1600/1600 [==============================] - 0s 106us/step - loss: 15895.6096 - accuracy: 0.1163\n",
      "Epoch 91/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 15881.8782 - accuracy: 0.1213\n",
      "Epoch 92/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15875.3411 - accuracy: 0.1231\n",
      "Epoch 93/100\n",
      "1600/1600 [==============================] - 0s 108us/step - loss: 15856.9114 - accuracy: 0.1256\n",
      "Epoch 94/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15841.7659 - accuracy: 0.1250\n",
      "Epoch 95/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 15828.5195 - accuracy: 0.1287\n",
      "Epoch 96/100\n",
      "1600/1600 [==============================] - 0s 111us/step - loss: 15811.9951 - accuracy: 0.1325\n",
      "Epoch 97/100\n",
      "1600/1600 [==============================] - 0s 112us/step - loss: 15809.5510 - accuracy: 0.1312\n",
      "Epoch 98/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15788.6516 - accuracy: 0.1300\n",
      "Epoch 99/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15774.8197 - accuracy: 0.1300\n",
      "Epoch 100/100\n",
      "1600/1600 [==============================] - 0s 110us/step - loss: 15769.2022 - accuracy: 0.1319\n"
     ]
    }
   ],
   "source": [
    "\n",
    "epochs=[1,10,50,100]\n",
    "batch_size=[5,10,50,100,1000]\n",
    "\n",
    "param_grid=dict(epochs=epochs,batch_size=batch_size)\n",
    "grid=GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)\n",
    "grid_result=grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 5, 'epochs': 100}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune Optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model(hidden_layers=3,optimizer='adam'):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(15, activation='relu'))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])\n",
    "  return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=KerasRegressor(build_fn=create_model,batch_size=10,epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 127us/step - loss: 33892.1772 - accuracy: 0.0338\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 18406.6705 - accuracy: 0.0000e+00\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 16845.2138 - accuracy: 0.0000e+00\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 16209.8780 - accuracy: 6.2500e-04\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 73us/step - loss: 15954.7343 - accuracy: 0.0000e+00\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 15751.5146 - accuracy: 6.2500e-04\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 15742.8539 - accuracy: 0.0000e+00\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 64us/step - loss: 15649.8924 - accuracy: 6.2500e-04\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 67us/step - loss: 15538.7462 - accuracy: 0.0025\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 67us/step - loss: 15486.2765 - accuracy: 0.0031\n"
     ]
    }
   ],
   "source": [
    "optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax']\n",
    "param_grid = dict(optimizer=optimizer)\n",
    "grid=GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)\n",
    "grid_result=grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'optimizer': 'Adadelta'}"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_\n",
    "#adadelta is the best optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune learning rate and momentum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def create_model(hidden_layers=3,learn_rate=0.01, momentum=0):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(15, activation='relu'))\n",
    "\n",
    "  # Add an output layer \n",
    "  optimizer = SGD(lr=learn_rate, momentum=momentum)\n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer=optimizer, metrics=['accuracy'])\n",
    "  return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 88us/step - loss: 46775.8847 - accuracy: 0.2837\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 57us/step - loss: 46775.8846 - accuracy: 0.2837\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 60us/step - loss: 46775.8851 - accuracy: 0.2837\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 60us/step - loss: 46775.8849 - accuracy: 0.2837\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 59us/step - loss: 46775.8851 - accuracy: 0.2837\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 59us/step - loss: 46775.8852 - accuracy: 0.2837\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 61us/step - loss: 46775.8850 - accuracy: 0.2837\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 60us/step - loss: 46775.8852 - accuracy: 0.2837\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 59us/step - loss: 46775.8852 - accuracy: 0.2837\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 59us/step - loss: 46775.8856 - accuracy: 0.2837\n"
     ]
    }
   ],
   "source": [
    "model=KerasRegressor(build_fn=create_model,batch_size=10,epochs=10)\n",
    "learn_rate = [0.001, 0.01, 0.1, 0.2, 0.3]\n",
    "momentum = [0.0, 0.2, 0.4, 0.6, 0.8, 0.9]\n",
    "param_grid = dict(learn_rate=learn_rate, momentum=momentum)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n",
    "grid_result = grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learn_rate': 0.001, 'momentum': 0.0}"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune activation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model(hidden_layers=3,learn_rate=0.001, momentum=0,activation='relu'):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation=activation, input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(15, activation=activation))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer='Adadelta', metrics=['accuracy'])\n",
    "  return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 133us/step - loss: 43913.2771 - accuracy: 0.1912\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 20422.6059 - accuracy: 0.0000e+00\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 17548.1392 - accuracy: 0.0044\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 70us/step - loss: 16400.6477 - accuracy: 0.0325\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 69us/step - loss: 16408.2446 - accuracy: 0.0562\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 69us/step - loss: 16082.3753 - accuracy: 0.0631\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 16067.8893 - accuracy: 0.0694\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 15973.7011 - accuracy: 0.0781\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 77us/step - loss: 15912.7157 - accuracy: 0.0775\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 15864.8151 - accuracy: 0.0825\n"
     ]
    }
   ],
   "source": [
    "model=KerasRegressor(build_fn=create_model,batch_size=10,epochs=10)\n",
    "activation=['relu','sigmoid','linear','hard_sigmoid']\n",
    "param_grid = dict(activation=activation)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n",
    "grid_result = grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'activation': 'relu'}"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_\n",
    "#best activation function is 'relu'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune number of neurons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model(hidden_layers=3,learn_rate=0.001, momentum=0,neurons=1):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(neurons, activation='relu'))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer='Adadelta', metrics=['accuracy'])\n",
    "  return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 132us/step - loss: 33916.4041 - accuracy: 0.0131\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 74us/step - loss: 18669.7615 - accuracy: 6.2500e-04\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 16958.5383 - accuracy: 0.0000e+00\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 16309.1429 - accuracy: 6.2500e-04\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 74us/step - loss: 16159.4663 - accuracy: 0.0000e+00\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 76us/step - loss: 15956.7268 - accuracy: 0.0000e+00\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 74us/step - loss: 15848.7987 - accuracy: 6.2500e-04\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 72us/step - loss: 15793.2902 - accuracy: 0.0000e+00\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 73us/step - loss: 15711.6494 - accuracy: 0.0000e+00\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 69us/step - loss: 15633.7778 - accuracy: 0.0019\n"
     ]
    }
   ],
   "source": [
    "model=KerasRegressor(build_fn=create_model,batch_size=10,epochs=10)\n",
    "neurons=[1,5,10,15,20]\n",
    "param_grid = dict(neurons=neurons)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n",
    "grid_result = grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'neurons': 20}"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_model(hidden_layers=3,learn_rate=0.001, momentum=0):\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  for i in range(hidden_layers):\n",
    "      # Add one hidden layer\n",
    "      model.add(Dense(20, activation='relu'))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer='Adadelta', metrics=['accuracy'])\n",
    "  return model\n",
    "model=KerasRegressor(build_fn=create_model,batch_size=10,epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1600/1600 [==============================] - 0s 137us/step - loss: 29424.3670 - accuracy: 0.0194\n",
      "Epoch 2/10\n",
      "1600/1600 [==============================] - 0s 69us/step - loss: 17892.1291 - accuracy: 6.2500e-04\n",
      "Epoch 3/10\n",
      "1600/1600 [==============================] - 0s 70us/step - loss: 16893.3898 - accuracy: 0.0000e+00\n",
      "Epoch 4/10\n",
      "1600/1600 [==============================] - 0s 67us/step - loss: 16233.0785 - accuracy: 0.0000e+00\n",
      "Epoch 5/10\n",
      "1600/1600 [==============================] - 0s 67us/step - loss: 16055.0469 - accuracy: 0.0000e+00\n",
      "Epoch 6/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 15956.9392 - accuracy: 0.0019\n",
      "Epoch 7/10\n",
      "1600/1600 [==============================] - 0s 70us/step - loss: 15809.8914 - accuracy: 0.0056\n",
      "Epoch 8/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 15777.9572 - accuracy: 0.0081\n",
      "Epoch 9/10\n",
      "1600/1600 [==============================] - 0s 71us/step - loss: 15637.0596 - accuracy: 0.0081\n",
      "Epoch 10/10\n",
      "1600/1600 [==============================] - 0s 73us/step - loss: 15676.0558 - accuracy: 0.0131\n",
      "RMSE: 94.78260072825223\n",
      "R Squared:  0.6961011833968478\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model.fit(X_train, y_train)\n",
    "predicted_test = model.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#We get RMSE equals to 94.78 and R squared of 0.696"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBOOST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost.sklearn import XGBRegressor\n",
    "import warnings; warnings.simplefilter('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost.sklearn import XGBRegressor  \n",
    "import scipy.stats as st\n",
    "\n",
    "one_to_left = st.beta(10, 1)  \n",
    "from_zero_positive = st.expon(0, 50)\n",
    "\n",
    "params = {  \n",
    "    \"n_estimators\": st.randint(3, 40),\n",
    "    \"max_depth\": st.randint(3, 40),\n",
    "    \"learning_rate\": st.uniform(0.05, 0.4),\n",
    "    \"colsample_bytree\": one_to_left,\n",
    "    \"subsample\": one_to_left,\n",
    "    \"gamma\": st.uniform(0, 10),\n",
    "    'reg_alpha': from_zero_positive,\n",
    "    \"min_child_weight\": from_zero_positive,\n",
    "}\n",
    "\n",
    "xgbreg = XGBRegressor(nthreads=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[18:21:43] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "          estimator=XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
       "       importance_type='gain', learning_rate=0.1, max_delta_step=0,\n",
       "       max_depth=3, min_child_weight=1, missing=None, n_estimators=100,\n",
       "       n_jobs=1, nthread=None, nthreads=-1, objective='reg:linear',\n",
       "       random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n",
       "       seed=None, silent=None, subsample=1, verbosity=1),\n",
       "          fit_params=None, iid='warn', n_iter=10, n_jobs=1,\n",
       "          param_distributions={'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x000001EA9C03A160>, 'max_depth': <scipy.stats._distn_infrastructure.rv_frozen object at 0x000001EA9C028828>, 'learning_rate': <scipy.stats._distn_infrastructure.rv_frozen object at 0x000001EA9C012E10>, 'cols...98>, 'min_child_weight': <scipy.stats._distn_infrastructure.rv_frozen object at 0x000001EA9C03AF98>},\n",
       "          pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "          return_train_score='warn', scoring=None, verbose=0)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "gs = RandomizedSearchCV(xgbreg, params, n_jobs=1)  \n",
    "gs.fit(X_train, y_train)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bynode=1, colsample_bytree=0.8829720261487249,\n",
       "       gamma=4.300202312684424, importance_type='gain',\n",
       "       learning_rate=0.31855410235386916, max_delta_step=0, max_depth=18,\n",
       "       min_child_weight=42.00033752829647, missing=None, n_estimators=20,\n",
       "       n_jobs=1, nthread=None, nthreads=-1, objective='reg:linear',\n",
       "       random_state=0, reg_alpha=211.14816580068515, reg_lambda=1,\n",
       "       scale_pos_weight=1, seed=None, silent=None,\n",
       "       subsample=0.9664457525643635, verbosity=1)"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 105.45905695923733\n",
      "R Squared:  0.6237820317999885\n"
     ]
    }
   ],
   "source": [
    "predicted_test = gs.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  From previous model building, we can see that neural network gives us the best model to predict spendings. It has the lowest RMSE among all models, which is 94.78 and best r squared score, which is 0.696."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "data1=data[data.Purchase==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sequence_number</th>\n",
       "      <th>US</th>\n",
       "      <th>source_a</th>\n",
       "      <th>source_c</th>\n",
       "      <th>source_b</th>\n",
       "      <th>source_d</th>\n",
       "      <th>source_e</th>\n",
       "      <th>source_m</th>\n",
       "      <th>source_o</th>\n",
       "      <th>source_h</th>\n",
       "      <th>...</th>\n",
       "      <th>source_x</th>\n",
       "      <th>source_w</th>\n",
       "      <th>Freq</th>\n",
       "      <th>last_update_days_ago</th>\n",
       "      <th>1st_update_days_ago</th>\n",
       "      <th>Web order</th>\n",
       "      <th>Gender=male</th>\n",
       "      <th>Address_is_res</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>Spending</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3662</td>\n",
       "      <td>3662</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>127.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3883</td>\n",
       "      <td>3914</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>127.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>525</td>\n",
       "      <td>2914</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>488.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3215</td>\n",
       "      <td>3215</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>173.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2081</td>\n",
       "      <td>2438</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1416.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    sequence_number  US  source_a  source_c  source_b  source_d  source_e  \\\n",
       "0                 1   1         0         0         1         0         0   \n",
       "2                 3   1         0         0         0         0         0   \n",
       "8                 9   1         1         0         0         0         0   \n",
       "9                10   1         1         0         0         0         0   \n",
       "13               14   1         1         0         0         0         0   \n",
       "\n",
       "    source_m  source_o  source_h  ...  source_x  source_w  Freq  \\\n",
       "0          0         0         0  ...         0         0     2   \n",
       "2          0         0         0  ...         0         0     2   \n",
       "8          0         0         0  ...         0         0     4   \n",
       "9          0         0         0  ...         0         0     1   \n",
       "13         0         0         0  ...         0         0     5   \n",
       "\n",
       "    last_update_days_ago  1st_update_days_ago  Web order  Gender=male  \\\n",
       "0                   3662                 3662          1            0   \n",
       "2                   3883                 3914          0            0   \n",
       "8                    525                 2914          1            1   \n",
       "9                   3215                 3215          0            0   \n",
       "13                  2081                 2438          0            1   \n",
       "\n",
       "    Address_is_res  Purchase  Spending  \n",
       "0                1         1    127.87  \n",
       "2                0         1    127.48  \n",
       "8                0         1    488.50  \n",
       "9                0         1    173.50  \n",
       "13               0         1   1416.00  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data1.iloc[:,0:-2]\n",
    "y=data1.iloc[:,-1]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax0 = fig.add_subplot(111) \n",
    "RMSE_train = []\n",
    "RMSE_test = []\n",
    "for i in range(1,100):\n",
    "    #Paramterize the model and let i be the number of minimum instances per leaf node\n",
    "    regression_model = DecisionTreeRegressor(criterion=\"mse\",max_depth=i)   \n",
    "    #Train the model\n",
    "    regression_model.fit(X_train,y_train)\n",
    "    #Predict query instances\n",
    "    predicted_train = regression_model.predict(X_train)\n",
    "    predicted_test = regression_model.predict(X_test)\n",
    "    #Calculate and append the RMSEs\n",
    "    RMSE_train.append(np.sqrt(np.sum(((y_train-predicted_train)**2)/len(y_train))))\n",
    "    RMSE_test.append(np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "   \n",
    "ax0.plot(range(1,100),RMSE_test,label='Test_Data')\n",
    "ax0.plot(range(1,100),RMSE_train,label='Train_Data')\n",
    "ax0.legend()\n",
    "ax0.set_title('RMSE with respect to the max depth')\n",
    "ax0.set_xlabel('max_depth')\n",
    "ax0.set_ylabel('RMSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "       estimator=DecisionTreeRegressor(criterion='mse', max_depth=range(1, 20),\n",
       "           max_features=None, max_leaf_nodes=None,\n",
       "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
       "           splitter='best'),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'max_depth': range(1, 20, 2)}, pre_dispatch='2*n_jobs',\n",
       "       refit=True, return_train_score='warn', scoring='r2', verbose=0)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "depth = range(1,20)\n",
    "clf = DecisionTreeRegressor(criterion=\"mse\", max_depth=depth)\n",
    "parameters={'max_depth': range(1,20,2)}\n",
    "grid = GridSearchCV(clf, parameters,cv = 10, scoring = 'r2')\n",
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2925700391569781\n",
      "{'max_depth': 5}\n",
      "DecisionTreeRegressor(criterion='mse', max_depth=5, max_features=None,\n",
      "           max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "           min_impurity_split=None, min_samples_leaf=1,\n",
      "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "           presort=False, random_state=None, splitter='best')\n",
      "R Squared:  -0.2170766768597996\n",
      "RMSE: 199.7098225532082\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print (grid.best_estimator_)\n",
    "print(\"R Squared: \",r2_score(y_test, grid.predict(X_test)))\n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-grid.predict(X_test))**2)/len(y_test))))\n",
    "\n",
    "#There is an overfitting issue here and we can see R square is negative"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "scaler.fit(X_train)\n",
    "X_train=scaler.transform(X_train)\n",
    "X_test=scaler.transform(X_test)\n",
    "fig = plt.figure()\n",
    "ax0 = fig.add_subplot(111) \n",
    "RMSE_train = []\n",
    "RMSE_test = []\n",
    "for i in range(1,30):\n",
    "    #Paramterize the model and let i be the number of minimum instances per leaf node\n",
    "    knn = neighbors.KNeighborsRegressor(n_neighbors=i)   \n",
    "    #Train the model\n",
    "    knn.fit(X_train,y_train)\n",
    "    #Predict query instances\n",
    "    predicted_train = knn.predict(X_train)\n",
    "    predicted_test = knn.predict(X_test)\n",
    "    #Calculate and append the RMSEs\n",
    "    RMSE_train.append(np.sqrt(np.sum(((y_train-predicted_train)**2)/len(y_train))))\n",
    "    RMSE_test.append(np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "   \n",
    "ax0.plot(range(1,30),RMSE_test,label='Test_Data')\n",
    "ax0.plot(range(1,30),RMSE_train,label='Train_Data')\n",
    "ax0.legend()\n",
    "ax0.set_title('RMSE with respect to the max depth')\n",
    "ax0.set_xlabel('max_depth')\n",
    "ax0.set_ylabel('RMSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "       estimator=KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "          metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "          weights='uniform'),\n",
       "       fit_params=None, iid='warn', n_jobs=None,\n",
       "       param_grid={'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 'weights': ['uniform', 'distance']},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring='r2', verbose=0)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k_range = list(range(1,31))\n",
    "weight_options = [\"uniform\", \"distance\"]\n",
    "param_grid = dict(n_neighbors = k_range, weights = weight_options)\n",
    "knn = neighbors.KNeighborsRegressor()\n",
    "grid = GridSearchCV(knn, param_grid, cv = 10, scoring = 'r2')\n",
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2468631002228364\n",
      "{'n_neighbors': 15, 'weights': 'distance'}\n",
      "KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n",
      "          metric_params=None, n_jobs=None, n_neighbors=15, p=2,\n",
      "          weights='distance')\n",
      "RMSE: 156.37638873269353\n",
      "Prediction Accuracy:  0.29968131812332544\n"
     ]
    }
   ],
   "source": [
    "print (grid.best_score_)\n",
    "print (grid.best_params_)\n",
    "print (grid.best_estimator_)\n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, grid.predict(X_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 161.55612809297182\n",
      "Prediction Accuracy:  0.2035363480359078\n"
     ]
    }
   ],
   "source": [
    "\n",
    "lasso = linear_model.LassoCV()\n",
    "lasso.fit(X_train, y_train)\n",
    "\n",
    "predicted_test = lasso.predict(X_test)\n",
    "\n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"Prediction Accuracy: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Tuning hyper-parameters for r2\n",
      "\n",
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 1000, 'kernel': 'linear'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n",
    "                     'C': [1, 10, 100, 1000]},\n",
    "                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n",
    "\n",
    "scores = ['r2']\n",
    "\n",
    "for score in scores:\n",
    "    print(\"# Tuning hyper-parameters for %s\" % score)\n",
    "    print()\n",
    "\n",
    "    clf = GridSearchCV(SVR(), tuned_parameters, cv=5\n",
    "                       )\n",
    "    clf.fit(X_train, y_train)\n",
    "\n",
    "    print(\"Best parameters set found on development set:\")\n",
    "    print()\n",
    "    print(clf.best_params_)\n",
    "    print()\n",
    "    print(\"Grid scores on development set:\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 148.01934016513022\n",
      "R Squared:  0.3314159430102488\n"
     ]
    }
   ],
   "source": [
    "clf=SVR(kernel='linear', C=1000)\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "predicted_test = clf.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune batch size and epoch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yutingxin/anaconda3/lib/python3.7/site-packages/sklearn/model_selection/_search.py:813: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "1600/1600 [==============================] - ETA: 29s - loss: 12114.3574 - accuracy: 0.200 - ETA: 0s - loss: 58528.7644 - accuracy: 0.164 - ETA: 0s - loss: 52707.2879 - accuracy: 0.13 - ETA: 0s - loss: 53413.6859 - accuracy: 0.11 - ETA: 0s - loss: 52079.7602 - accuracy: 0.09 - ETA: 0s - loss: 49683.4576 - accuracy: 0.07 - ETA: 0s - loss: 47341.9914 - accuracy: 0.06 - 0s 254us/step - loss: 46385.0021 - accuracy: 0.0625\n",
      "Epoch 2/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16226.2168 - accuracy: 0.0000e+ - ETA: 0s - loss: 56388.4665 - accuracy: 0.0000e+ - ETA: 0s - loss: 48550.2201 - accuracy: 0.0000e+ - ETA: 0s - loss: 43191.1078 - accuracy: 0.0000e+ - ETA: 0s - loss: 42226.9807 - accuracy: 0.0000e+ - ETA: 0s - loss: 42817.5181 - accuracy: 0.0000e+ - 0s 187us/step - loss: 44649.4834 - accuracy: 0.0000e+00\n",
      "Epoch 3/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16304.4160 - accuracy: 0.0000e+ - ETA: 0s - loss: 46533.0804 - accuracy: 0.0000e+ - ETA: 0s - loss: 45228.2415 - accuracy: 0.0000e+ - ETA: 0s - loss: 45883.0101 - accuracy: 0.0000e+ - ETA: 0s - loss: 44750.5835 - accuracy: 0.0000e+ - ETA: 0s - loss: 42576.7803 - accuracy: 0.0000e+ - 0s 185us/step - loss: 41830.9116 - accuracy: 0.0000e+00\n",
      "Epoch 4/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 21117.0410 - accuracy: 0.0000e+ - ETA: 0s - loss: 49132.9294 - accuracy: 0.0000e+ - ETA: 0s - loss: 53216.5739 - accuracy: 0.0000e+ - ETA: 0s - loss: 49578.1953 - accuracy: 0.0000e+ - ETA: 0s - loss: 44924.6821 - accuracy: 0.0000e+ - ETA: 0s - loss: 39471.3583 - accuracy: 0.0000e+ - 0s 177us/step - loss: 38450.9113 - accuracy: 0.0000e+00\n",
      "Epoch 5/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 720.9100 - accuracy: 0.0000e+ - ETA: 0s - loss: 31855.0893 - accuracy: 0.0000e+ - ETA: 0s - loss: 24413.9261 - accuracy: 0.0000e+ - ETA: 0s - loss: 33541.9495 - accuracy: 0.0000e+ - ETA: 0s - loss: 37230.5717 - accuracy: 0.0000e+ - ETA: 0s - loss: 36465.7860 - accuracy: 0.0000e+ - ETA: 0s - loss: 35484.4877 - accuracy: 0.0000e+ - 0s 197us/step - loss: 34956.8684 - accuracy: 0.0000e+00\n",
      "Epoch 6/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 44393.3984 - accuracy: 0.0000e+ - ETA: 0s - loss: 42953.2787 - accuracy: 0.0000e+ - ETA: 0s - loss: 41142.1751 - accuracy: 0.0000e+ - ETA: 0s - loss: 36794.8778 - accuracy: 0.0000e+ - ETA: 0s - loss: 34064.9410 - accuracy: 0.0000e+ - ETA: 0s - loss: 32257.9540 - accuracy: 0.0000e+ - 0s 188us/step - loss: 31744.8013 - accuracy: 0.0000e+00\n",
      "Epoch 7/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 7332.2891 - accuracy: 0.0000e+0 - ETA: 0s - loss: 32493.0663 - accuracy: 0.0000e+ - ETA: 0s - loss: 32910.5720 - accuracy: 0.0000e+ - ETA: 0s - loss: 29479.8834 - accuracy: 0.0000e+ - ETA: 0s - loss: 29685.5917 - accuracy: 9.8039e- - ETA: 0s - loss: 29325.3393 - accuracy: 8.0321e- - ETA: 0s - loss: 28140.7006 - accuracy: 6.7568e- - 0s 209us/step - loss: 29007.1583 - accuracy: 6.2500e-04\n",
      "Epoch 8/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 180279.1094 - accuracy: 0.0000e+0 - ETA: 0s - loss: 28538.2067 - accuracy: 0.0000e+0 - ETA: 0s - loss: 21559.8725 - accuracy: 0.0000e+ - ETA: 0s - loss: 25994.2616 - accuracy: 0.0000e+ - ETA: 0s - loss: 26637.7863 - accuracy: 0.0000e+ - ETA: 0s - loss: 26962.0699 - accuracy: 0.0000e+ - ETA: 0s - loss: 27815.8064 - accuracy: 6.6007e- - 0s 202us/step - loss: 26808.0518 - accuracy: 6.2500e-04\n",
      "Epoch 9/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 13368.9639 - accuracy: 0.0000e+ - ETA: 0s - loss: 15238.8211 - accuracy: 0.0000e+ - ETA: 0s - loss: 22874.3719 - accuracy: 0.0000e+ - ETA: 0s - loss: 24449.4453 - accuracy: 0.0000e+ - ETA: 0s - loss: 26450.6793 - accuracy: 0.0000e+ - ETA: 0s - loss: 24831.3998 - accuracy: 0.0000e+ - ETA: 0s - loss: 25452.2720 - accuracy: 6.6890e- - 0s 204us/step - loss: 25108.9306 - accuracy: 6.2500e-04\n",
      "Epoch 10/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 23843.1953 - accuracy: 0.0000e+ - ETA: 0s - loss: 30416.6171 - accuracy: 0.0000e+ - ETA: 0s - loss: 29410.9240 - accuracy: 0.0000e+ - ETA: 0s - loss: 25017.5775 - accuracy: 0.0000e+ - ETA: 0s - loss: 26610.0642 - accuracy: 0.0000e+ - ETA: 0s - loss: 24175.5080 - accuracy: 0.0000e+ - 0s 189us/step - loss: 23771.6966 - accuracy: 0.0000e+00\n",
      "Epoch 11/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 26774.8242 - accuracy: 0.0000e+ - ETA: 0s - loss: 20545.4182 - accuracy: 0.0000e+ - ETA: 0s - loss: 24100.7217 - accuracy: 0.0000e+ - ETA: 0s - loss: 21578.6043 - accuracy: 0.0026   - ETA: 0s - loss: 20370.7603 - accuracy: 0.00 - ETA: 0s - loss: 20488.5846 - accuracy: 0.00 - ETA: 0s - loss: 22347.1175 - accuracy: 0.00 - 0s 192us/step - loss: 22670.2516 - accuracy: 0.0025\n",
      "Epoch 12/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 3964.3477 - accuracy: 0.0000e+0 - ETA: 0s - loss: 19763.8735 - accuracy: 0.0140  - ETA: 0s - loss: 19476.4282 - accuracy: 0.01 - ETA: 0s - loss: 20746.1903 - accuracy: 0.01 - ETA: 0s - loss: 21377.5557 - accuracy: 0.00 - ETA: 0s - loss: 22713.5814 - accuracy: 0.00 - 0s 184us/step - loss: 21743.5960 - accuracy: 0.0081\n",
      "Epoch 13/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 11323.8379 - accuracy: 0.20 - ETA: 0s - loss: 34010.2912 - accuracy: 0.01 - ETA: 0s - loss: 26084.7010 - accuracy: 0.01 - ETA: 0s - loss: 21256.9156 - accuracy: 0.01 - ETA: 0s - loss: 21117.2134 - accuracy: 0.01 - ETA: 0s - loss: 21078.1587 - accuracy: 0.01 - 0s 181us/step - loss: 20971.2065 - accuracy: 0.0144\n",
      "Epoch 14/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16828.2500 - accuracy: 0.0000e+ - ETA: 0s - loss: 22751.6798 - accuracy: 0.0140   - ETA: 0s - loss: 20451.4306 - accuracy: 0.00 - ETA: 0s - loss: 17532.5972 - accuracy: 0.00 - ETA: 0s - loss: 18867.6809 - accuracy: 0.00 - ETA: 0s - loss: 21187.5421 - accuracy: 0.00 - 0s 184us/step - loss: 20313.7531 - accuracy: 0.0094\n",
      "Epoch 15/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 216753.8438 - accuracy: 0.0000e+0 - ETA: 0s - loss: 24932.4211 - accuracy: 0.0148    - ETA: 0s - loss: 29445.2677 - accuracy: 0.01 - ETA: 0s - loss: 26346.5855 - accuracy: 0.01 - ETA: 0s - loss: 24429.5136 - accuracy: 0.01 - ETA: 0s - loss: 21498.7399 - accuracy: 0.02 - 0s 186us/step - loss: 19755.8592 - accuracy: 0.0244\n",
      "Epoch 16/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 158278.0000 - accuracy: 0.0000e+0 - ETA: 0s - loss: 21379.8114 - accuracy: 0.0237    - ETA: 0s - loss: 20425.2235 - accuracy: 0.04 - ETA: 0s - loss: 20895.3035 - accuracy: 0.04 - ETA: 0s - loss: 18948.9993 - accuracy: 0.04 - ETA: 0s - loss: 19582.5467 - accuracy: 0.04 - ETA: 0s - loss: 19570.3136 - accuracy: 0.04 - 0s 198us/step - loss: 19262.5861 - accuracy: 0.0406\n",
      "Epoch 17/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2420.1108 - accuracy: 0.0000e+0 - ETA: 0s - loss: 10372.4942 - accuracy: 0.0423  - ETA: 0s - loss: 15396.7039 - accuracy: 0.04 - ETA: 0s - loss: 21646.6087 - accuracy: 0.04 - ETA: 0s - loss: 20262.7910 - accuracy: 0.05 - ETA: 0s - loss: 19764.4643 - accuracy: 0.05 - 0s 189us/step - loss: 18856.2553 - accuracy: 0.0531\n",
      "Epoch 18/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 851.4603 - accuracy: 0.0000e+ - ETA: 0s - loss: 15704.3097 - accuracy: 0.0691 - ETA: 0s - loss: 15171.9120 - accuracy: 0.06 - ETA: 0s - loss: 18112.0667 - accuracy: 0.05 - ETA: 0s - loss: 16732.8908 - accuracy: 0.06 - ETA: 0s - loss: 17928.3349 - accuracy: 0.06 - 0s 179us/step - loss: 18512.2536 - accuracy: 0.0600\n",
      "Epoch 19/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4960.2095 - accuracy: 0.400 - ETA: 0s - loss: 16501.8443 - accuracy: 0.06 - ETA: 0s - loss: 21190.3520 - accuracy: 0.06 - ETA: 0s - loss: 23311.5806 - accuracy: 0.06 - ETA: 0s - loss: 20854.1040 - accuracy: 0.06 - ETA: 0s - loss: 18979.0953 - accuracy: 0.07 - 0s 184us/step - loss: 18218.6404 - accuracy: 0.0725\n",
      "Epoch 20/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4497.4556 - accuracy: 0.200 - ETA: 0s - loss: 19060.2516 - accuracy: 0.09 - ETA: 0s - loss: 15004.0993 - accuracy: 0.07 - ETA: 0s - loss: 12945.0462 - accuracy: 0.07 - ETA: 0s - loss: 14192.8917 - accuracy: 0.07 - ETA: 0s - loss: 16239.3660 - accuracy: 0.07 - 0s 186us/step - loss: 17989.5668 - accuracy: 0.0787\n",
      "Epoch 21/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 37438.5859 - accuracy: 0.0000e+ - ETA: 0s - loss: 12831.5775 - accuracy: 0.0828   - ETA: 0s - loss: 13070.1158 - accuracy: 0.07 - ETA: 0s - loss: 13489.9553 - accuracy: 0.07 - ETA: 0s - loss: 16841.5892 - accuracy: 0.08 - ETA: 0s - loss: 16560.2025 - accuracy: 0.08 - 0s 187us/step - loss: 17785.3183 - accuracy: 0.0838\n",
      "Epoch 22/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5658.7256 - accuracy: 0.200 - ETA: 0s - loss: 13221.4775 - accuracy: 0.09 - ETA: 0s - loss: 15865.8015 - accuracy: 0.08 - ETA: 0s - loss: 18145.6672 - accuracy: 0.07 - ETA: 0s - loss: 19018.0430 - accuracy: 0.08 - ETA: 0s - loss: 18355.3495 - accuracy: 0.08 - 0s 176us/step - loss: 17610.2407 - accuracy: 0.0900\n",
      "Epoch 23/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 10452.4033 - accuracy: 0.0000e+ - ETA: 0s - loss: 18086.9995 - accuracy: 0.1036   - ETA: 0s - loss: 18021.7581 - accuracy: 0.08 - ETA: 0s - loss: 17309.9359 - accuracy: 0.08 - ETA: 0s - loss: 16940.7032 - accuracy: 0.08 - ETA: 0s - loss: 16862.9178 - accuracy: 0.09 - 0s 183us/step - loss: 17474.3523 - accuracy: 0.0956\n",
      "Epoch 24/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 12218.5547 - accuracy: 0.20 - ETA: 0s - loss: 16783.2470 - accuracy: 0.09 - ETA: 0s - loss: 14214.9632 - accuracy: 0.10 - ETA: 0s - loss: 15544.9070 - accuracy: 0.10 - ETA: 0s - loss: 15716.7663 - accuracy: 0.11 - ETA: 0s - loss: 16727.0475 - accuracy: 0.11 - 0s 182us/step - loss: 17353.0899 - accuracy: 0.1050\n",
      "Epoch 25/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5124.1992 - accuracy: 0.0000e+0 - ETA: 0s - loss: 15454.9621 - accuracy: 0.0720  - ETA: 0s - loss: 16555.1681 - accuracy: 0.08 - ETA: 0s - loss: 20175.5514 - accuracy: 0.09 - ETA: 0s - loss: 17377.3458 - accuracy: 0.10 - ETA: 0s - loss: 17685.5077 - accuracy: 0.10 - ETA: 0s - loss: 17778.8291 - accuracy: 0.10 - 0s 201us/step - loss: 17253.7796 - accuracy: 0.1037\n",
      "Epoch 26/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16846.8438 - accuracy: 0.20 - ETA: 0s - loss: 20334.9391 - accuracy: 0.12 - ETA: 0s - loss: 17715.5943 - accuracy: 0.10 - ETA: 0s - loss: 17230.5449 - accuracy: 0.11 - ETA: 0s - loss: 16176.0493 - accuracy: 0.11 - ETA: 0s - loss: 16801.7888 - accuracy: 0.11 - ETA: 0s - loss: 17487.0754 - accuracy: 0.11 - 0s 200us/step - loss: 17161.2617 - accuracy: 0.1156\n",
      "Epoch 27/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2949.3833 - accuracy: 0.200 - ETA: 0s - loss: 14569.8444 - accuracy: 0.12 - ETA: 0s - loss: 15157.2213 - accuracy: 0.11 - ETA: 0s - loss: 16376.7441 - accuracy: 0.11 - ETA: 0s - loss: 16784.6538 - accuracy: 0.11 - ETA: 0s - loss: 19608.0596 - accuracy: 0.11 - ETA: 0s - loss: 17337.6686 - accuracy: 0.12 - 0s 199us/step - loss: 17088.7913 - accuracy: 0.1200\n",
      "Epoch 28/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 19207.4023 - accuracy: 0.0000e+ - ETA: 0s - loss: 13598.5574 - accuracy: 0.1167   - ETA: 0s - loss: 15053.6487 - accuracy: 0.12 - ETA: 0s - loss: 13965.5666 - accuracy: 0.11 - ETA: 0s - loss: 16698.9120 - accuracy: 0.12 - ETA: 0s - loss: 17794.9500 - accuracy: 0.12 - ETA: 0s - loss: 17429.4938 - accuracy: 0.12 - ETA: 0s - loss: 17118.3813 - accuracy: 0.12 - 0s 226us/step - loss: 17025.5701 - accuracy: 0.1269\n",
      "Epoch 29/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4317.0571 - accuracy: 0.400 - ETA: 0s - loss: 22753.3934 - accuracy: 0.14 - ETA: 0s - loss: 17622.5406 - accuracy: 0.13 - ETA: 0s - loss: 17296.9216 - accuracy: 0.12 - ETA: 0s - loss: 17036.8484 - accuracy: 0.12 - ETA: 0s - loss: 17666.3941 - accuracy: 0.12 - ETA: 0s - loss: 16489.1838 - accuracy: 0.12 - 0s 201us/step - loss: 16970.7756 - accuracy: 0.1275\n",
      "Epoch 30/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6323.5596 - accuracy: 0.0000e+0 - ETA: 0s - loss: 17415.5830 - accuracy: 0.1296  - ETA: 0s - loss: 17227.8252 - accuracy: 0.12 - ETA: 0s - loss: 18255.1540 - accuracy: 0.12 - ETA: 0s - loss: 17690.5799 - accuracy: 0.12 - ETA: 0s - loss: 17023.1743 - accuracy: 0.12 - ETA: 0s - loss: 17284.4379 - accuracy: 0.13 - 0s 200us/step - loss: 16917.9300 - accuracy: 0.1312\n",
      "Epoch 31/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 31170.9258 - accuracy: 0.40 - ETA: 0s - loss: 15379.6101 - accuracy: 0.14 - ETA: 0s - loss: 17129.8082 - accuracy: 0.15 - ETA: 0s - loss: 16661.9763 - accuracy: 0.13 - ETA: 0s - loss: 14263.9430 - accuracy: 0.13 - ETA: 0s - loss: 17250.6235 - accuracy: 0.13 - ETA: 0s - loss: 16626.8791 - accuracy: 0.13 - 0s 209us/step - loss: 16866.6008 - accuracy: 0.1344\n",
      "Epoch 32/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 11816.6973 - accuracy: 0.0000e+ - ETA: 0s - loss: 11948.9515 - accuracy: 0.1600   - ETA: 0s - loss: 15374.1090 - accuracy: 0.14 - ETA: 0s - loss: 14486.0974 - accuracy: 0.14 - ETA: 0s - loss: 14253.9533 - accuracy: 0.15 - ETA: 0s - loss: 16007.8313 - accuracy: 0.14 - ETA: 0s - loss: 17468.2260 - accuracy: 0.14 - ETA: 0s - loss: 17114.0223 - accuracy: 0.14 - 0s 232us/step - loss: 16825.6835 - accuracy: 0.1375\n",
      "Epoch 33/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 22065.0566 - accuracy: 0.40 - ETA: 0s - loss: 13232.7936 - accuracy: 0.12 - ETA: 0s - loss: 13007.0823 - accuracy: 0.14 - ETA: 0s - loss: 18976.9312 - accuracy: 0.14 - ETA: 0s - loss: 19835.5555 - accuracy: 0.14 - ETA: 0s - loss: 17094.6793 - accuracy: 0.14 - ETA: 0s - loss: 17614.3367 - accuracy: 0.13 - 0s 218us/step - loss: 16789.7179 - accuracy: 0.1406\n",
      "Epoch 34/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1396.4137 - accuracy: 0.200 - ETA: 0s - loss: 16306.5868 - accuracy: 0.13 - ETA: 0s - loss: 17096.5912 - accuracy: 0.13 - ETA: 0s - loss: 17273.3725 - accuracy: 0.13 - ETA: 0s - loss: 19272.0864 - accuracy: 0.13 - ETA: 0s - loss: 19341.7791 - accuracy: 0.14 - ETA: 0s - loss: 17838.5635 - accuracy: 0.13 - ETA: 0s - loss: 17109.4153 - accuracy: 0.13 - 0s 232us/step - loss: 16743.4817 - accuracy: 0.1400\n",
      "Epoch 35/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 13115.4971 - accuracy: 0.20 - ETA: 0s - loss: 20060.3609 - accuracy: 0.10 - ETA: 0s - loss: 19009.6832 - accuracy: 0.13 - ETA: 0s - loss: 18626.9625 - accuracy: 0.13 - ETA: 0s - loss: 20545.9047 - accuracy: 0.12 - ETA: 0s - loss: 20525.8006 - accuracy: 0.13 - ETA: 0s - loss: 18432.3235 - accuracy: 0.13 - ETA: 0s - loss: 17009.5998 - accuracy: 0.13 - 0s 238us/step - loss: 16712.0160 - accuracy: 0.1431\n",
      "Epoch 36/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5103.7393 - accuracy: 0.200 - ETA: 0s - loss: 18807.4924 - accuracy: 0.16 - ETA: 0s - loss: 12988.0739 - accuracy: 0.15 - ETA: 0s - loss: 12767.2305 - accuracy: 0.15 - ETA: 0s - loss: 15038.4377 - accuracy: 0.15 - ETA: 0s - loss: 14510.0434 - accuracy: 0.15 - ETA: 0s - loss: 15310.9193 - accuracy: 0.14 - ETA: 0s - loss: 16490.8311 - accuracy: 0.14 - 0s 237us/step - loss: 16681.7723 - accuracy: 0.1450\n",
      "Epoch 37/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2827.1914 - accuracy: 0.400 - ETA: 0s - loss: 19201.7075 - accuracy: 0.15 - ETA: 0s - loss: 15895.4905 - accuracy: 0.15 - ETA: 0s - loss: 17589.0385 - accuracy: 0.14 - ETA: 0s - loss: 19618.0285 - accuracy: 0.13 - ETA: 0s - loss: 18664.4900 - accuracy: 0.14 - ETA: 0s - loss: 16726.0299 - accuracy: 0.13 - ETA: 0s - loss: 17177.2970 - accuracy: 0.13 - 0s 239us/step - loss: 16646.8370 - accuracy: 0.1419\n",
      "Epoch 38/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1600/1600 [==============================] - ETA: 0s - loss: 1920.2551 - accuracy: 0.200 - ETA: 0s - loss: 9702.7360 - accuracy: 0.136 - ETA: 0s - loss: 10171.8666 - accuracy: 0.16 - ETA: 0s - loss: 15512.1498 - accuracy: 0.15 - ETA: 0s - loss: 16037.9019 - accuracy: 0.15 - ETA: 0s - loss: 17565.7934 - accuracy: 0.15 - ETA: 0s - loss: 17937.3778 - accuracy: 0.14 - ETA: 0s - loss: 16652.2045 - accuracy: 0.15 - 0s 236us/step - loss: 16614.2728 - accuracy: 0.1456\n",
      "Epoch 39/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2242.4153 - accuracy: 0.0000e+0 - ETA: 0s - loss: 7649.4570 - accuracy: 0.1300    - ETA: 0s - loss: 15232.5468 - accuracy: 0.13 - ETA: 0s - loss: 18143.8750 - accuracy: 0.14 - ETA: 0s - loss: 17304.1096 - accuracy: 0.13 - ETA: 0s - loss: 16865.7459 - accuracy: 0.14 - ETA: 0s - loss: 16755.4729 - accuracy: 0.14 - ETA: 0s - loss: 16722.0272 - accuracy: 0.14 - 0s 231us/step - loss: 16584.3112 - accuracy: 0.1469\n",
      "Epoch 40/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2435.0386 - accuracy: 0.200 - ETA: 0s - loss: 6005.5799 - accuracy: 0.169 - ETA: 0s - loss: 13161.0179 - accuracy: 0.14 - ETA: 0s - loss: 11833.4915 - accuracy: 0.14 - ETA: 0s - loss: 12866.1697 - accuracy: 0.14 - ETA: 0s - loss: 14619.9600 - accuracy: 0.14 - ETA: 0s - loss: 15135.7971 - accuracy: 0.14 - ETA: 0s - loss: 15609.4539 - accuracy: 0.14 - ETA: 0s - loss: 16576.3488 - accuracy: 0.14 - 0s 257us/step - loss: 16548.1493 - accuracy: 0.1475\n",
      "Epoch 41/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4365.9844 - accuracy: 0.0000e+0 - ETA: 0s - loss: 12100.9194 - accuracy: 0.1333  - ETA: 0s - loss: 20714.3752 - accuracy: 0.13 - ETA: 0s - loss: 17503.4863 - accuracy: 0.14 - ETA: 0s - loss: 17460.5605 - accuracy: 0.14 - ETA: 0s - loss: 18917.4183 - accuracy: 0.14 - ETA: 0s - loss: 18289.4428 - accuracy: 0.14 - ETA: 0s - loss: 16766.2853 - accuracy: 0.14 - ETA: 0s - loss: 17272.4413 - accuracy: 0.14 - 0s 276us/step - loss: 16528.7708 - accuracy: 0.1494\n",
      "Epoch 42/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4286.5044 - accuracy: 0.400 - ETA: 0s - loss: 21859.8832 - accuracy: 0.15 - ETA: 0s - loss: 19637.7736 - accuracy: 0.16 - ETA: 0s - loss: 18239.8235 - accuracy: 0.15 - ETA: 0s - loss: 16243.4267 - accuracy: 0.14 - ETA: 0s - loss: 16921.6034 - accuracy: 0.14 - ETA: 0s - loss: 16879.6648 - accuracy: 0.14 - ETA: 0s - loss: 15910.4374 - accuracy: 0.14 - 0s 246us/step - loss: 16494.3871 - accuracy: 0.1500\n",
      "Epoch 43/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6810.8608 - accuracy: 0.200 - ETA: 0s - loss: 12826.3369 - accuracy: 0.15 - ETA: 0s - loss: 19239.2156 - accuracy: 0.16 - ETA: 0s - loss: 15454.9933 - accuracy: 0.16 - ETA: 0s - loss: 16965.3166 - accuracy: 0.15 - ETA: 0s - loss: 15552.4208 - accuracy: 0.15 - ETA: 0s - loss: 14498.8138 - accuracy: 0.15 - ETA: 0s - loss: 15839.4002 - accuracy: 0.15 - ETA: 0s - loss: 16695.8815 - accuracy: 0.15 - 0s 265us/step - loss: 16474.8117 - accuracy: 0.1494\n",
      "Epoch 44/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2318.0962 - accuracy: 0.0000e+0 - ETA: 0s - loss: 15541.3456 - accuracy: 0.1538  - ETA: 0s - loss: 12055.6043 - accuracy: 0.15 - ETA: 0s - loss: 18316.2236 - accuracy: 0.16 - ETA: 0s - loss: 17900.8361 - accuracy: 0.16 - ETA: 0s - loss: 17379.6961 - accuracy: 0.16 - ETA: 0s - loss: 17979.2026 - accuracy: 0.16 - ETA: 0s - loss: 16537.5465 - accuracy: 0.15 - ETA: 0s - loss: 16678.6605 - accuracy: 0.15 - ETA: 0s - loss: 16479.7680 - accuracy: 0.15 - 0s 289us/step - loss: 16447.6829 - accuracy: 0.1506\n",
      "Epoch 45/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 138.2023 - accuracy: 0.20 - ETA: 0s - loss: 13101.2929 - accuracy: 0.13 - ETA: 0s - loss: 19451.5801 - accuracy: 0.14 - ETA: 0s - loss: 16222.2759 - accuracy: 0.15 - ETA: 0s - loss: 14608.6248 - accuracy: 0.15 - ETA: 0s - loss: 13762.2516 - accuracy: 0.14 - ETA: 0s - loss: 14997.9211 - accuracy: 0.15 - ETA: 0s - loss: 14760.7489 - accuracy: 0.15 - ETA: 0s - loss: 17179.6893 - accuracy: 0.15 - 0s 278us/step - loss: 16428.0525 - accuracy: 0.1513\n",
      "Epoch 46/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 8144.3203 - accuracy: 0.400 - ETA: 0s - loss: 10964.0241 - accuracy: 0.12 - ETA: 0s - loss: 11178.9860 - accuracy: 0.14 - ETA: 0s - loss: 13687.1274 - accuracy: 0.15 - ETA: 0s - loss: 15940.3720 - accuracy: 0.14 - ETA: 0s - loss: 14300.4656 - accuracy: 0.15 - ETA: 0s - loss: 16387.7457 - accuracy: 0.15 - ETA: 0s - loss: 16320.6282 - accuracy: 0.15 - ETA: 0s - loss: 17039.1329 - accuracy: 0.15 - 0s 271us/step - loss: 16390.3957 - accuracy: 0.1513\n",
      "Epoch 47/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 8003.4204 - accuracy: 0.200 - ETA: 0s - loss: 12450.5822 - accuracy: 0.17 - ETA: 0s - loss: 9208.5183 - accuracy: 0.1611 - ETA: 0s - loss: 13213.4134 - accuracy: 0.15 - ETA: 0s - loss: 12544.0953 - accuracy: 0.14 - ETA: 0s - loss: 15351.7736 - accuracy: 0.15 - ETA: 0s - loss: 16075.2276 - accuracy: 0.14 - ETA: 0s - loss: 15615.2577 - accuracy: 0.14 - ETA: 0s - loss: 17156.1170 - accuracy: 0.14 - ETA: 0s - loss: 16317.7986 - accuracy: 0.15 - 0s 290us/step - loss: 16379.3555 - accuracy: 0.1525\n",
      "Epoch 48/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 7261.4502 - accuracy: 0.200 - ETA: 0s - loss: 23541.5073 - accuracy: 0.15 - ETA: 0s - loss: 22378.3760 - accuracy: 0.15 - ETA: 0s - loss: 19733.5849 - accuracy: 0.15 - ETA: 0s - loss: 18250.0134 - accuracy: 0.15 - ETA: 0s - loss: 17431.2327 - accuracy: 0.15 - ETA: 0s - loss: 17282.2689 - accuracy: 0.15 - ETA: 0s - loss: 16491.1252 - accuracy: 0.15 - ETA: 0s - loss: 15676.9275 - accuracy: 0.15 - 0s 274us/step - loss: 16346.3571 - accuracy: 0.1538\n",
      "Epoch 49/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2505.6912 - accuracy: 0.200 - ETA: 0s - loss: 15216.7296 - accuracy: 0.17 - ETA: 0s - loss: 15845.4515 - accuracy: 0.18 - ETA: 0s - loss: 13777.9547 - accuracy: 0.17 - ETA: 0s - loss: 17811.1972 - accuracy: 0.16 - ETA: 0s - loss: 15707.4555 - accuracy: 0.16 - ETA: 0s - loss: 15062.4299 - accuracy: 0.15 - ETA: 0s - loss: 16090.0810 - accuracy: 0.15 - ETA: 0s - loss: 15258.9969 - accuracy: 0.15 - ETA: 0s - loss: 16379.2173 - accuracy: 0.15 - 0s 290us/step - loss: 16331.0529 - accuracy: 0.1519\n",
      "Epoch 50/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2016.9838 - accuracy: 0.200 - ETA: 0s - loss: 6386.7664 - accuracy: 0.139 - ETA: 0s - loss: 10114.8080 - accuracy: 0.14 - ETA: 0s - loss: 9538.5155 - accuracy: 0.1464 - ETA: 0s - loss: 11280.9849 - accuracy: 0.16 - ETA: 0s - loss: 13339.4713 - accuracy: 0.15 - ETA: 0s - loss: 14415.6299 - accuracy: 0.15 - ETA: 0s - loss: 15672.4094 - accuracy: 0.15 - ETA: 0s - loss: 15545.5451 - accuracy: 0.15 - ETA: 0s - loss: 16058.7304 - accuracy: 0.15 - 0s 307us/step - loss: 16304.0342 - accuracy: 0.1562\n",
      "Epoch 51/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2221.5083 - accuracy: 0.0000e+0 - ETA: 0s - loss: 18947.1096 - accuracy: 0.1778  - ETA: 0s - loss: 13518.5686 - accuracy: 0.17 - ETA: 0s - loss: 14929.1331 - accuracy: 0.16 - ETA: 0s - loss: 18375.0682 - accuracy: 0.16 - ETA: 0s - loss: 19345.9235 - accuracy: 0.15 - ETA: 0s - loss: 19323.2497 - accuracy: 0.15 - ETA: 0s - loss: 18576.7255 - accuracy: 0.14 - ETA: 0s - loss: 17183.1751 - accuracy: 0.15 - ETA: 0s - loss: 16328.2281 - accuracy: 0.15 - 0s 293us/step - loss: 16269.8590 - accuracy: 0.1525\n",
      "Epoch 52/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5118.4219 - accuracy: 0.200 - ETA: 0s - loss: 6691.2979 - accuracy: 0.190 - ETA: 0s - loss: 7678.2759 - accuracy: 0.163 - ETA: 0s - loss: 12016.7449 - accuracy: 0.15 - ETA: 0s - loss: 14796.4855 - accuracy: 0.14 - ETA: 0s - loss: 14103.6417 - accuracy: 0.15 - ETA: 0s - loss: 13163.1995 - accuracy: 0.14 - ETA: 0s - loss: 15527.1635 - accuracy: 0.15 - ETA: 0s - loss: 16568.3376 - accuracy: 0.15 - ETA: 0s - loss: 16291.6918 - accuracy: 0.15 - 0s 292us/step - loss: 16257.4168 - accuracy: 0.1556\n",
      "Epoch 53/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2329.1792 - accuracy: 0.200 - ETA: 0s - loss: 9669.0865 - accuracy: 0.124 - ETA: 0s - loss: 12969.2877 - accuracy: 0.14 - ETA: 0s - loss: 11722.3814 - accuracy: 0.15 - ETA: 0s - loss: 11075.8763 - accuracy: 0.15 - ETA: 0s - loss: 13396.1438 - accuracy: 0.16 - ETA: 0s - loss: 15029.4724 - accuracy: 0.15 - ETA: 0s - loss: 15931.5443 - accuracy: 0.15 - ETA: 0s - loss: 15507.7990 - accuracy: 0.15 - 0s 264us/step - loss: 16228.4095 - accuracy: 0.1562\n",
      "Epoch 54/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 7111.1367 - accuracy: 0.0000e+0 - ETA: 0s - loss: 12389.8260 - accuracy: 0.1667  - ETA: 0s - loss: 16821.2491 - accuracy: 0.16 - ETA: 0s - loss: 16710.9280 - accuracy: 0.15 - ETA: 0s - loss: 16114.3034 - accuracy: 0.14 - ETA: 0s - loss: 14504.7755 - accuracy: 0.15 - ETA: 0s - loss: 16599.9745 - accuracy: 0.15 - ETA: 0s - loss: 15600.8146 - accuracy: 0.15 - ETA: 0s - loss: 16403.8680 - accuracy: 0.15 - 0s 284us/step - loss: 16201.7953 - accuracy: 0.1525\n",
      "Epoch 55/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6684.7397 - accuracy: 0.400 - ETA: 0s - loss: 12187.0229 - accuracy: 0.19 - ETA: 0s - loss: 15119.1300 - accuracy: 0.18 - ETA: 0s - loss: 17537.3610 - accuracy: 0.16 - ETA: 0s - loss: 20734.1046 - accuracy: 0.16 - ETA: 0s - loss: 20674.5199 - accuracy: 0.16 - ETA: 0s - loss: 18938.9006 - accuracy: 0.15 - ETA: 0s - loss: 18021.7479 - accuracy: 0.15 - ETA: 0s - loss: 16950.5079 - accuracy: 0.15 - 0s 275us/step - loss: 16193.4660 - accuracy: 0.1544\n",
      "Epoch 56/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 26734.2090 - accuracy: 0.0000e+ - ETA: 0s - loss: 7664.5861 - accuracy: 0.1030     - ETA: 0s - loss: 12181.5563 - accuracy: 0.14 - ETA: 0s - loss: 12870.1067 - accuracy: 0.14 - ETA: 0s - loss: 14105.8753 - accuracy: 0.15 - ETA: 0s - loss: 17008.4121 - accuracy: 0.15 - ETA: 0s - loss: 17454.7797 - accuracy: 0.15 - ETA: 0s - loss: 16261.8496 - accuracy: 0.15 - ETA: 0s - loss: 15716.6863 - accuracy: 0.15 - 0s 274us/step - loss: 16169.8959 - accuracy: 0.1556\n",
      "Epoch 57/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1904.3008 - accuracy: 0.200 - ETA: 0s - loss: 7920.3426 - accuracy: 0.174 - ETA: 0s - loss: 8361.0626 - accuracy: 0.186 - ETA: 0s - loss: 9822.9827 - accuracy: 0.175 - ETA: 0s - loss: 13662.1672 - accuracy: 0.17 - ETA: 0s - loss: 12522.7777 - accuracy: 0.17 - ETA: 0s - loss: 14560.3419 - accuracy: 0.16 - ETA: 0s - loss: 15142.6005 - accuracy: 0.15 - ETA: 0s - loss: 15701.2181 - accuracy: 0.15 - 0s 279us/step - loss: 16148.6042 - accuracy: 0.1550\n",
      "Epoch 58/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4603.8613 - accuracy: 0.200 - ETA: 0s - loss: 12710.9116 - accuracy: 0.16 - ETA: 0s - loss: 9931.2773 - accuracy: 0.1784 - ETA: 0s - loss: 11402.8716 - accuracy: 0.17 - ETA: 0s - loss: 12087.2572 - accuracy: 0.16 - ETA: 0s - loss: 16060.7729 - accuracy: 0.15 - ETA: 0s - loss: 14560.4041 - accuracy: 0.15 - ETA: 0s - loss: 14298.7530 - accuracy: 0.15 - ETA: 0s - loss: 14028.3083 - accuracy: 0.15 - 0s 284us/step - loss: 16124.3478 - accuracy: 0.1538\n",
      "Epoch 59/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 823.3109 - accuracy: 0.20 - ETA: 0s - loss: 10403.4293 - accuracy: 0.14 - ETA: 0s - loss: 13579.7507 - accuracy: 0.15 - ETA: 0s - loss: 11736.6557 - accuracy: 0.15 - ETA: 0s - loss: 12203.6276 - accuracy: 0.16 - ETA: 0s - loss: 12331.3745 - accuracy: 0.15 - ETA: 0s - loss: 14975.3537 - accuracy: 0.16 - ETA: 0s - loss: 15362.8117 - accuracy: 0.15 - ETA: 0s - loss: 16501.7154 - accuracy: 0.15 - 0s 277us/step - loss: 16102.9197 - accuracy: 0.1550\n",
      "Epoch 60/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6972.7539 - accuracy: 0.400 - ETA: 0s - loss: 16724.9262 - accuracy: 0.09 - ETA: 0s - loss: 17451.9368 - accuracy: 0.12 - ETA: 0s - loss: 17496.9617 - accuracy: 0.14 - ETA: 0s - loss: 17786.6665 - accuracy: 0.14 - ETA: 0s - loss: 18137.0391 - accuracy: 0.14 - ETA: 0s - loss: 16457.0751 - accuracy: 0.14 - ETA: 0s - loss: 15835.9707 - accuracy: 0.14 - ETA: 0s - loss: 16124.9327 - accuracy: 0.15 - 0s 267us/step - loss: 16082.5891 - accuracy: 0.1544\n",
      "Epoch 61/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1494.4607 - accuracy: 0.200 - ETA: 0s - loss: 5609.9894 - accuracy: 0.168 - ETA: 0s - loss: 9798.4102 - accuracy: 0.163 - ETA: 0s - loss: 12905.4369 - accuracy: 0.17 - ETA: 0s - loss: 12785.9633 - accuracy: 0.16 - ETA: 0s - loss: 16747.6448 - accuracy: 0.15 - ETA: 0s - loss: 15314.4335 - accuracy: 0.15 - ETA: 0s - loss: 14705.7227 - accuracy: 0.15 - ETA: 0s - loss: 17377.0430 - accuracy: 0.16 - ETA: 0s - loss: 16876.6248 - accuracy: 0.15 - ETA: 0s - loss: 16808.9934 - accuracy: 0.15 - 1s 344us/step - loss: 16063.0401 - accuracy: 0.1550\n",
      "Epoch 62/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 12147.9346 - accuracy: 0.0000e+ - ETA: 0s - loss: 10806.3146 - accuracy: 0.1562   - ETA: 0s - loss: 13930.7098 - accuracy: 0.14 - ETA: 0s - loss: 13207.1976 - accuracy: 0.15 - ETA: 0s - loss: 16209.7380 - accuracy: 0.13 - ETA: 0s - loss: 15149.6361 - accuracy: 0.13 - ETA: 0s - loss: 17458.2893 - accuracy: 0.13 - ETA: 0s - loss: 16572.6630 - accuracy: 0.14 - ETA: 0s - loss: 17329.9398 - accuracy: 0.15 - ETA: 0s - loss: 16563.3045 - accuracy: 0.15 - 0s 301us/step - loss: 16044.6142 - accuracy: 0.1556\n",
      "Epoch 63/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 3566.1353 - accuracy: 0.400 - ETA: 0s - loss: 11428.3196 - accuracy: 0.17 - ETA: 0s - loss: 11851.0232 - accuracy: 0.15 - ETA: 0s - loss: 11832.9426 - accuracy: 0.15 - ETA: 0s - loss: 11505.4235 - accuracy: 0.13 - ETA: 0s - loss: 12258.6761 - accuracy: 0.14 - ETA: 0s - loss: 12866.0192 - accuracy: 0.15 - ETA: 0s - loss: 13632.4532 - accuracy: 0.15 - ETA: 0s - loss: 16744.3547 - accuracy: 0.15 - ETA: 0s - loss: 15530.3534 - accuracy: 0.15 - 0s 296us/step - loss: 16023.8242 - accuracy: 0.1569\n",
      "Epoch 64/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1958.8031 - accuracy: 0.200 - ETA: 0s - loss: 12327.4858 - accuracy: 0.11 - ETA: 0s - loss: 10490.3075 - accuracy: 0.10 - ETA: 0s - loss: 10345.2869 - accuracy: 0.12 - ETA: 0s - loss: 13328.7737 - accuracy: 0.13 - ETA: 0s - loss: 17059.7097 - accuracy: 0.16 - ETA: 0s - loss: 18433.6802 - accuracy: 0.15 - ETA: 0s - loss: 17145.7033 - accuracy: 0.15 - ETA: 0s - loss: 16549.6581 - accuracy: 0.15 - 0s 284us/step - loss: 16014.2542 - accuracy: 0.1550\n",
      "Epoch 65/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5916.4653 - accuracy: 0.200 - ETA: 0s - loss: 11214.1198 - accuracy: 0.19 - ETA: 0s - loss: 14785.7841 - accuracy: 0.17 - ETA: 0s - loss: 12711.4607 - accuracy: 0.16 - ETA: 0s - loss: 11542.9943 - accuracy: 0.16 - ETA: 0s - loss: 10957.2575 - accuracy: 0.16 - ETA: 0s - loss: 12720.2639 - accuracy: 0.16 - ETA: 0s - loss: 14427.6197 - accuracy: 0.16 - ETA: 0s - loss: 15395.2642 - accuracy: 0.15 - 0s 280us/step - loss: 15990.3996 - accuracy: 0.1581\n",
      "Epoch 66/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 3049.7031 - accuracy: 0.0000e+0 - ETA: 0s - loss: 16590.2597 - accuracy: 0.1389  - ETA: 0s - loss: 18817.9095 - accuracy: 0.14 - ETA: 0s - loss: 18874.2307 - accuracy: 0.14 - ETA: 0s - loss: 18867.1373 - accuracy: 0.15 - ETA: 0s - loss: 18433.7293 - accuracy: 0.15 - ETA: 0s - loss: 16626.8510 - accuracy: 0.16 - ETA: 0s - loss: 16431.5260 - accuracy: 0.16 - 0s 253us/step - loss: 15967.5046 - accuracy: 0.1556\n",
      "Epoch 67/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1450.6360 - accuracy: 0.400 - ETA: 0s - loss: 19253.3181 - accuracy: 0.15 - ETA: 0s - loss: 16266.1034 - accuracy: 0.16 - ETA: 0s - loss: 15247.5701 - accuracy: 0.15 - ETA: 0s - loss: 14366.5877 - accuracy: 0.15 - ETA: 0s - loss: 16358.6360 - accuracy: 0.16 - ETA: 0s - loss: 16555.6502 - accuracy: 0.16 - ETA: 0s - loss: 15433.0060 - accuracy: 0.16 - ETA: 0s - loss: 15993.1157 - accuracy: 0.15 - 0s 257us/step - loss: 15952.9295 - accuracy: 0.1587\n",
      "Epoch 68/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1600/1600 [==============================] - ETA: 0s - loss: 15644.6377 - accuracy: 0.0000e+ - ETA: 0s - loss: 11793.5283 - accuracy: 0.1053   - ETA: 0s - loss: 17790.5905 - accuracy: 0.14 - ETA: 0s - loss: 16765.7514 - accuracy: 0.15 - ETA: 0s - loss: 16506.2865 - accuracy: 0.15 - ETA: 0s - loss: 16214.9359 - accuracy: 0.15 - ETA: 0s - loss: 15565.1460 - accuracy: 0.15 - ETA: 0s - loss: 16457.1926 - accuracy: 0.14 - 0s 251us/step - loss: 15937.0274 - accuracy: 0.1569\n",
      "Epoch 69/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 8576.4404 - accuracy: 0.200 - ETA: 0s - loss: 17891.0122 - accuracy: 0.11 - ETA: 0s - loss: 12791.1299 - accuracy: 0.13 - ETA: 0s - loss: 15343.6416 - accuracy: 0.15 - ETA: 0s - loss: 15322.0016 - accuracy: 0.15 - ETA: 0s - loss: 15597.2624 - accuracy: 0.15 - ETA: 0s - loss: 15434.1081 - accuracy: 0.15 - ETA: 0s - loss: 16602.4636 - accuracy: 0.15 - 0s 238us/step - loss: 15913.8232 - accuracy: 0.1612\n",
      "Epoch 70/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 7316.1274 - accuracy: 0.0000e+0 - ETA: 0s - loss: 11020.9802 - accuracy: 0.1684  - ETA: 0s - loss: 12207.4274 - accuracy: 0.17 - ETA: 0s - loss: 10998.5318 - accuracy: 0.18 - ETA: 0s - loss: 14223.7232 - accuracy: 0.18 - ETA: 0s - loss: 14466.4052 - accuracy: 0.18 - ETA: 0s - loss: 13773.4848 - accuracy: 0.17 - ETA: 0s - loss: 14076.9412 - accuracy: 0.17 - ETA: 0s - loss: 14306.7367 - accuracy: 0.16 - 0s 273us/step - loss: 15906.5924 - accuracy: 0.1650\n",
      "Epoch 71/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1633.4535 - accuracy: 0.400 - ETA: 0s - loss: 16611.6526 - accuracy: 0.15 - ETA: 0s - loss: 19779.9646 - accuracy: 0.15 - ETA: 0s - loss: 17171.0074 - accuracy: 0.17 - ETA: 0s - loss: 14722.2111 - accuracy: 0.17 - ETA: 0s - loss: 14042.8980 - accuracy: 0.16 - ETA: 0s - loss: 14235.6253 - accuracy: 0.16 - 0s 215us/step - loss: 15884.3757 - accuracy: 0.1600\n",
      "Epoch 72/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2389.4851 - accuracy: 0.600 - ETA: 0s - loss: 16233.7791 - accuracy: 0.12 - ETA: 0s - loss: 11173.3806 - accuracy: 0.15 - ETA: 0s - loss: 9912.2914 - accuracy: 0.1652 - ETA: 0s - loss: 9872.6140 - accuracy: 0.166 - ETA: 0s - loss: 11031.1075 - accuracy: 0.15 - ETA: 0s - loss: 11674.6167 - accuracy: 0.16 - ETA: 0s - loss: 15544.0175 - accuracy: 0.16 - 0s 253us/step - loss: 15866.6198 - accuracy: 0.1650\n",
      "Epoch 73/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1234.9863 - accuracy: 0.0000e+0 - ETA: 0s - loss: 13764.0028 - accuracy: 0.1722  - ETA: 0s - loss: 15422.6072 - accuracy: 0.17 - ETA: 0s - loss: 12543.9907 - accuracy: 0.17 - ETA: 0s - loss: 13765.3635 - accuracy: 0.16 - ETA: 0s - loss: 14811.0520 - accuracy: 0.17 - ETA: 0s - loss: 15884.6524 - accuracy: 0.17 - 0s 216us/step - loss: 15851.5378 - accuracy: 0.1688\n",
      "Epoch 74/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 3294.0449 - accuracy: 0.200 - ETA: 0s - loss: 23753.8642 - accuracy: 0.12 - ETA: 0s - loss: 18414.6131 - accuracy: 0.16 - ETA: 0s - loss: 17821.5767 - accuracy: 0.16 - ETA: 0s - loss: 17819.8925 - accuracy: 0.16 - ETA: 0s - loss: 16376.6948 - accuracy: 0.16 - ETA: 0s - loss: 16446.0661 - accuracy: 0.16 - 0s 204us/step - loss: 15840.1349 - accuracy: 0.1650\n",
      "Epoch 75/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 3250.0298 - accuracy: 0.0000e+0 - ETA: 0s - loss: 13863.8954 - accuracy: 0.1686  - ETA: 0s - loss: 14342.9307 - accuracy: 0.15 - ETA: 0s - loss: 14677.6934 - accuracy: 0.17 - ETA: 0s - loss: 15493.5844 - accuracy: 0.17 - ETA: 0s - loss: 15196.9304 - accuracy: 0.16 - ETA: 0s - loss: 15354.5840 - accuracy: 0.16 - 0s 202us/step - loss: 15815.4857 - accuracy: 0.1688\n",
      "Epoch 76/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 17569.0273 - accuracy: 0.0000e+ - ETA: 0s - loss: 15309.3328 - accuracy: 0.1720   - ETA: 0s - loss: 16487.3709 - accuracy: 0.17 - ETA: 0s - loss: 17935.2042 - accuracy: 0.17 - ETA: 0s - loss: 16179.4213 - accuracy: 0.17 - ETA: 0s - loss: 16367.1970 - accuracy: 0.17 - ETA: 0s - loss: 15799.5166 - accuracy: 0.16 - 0s 195us/step - loss: 15794.9137 - accuracy: 0.1675\n",
      "Epoch 77/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 10403.6582 - accuracy: 0.0000e+ - ETA: 0s - loss: 12442.2956 - accuracy: 0.1957   - ETA: 0s - loss: 12822.0568 - accuracy: 0.17 - ETA: 0s - loss: 19769.7674 - accuracy: 0.16 - ETA: 0s - loss: 17586.8734 - accuracy: 0.16 - ETA: 0s - loss: 17082.5862 - accuracy: 0.15 - ETA: 0s - loss: 15597.6566 - accuracy: 0.16 - 0s 194us/step - loss: 15782.1667 - accuracy: 0.1619\n",
      "Epoch 78/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6794.8799 - accuracy: 0.200 - ETA: 0s - loss: 16102.9970 - accuracy: 0.15 - ETA: 0s - loss: 14414.8578 - accuracy: 0.15 - ETA: 0s - loss: 16416.8339 - accuracy: 0.14 - ETA: 0s - loss: 15660.7883 - accuracy: 0.16 - ETA: 0s - loss: 14998.4267 - accuracy: 0.17 - ETA: 0s - loss: 15814.4139 - accuracy: 0.16 - 0s 197us/step - loss: 15760.1519 - accuracy: 0.1663\n",
      "Epoch 79/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 6643.3633 - accuracy: 0.200 - ETA: 0s - loss: 8354.9476 - accuracy: 0.152 - ETA: 0s - loss: 11169.9129 - accuracy: 0.16 - ETA: 0s - loss: 13043.9254 - accuracy: 0.16 - ETA: 0s - loss: 13976.2685 - accuracy: 0.17 - ETA: 0s - loss: 14830.5887 - accuracy: 0.17 - ETA: 0s - loss: 15795.0255 - accuracy: 0.16 - 0s 193us/step - loss: 15753.5309 - accuracy: 0.1669\n",
      "Epoch 80/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 10572.2627 - accuracy: 0.0000e+ - ETA: 0s - loss: 17778.0357 - accuracy: 0.1600   - ETA: 0s - loss: 13108.3130 - accuracy: 0.16 - ETA: 0s - loss: 13340.3500 - accuracy: 0.16 - ETA: 0s - loss: 12853.4118 - accuracy: 0.16 - ETA: 0s - loss: 13652.1931 - accuracy: 0.16 - 0s 183us/step - loss: 15731.9578 - accuracy: 0.1644\n",
      "Epoch 81/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 19297.8711 - accuracy: 0.20 - ETA: 0s - loss: 17238.7574 - accuracy: 0.17 - ETA: 0s - loss: 17630.4693 - accuracy: 0.15 - ETA: 0s - loss: 15422.3904 - accuracy: 0.15 - ETA: 0s - loss: 14334.9630 - accuracy: 0.16 - ETA: 0s - loss: 15467.4414 - accuracy: 0.17 - ETA: 0s - loss: 15750.1810 - accuracy: 0.16 - 0s 192us/step - loss: 15711.0661 - accuracy: 0.1669\n",
      "Epoch 82/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 4831.5771 - accuracy: 0.600 - ETA: 0s - loss: 20262.3165 - accuracy: 0.17 - ETA: 0s - loss: 18736.2516 - accuracy: 0.18 - ETA: 0s - loss: 19426.6544 - accuracy: 0.17 - ETA: 0s - loss: 16730.1402 - accuracy: 0.16 - ETA: 0s - loss: 16280.0016 - accuracy: 0.16 - 0s 185us/step - loss: 15697.4298 - accuracy: 0.1663\n",
      "Epoch 83/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 18497.4160 - accuracy: 0.20 - ETA: 0s - loss: 20886.7862 - accuracy: 0.16 - ETA: 0s - loss: 18347.2874 - accuracy: 0.17 - ETA: 0s - loss: 15845.5343 - accuracy: 0.16 - ETA: 0s - loss: 17449.8547 - accuracy: 0.16 - ETA: 0s - loss: 16648.7311 - accuracy: 0.16 - 0s 189us/step - loss: 15682.4825 - accuracy: 0.1688\n",
      "Epoch 84/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 142.0783 - accuracy: 0.60 - ETA: 0s - loss: 13572.3510 - accuracy: 0.15 - ETA: 0s - loss: 20026.1891 - accuracy: 0.14 - ETA: 0s - loss: 17185.5385 - accuracy: 0.16 - ETA: 0s - loss: 16770.0959 - accuracy: 0.17 - ETA: 0s - loss: 16541.0274 - accuracy: 0.16 - 0s 188us/step - loss: 15668.1579 - accuracy: 0.1700\n",
      "Epoch 85/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 1258.4646 - accuracy: 0.0000e+0 - ETA: 0s - loss: 13760.9583 - accuracy: 0.1860  - ETA: 0s - loss: 15860.4981 - accuracy: 0.16 - ETA: 0s - loss: 17469.0360 - accuracy: 0.16 - ETA: 0s - loss: 16618.0682 - accuracy: 0.17 - ETA: 0s - loss: 16621.9714 - accuracy: 0.16 - 0s 176us/step - loss: 15651.6161 - accuracy: 0.1663\n",
      "Epoch 86/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2580.2830 - accuracy: 0.200 - ETA: 0s - loss: 11220.3316 - accuracy: 0.15 - ETA: 0s - loss: 14982.7435 - accuracy: 0.14 - ETA: 0s - loss: 14740.9408 - accuracy: 0.16 - ETA: 0s - loss: 16249.3885 - accuracy: 0.16 - ETA: 0s - loss: 16448.4301 - accuracy: 0.16 - 0s 178us/step - loss: 15646.0850 - accuracy: 0.1706\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 87/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 9243.2969 - accuracy: 0.0000e+0 - ETA: 0s - loss: 20725.6948 - accuracy: 0.1769  - ETA: 0s - loss: 18082.1243 - accuracy: 0.17 - ETA: 0s - loss: 15811.2329 - accuracy: 0.16 - ETA: 0s - loss: 15972.3393 - accuracy: 0.17 - ETA: 0s - loss: 15522.3391 - accuracy: 0.17 - 0s 175us/step - loss: 15628.5006 - accuracy: 0.1694\n",
      "Epoch 88/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 12200.3105 - accuracy: 0.40 - ETA: 0s - loss: 11273.9631 - accuracy: 0.17 - ETA: 0s - loss: 14332.7952 - accuracy: 0.17 - ETA: 0s - loss: 14373.6886 - accuracy: 0.16 - ETA: 0s - loss: 14516.2386 - accuracy: 0.15 - ETA: 0s - loss: 15597.5988 - accuracy: 0.16 - 0s 174us/step - loss: 15618.9378 - accuracy: 0.1688\n",
      "Epoch 89/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 16373.5156 - accuracy: 0.0000e+ - ETA: 0s - loss: 9388.7170 - accuracy: 0.1811     - ETA: 0s - loss: 14733.0195 - accuracy: 0.17 - ETA: 0s - loss: 13918.7582 - accuracy: 0.16 - ETA: 0s - loss: 14993.6771 - accuracy: 0.17 - ETA: 0s - loss: 16221.7595 - accuracy: 0.16 - 0s 179us/step - loss: 15605.3917 - accuracy: 0.1706\n",
      "Epoch 90/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2557.2466 - accuracy: 0.200 - ETA: 0s - loss: 14946.4644 - accuracy: 0.17 - ETA: 0s - loss: 22120.5487 - accuracy: 0.16 - ETA: 0s - loss: 21958.7298 - accuracy: 0.16 - ETA: 0s - loss: 18464.0380 - accuracy: 0.16 - ETA: 0s - loss: 16208.3120 - accuracy: 0.16 - 0s 174us/step - loss: 15589.5052 - accuracy: 0.1706\n",
      "Epoch 91/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 24084.3633 - accuracy: 0.20 - ETA: 0s - loss: 14808.9520 - accuracy: 0.16 - ETA: 0s - loss: 15644.5634 - accuracy: 0.16 - ETA: 0s - loss: 15900.2648 - accuracy: 0.16 - ETA: 0s - loss: 14372.9537 - accuracy: 0.15 - ETA: 0s - loss: 14746.9164 - accuracy: 0.16 - 0s 177us/step - loss: 15575.3438 - accuracy: 0.1681\n",
      "Epoch 92/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 15071.2285 - accuracy: 0.0000e+ - ETA: 0s - loss: 14223.6197 - accuracy: 0.1418   - ETA: 0s - loss: 16652.8287 - accuracy: 0.16 - ETA: 0s - loss: 14151.0778 - accuracy: 0.17 - ETA: 0s - loss: 15779.5780 - accuracy: 0.17 - ETA: 0s - loss: 15393.7941 - accuracy: 0.17 - ETA: 0s - loss: 15243.3722 - accuracy: 0.16 - 0s 201us/step - loss: 15565.4342 - accuracy: 0.1700\n",
      "Epoch 93/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2610.6570 - accuracy: 0.200 - ETA: 0s - loss: 15989.8265 - accuracy: 0.19 - ETA: 0s - loss: 14268.5067 - accuracy: 0.16 - ETA: 0s - loss: 16614.3796 - accuracy: 0.16 - ETA: 0s - loss: 16905.0218 - accuracy: 0.17 - ETA: 0s - loss: 16938.1561 - accuracy: 0.17 - ETA: 0s - loss: 15870.1082 - accuracy: 0.17 - 0s 201us/step - loss: 15551.0388 - accuracy: 0.1713\n",
      "Epoch 94/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5411.8662 - accuracy: 0.0000e+0 - ETA: 0s - loss: 13505.8517 - accuracy: 0.1774  - ETA: 0s - loss: 15918.0150 - accuracy: 0.18 - ETA: 0s - loss: 17388.8273 - accuracy: 0.17 - ETA: 0s - loss: 17135.9506 - accuracy: 0.17 - ETA: 0s - loss: 16722.2850 - accuracy: 0.16 - 0s 182us/step - loss: 15535.3346 - accuracy: 0.1694\n",
      "Epoch 95/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 148231.3438 - accuracy: 0.200 - ETA: 0s - loss: 9473.4659 - accuracy: 0.2097  - ETA: 0s - loss: 10592.3516 - accuracy: 0.20 - ETA: 0s - loss: 12864.6473 - accuracy: 0.18 - ETA: 0s - loss: 13644.4648 - accuracy: 0.17 - ETA: 0s - loss: 14700.5253 - accuracy: 0.18 - 0s 177us/step - loss: 15526.3258 - accuracy: 0.1731\n",
      "Epoch 96/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 2454.9534 - accuracy: 0.200 - ETA: 0s - loss: 11876.2815 - accuracy: 0.19 - ETA: 0s - loss: 15226.1379 - accuracy: 0.17 - ETA: 0s - loss: 13956.5490 - accuracy: 0.16 - ETA: 0s - loss: 14258.3576 - accuracy: 0.16 - ETA: 0s - loss: 15978.6067 - accuracy: 0.17 - 0s 172us/step - loss: 15514.1147 - accuracy: 0.1700\n",
      "Epoch 97/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 53316.9492 - accuracy: 0.0000e+ - ETA: 0s - loss: 15209.3638 - accuracy: 0.1804   - ETA: 0s - loss: 17476.6055 - accuracy: 0.16 - ETA: 0s - loss: 17676.3532 - accuracy: 0.17 - ETA: 0s - loss: 17205.4532 - accuracy: 0.17 - ETA: 0s - loss: 15852.9732 - accuracy: 0.17 - 0s 183us/step - loss: 15504.4985 - accuracy: 0.1713\n",
      "Epoch 98/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 44011.8047 - accuracy: 0.20 - ETA: 0s - loss: 16755.7050 - accuracy: 0.21 - ETA: 0s - loss: 17707.4229 - accuracy: 0.19 - ETA: 0s - loss: 14487.8504 - accuracy: 0.17 - ETA: 0s - loss: 16221.8345 - accuracy: 0.16 - ETA: 0s - loss: 15261.6729 - accuracy: 0.17 - 0s 180us/step - loss: 15489.1200 - accuracy: 0.1706\n",
      "Epoch 99/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 5725.6807 - accuracy: 0.0000e+0 - ETA: 0s - loss: 14879.1760 - accuracy: 0.2039  - ETA: 0s - loss: 12623.3410 - accuracy: 0.18 - ETA: 0s - loss: 11062.1215 - accuracy: 0.17 - ETA: 0s - loss: 11763.4161 - accuracy: 0.17 - ETA: 0s - loss: 14160.9117 - accuracy: 0.17 - 0s 181us/step - loss: 15479.0364 - accuracy: 0.1737\n",
      "Epoch 100/100\n",
      "1600/1600 [==============================] - ETA: 0s - loss: 9269.3848 - accuracy: 0.200 - ETA: 0s - loss: 17242.9820 - accuracy: 0.18 - ETA: 0s - loss: 14335.3756 - accuracy: 0.17 - ETA: 0s - loss: 14687.9711 - accuracy: 0.17 - ETA: 0s - loss: 14683.4375 - accuracy: 0.16 - ETA: 0s - loss: 16491.5800 - accuracy: 0.17 - ETA: 0s - loss: 16083.4149 - accuracy: 0.17 - 0s 206us/step - loss: 15464.2831 - accuracy: 0.1725\n"
     ]
    }
   ],
   "source": [
    "def create_model():\n",
    "  # Initialize the constructor\n",
    "  model = Sequential()\n",
    "  # Add an input layer\n",
    "  model.add(Dense(23, activation='relu', input_dim=23))\n",
    "\n",
    "  # Add an output layer \n",
    "  model.add(Dense(1, activation='relu'))\n",
    "  #compile model\n",
    "  model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n",
    "  return model\n",
    "model=KerasRegressor(build_fn=create_model,batch_size=1000,epochs=10)\n",
    "\n",
    "epochs=[1,10,50,100]\n",
    "batch_size=[5,10,50,100,1000]\n",
    "\n",
    "param_grid=dict(epochs=epochs,batch_size=batch_size)\n",
    "grid=GridSearchCV(estimator=model,param_grid=param_grid,n_jobs=-1,cv=3)\n",
    "grid_result=grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 5, 'epochs': 100}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 178.28853372569225\n",
      "R Squared:  0.030012997296552713\n"
     ]
    }
   ],
   "source": [
    "predicted_test = grid.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBOOST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "from xgboost.sklearn import XGBClassifier  \n",
    "from xgboost.sklearn import XGBRegressor\n",
    "import scipy.stats as st\n",
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[22:05:40] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:41] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
      "[22:05:42] WARNING: src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv='warn', error_score='raise-deprecating',\n",
       "                   estimator=XGBRegressor(base_score=0.5, booster='gbtree',\n",
       "                                          colsample_bylevel=1,\n",
       "                                          colsample_bynode=1,\n",
       "                                          colsample_bytree=1, gamma=0,\n",
       "                                          importance_type='gain',\n",
       "                                          learning_rate=0.1, max_delta_step=0,\n",
       "                                          max_depth=3, min_child_weight=1,\n",
       "                                          missing=None, n_estimators=100,\n",
       "                                          n_jobs=1, nthread=None, nthreads=-1,\n",
       "                                          objective='reg:...\n",
       "                                        'min_child_weight': <scipy.stats._distn_infrastructure.rv_frozen object at 0x151efb70b8>,\n",
       "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x151efb7320>,\n",
       "                                        'reg_alpha': <scipy.stats._distn_infrastructure.rv_frozen object at 0x151efb70b8>,\n",
       "                                        'subsample': <scipy.stats._distn_infrastructure.rv_frozen object at 0x151efb70f0>},\n",
       "                   pre_dispatch='2*n_jobs', random_state=None, refit=True,\n",
       "                   return_train_score=False, scoring=None, verbose=0)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "one_to_left = st.beta(10, 1)  \n",
    "from_zero_positive = st.expon(0, 50)\n",
    "\n",
    "params = {  \n",
    "    \"n_estimators\": st.randint(3, 40),\n",
    "    \"max_depth\": st.randint(3, 40),\n",
    "    \"learning_rate\": st.uniform(0.05, 0.4),\n",
    "    \"colsample_bytree\": one_to_left,\n",
    "    \"subsample\": one_to_left,\n",
    "    \"gamma\": st.uniform(0, 10),\n",
    "    'reg_alpha': from_zero_positive,\n",
    "    \"min_child_weight\": from_zero_positive,\n",
    "}\n",
    "\n",
    "xgbreg = XGBRegressor(nthreads=-1)\n",
    "gs = RandomizedSearchCV(xgbreg, params, n_jobs=1)  \n",
    "gs.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE: 149.842099563877\n",
      "R Squared:  0.31484822404625645\n"
     ]
    }
   ],
   "source": [
    "predicted_test = gs.predict(X_test)\n",
    "    \n",
    "print('RMSE:', np.sqrt(np.sum(((y_test-predicted_test)**2)/len(y_test))))\n",
    "print(\"R Squared: \",r2_score(y_test, predicted_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We choose XGBOOST as out best model here. \n",
    "However, we can see our models performed much worse in scenario 2\n",
    "The reason could be that in scenario 1, our model can successfully identify those rows that will have a spending equals to 0 and assigns a very number very close to 0. In our second case, all response numbers are not 0 so that our model will have a much larger RMSE and a lower R squred. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 1C Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the models in part A usually have the better performance. I believe that models in the first part can successfully predict customers who will not spend any money and then predict a value very close to 0 to them. Then since the model will have a very small error for those customers who will not spend any money, these models will have smaller RMSE and higher R squred score. \n",
    "However, our purpose is predicting the money spent by those customers who will actually purchase. Hence, we shouod choose models from part B as our prefered model because it will show a better result focusing on these customers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prepare Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv('spambase.data',header=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection or not"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.metrics import accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "X=data.iloc[:,:-1]\n",
    "y=data.iloc[:,-1]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels=np.arange(0,57)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 0.004022923624444457)\n",
      "(1, 0.0052998138046666905)\n",
      "(2, 0.010383776522807557)\n",
      "(3, 0.0008174800236259674)\n",
      "(4, 0.029597885495014162)\n",
      "(5, 0.007872201694943442)\n",
      "(6, 0.08201173530768571)\n",
      "(7, 0.011328159437049401)\n",
      "(8, 0.004328993255793793)\n",
      "(9, 0.008291416984775571)\n",
      "(10, 0.010479880333745646)\n",
      "(11, 0.011263558334001195)\n",
      "(12, 0.003763180394301706)\n",
      "(13, 0.00231991440458461)\n",
      "(14, 0.0014634080165617847)\n",
      "(15, 0.06565789947297779)\n",
      "(16, 0.012741799762385009)\n",
      "(17, 0.008416376591251329)\n",
      "(18, 0.028534730758512847)\n",
      "(19, 0.005015654189965477)\n",
      "(20, 0.06001779698633239)\n",
      "(21, 0.0025064489051581634)\n",
      "(22, 0.023950022360343437)\n",
      "(23, 0.03541051506717788)\n",
      "(24, 0.04534252241930721)\n",
      "(25, 0.017617495471516083)\n",
      "(26, 0.020539078756173224)\n",
      "(27, 0.005190453384489929)\n",
      "(28, 0.0018801260914360397)\n",
      "(29, 0.0044695863354953565)\n",
      "(30, 0.001894144924322722)\n",
      "(31, 0.0008475347306695996)\n",
      "(32, 0.002752452138130321)\n",
      "(33, 0.0008053296297909037)\n",
      "(34, 0.003733454771216285)\n",
      "(35, 0.004114146154301628)\n",
      "(36, 0.012862677797976476)\n",
      "(37, 0.0005390562152591935)\n",
      "(38, 0.0035054676685030333)\n",
      "(39, 0.0010699387914917462)\n",
      "(40, 0.00114350084332477)\n",
      "(41, 0.0052593616675887245)\n",
      "(42, 0.0011252758515243606)\n",
      "(43, 0.0022492355331291567)\n",
      "(44, 0.009748454898895052)\n",
      "(45, 0.019160566123022298)\n",
      "(46, 0.0002286955427763693)\n",
      "(47, 0.001349288244600137)\n",
      "(48, 0.00528535001676265)\n",
      "(49, 0.012774410790572729)\n",
      "(50, 0.0027158205788174114)\n",
      "(51, 0.12003228097262163)\n",
      "(52, 0.09003222712921413)\n",
      "(53, 0.0038469606469320908)\n",
      "(54, 0.06479757968683204)\n",
      "(55, 0.05521963176412164)\n",
      "(56, 0.04237232270107911)\n"
     ]
    }
   ],
   "source": [
    "#Use random forest to find the importance of features\n",
    "clf = RandomForestClassifier(n_estimators=10000, random_state=0, n_jobs=-1)\n",
    "\n",
    "clf.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "for feature in zip(labels,clf.feature_importances_):\n",
    "    print(feature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(clf.feature_importances_[clf.feature_importances_>0.01])\n",
    "#Select features with importance greater than 0.01. 23 out of \n",
    "#56 features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=list(zip(labels,clf.feature_importances_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get(x):\n",
    "    lst=[]\n",
    "    for i in x:\n",
    "        if i[1]>=0.01:\n",
    "            lst.append(i[0])\n",
    "    return lst\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "a=get(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data.iloc[:,a]\n",
    "y=data.iloc[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use nested to compare performance for decesion tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.889 +/- 0.052\n"
     ]
    }
   ],
   "source": [
    "parameters={'max_depth': range(1,20,2)}\n",
    "clf = tree.DecisionTreeClassifier(criterion=\"entropy\", max_depth=19)\n",
    "gs=GridSearchCV(clf, parameters,cv = 10, scoring = 'accuracy',n_jobs=-1)\n",
    "scores=cross_val_score(gs,X,y,scoring='accuracy',cv=5)\n",
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data.iloc[:,0:-2]\n",
    "y=data.iloc[:,-1]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.899 +/- 0.044\n"
     ]
    }
   ],
   "source": [
    "gs=GridSearchCV(clf, parameters,cv = 10, scoring = 'accuracy',n_jobs=-1)\n",
    "scores=cross_val_score(gs,X,y,scoring='accuracy',cv=5)\n",
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the performance drops from 0.897 to 0.893 with 23 features. It is not a big drop but we get rid of 23 features. Hence, we choose to use feature selection."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalize or not using KNN to compare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data.iloc[:,a]\n",
    "y=data.iloc[:,-1]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>47</th>\n",
       "      <th>48</th>\n",
       "      <th>49</th>\n",
       "      <th>50</th>\n",
       "      <th>51</th>\n",
       "      <th>52</th>\n",
       "      <th>53</th>\n",
       "      <th>54</th>\n",
       "      <th>55</th>\n",
       "      <th>56</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.778</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.756</td>\n",
       "      <td>61</td>\n",
       "      <td>278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.21</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.94</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.372</td>\n",
       "      <td>0.180</td>\n",
       "      <td>0.048</td>\n",
       "      <td>5.114</td>\n",
       "      <td>101</td>\n",
       "      <td>1028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.06</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.71</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.23</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.25</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.143</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.276</td>\n",
       "      <td>0.184</td>\n",
       "      <td>0.010</td>\n",
       "      <td>9.821</td>\n",
       "      <td>485</td>\n",
       "      <td>2259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.63</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.137</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.137</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.537</td>\n",
       "      <td>40</td>\n",
       "      <td>191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.63</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.135</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.135</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.537</td>\n",
       "      <td>40</td>\n",
       "      <td>191</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 57 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     0     1     2    3     4     5     6     7     8     9   ...   47    48  \\\n",
       "0  0.00  0.64  0.64  0.0  0.32  0.00  0.00  0.00  0.00  0.00  ...  0.0  0.00   \n",
       "1  0.21  0.28  0.50  0.0  0.14  0.28  0.21  0.07  0.00  0.94  ...  0.0  0.00   \n",
       "2  0.06  0.00  0.71  0.0  1.23  0.19  0.19  0.12  0.64  0.25  ...  0.0  0.01   \n",
       "3  0.00  0.00  0.00  0.0  0.63  0.00  0.31  0.63  0.31  0.63  ...  0.0  0.00   \n",
       "4  0.00  0.00  0.00  0.0  0.63  0.00  0.31  0.63  0.31  0.63  ...  0.0  0.00   \n",
       "\n",
       "      49   50     51     52     53     54   55    56  \n",
       "0  0.000  0.0  0.778  0.000  0.000  3.756   61   278  \n",
       "1  0.132  0.0  0.372  0.180  0.048  5.114  101  1028  \n",
       "2  0.143  0.0  0.276  0.184  0.010  9.821  485  2259  \n",
       "3  0.137  0.0  0.137  0.000  0.000  3.537   40   191  \n",
       "4  0.135  0.0  0.135  0.000  0.000  3.537   40   191  \n",
       "\n",
       "[5 rows x 57 columns]"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_range = list(range(1,31))\n",
    "weight_options = [\"uniform\", \"distance\"]\n",
    "\n",
    "param_grid = dict(n_neighbors = k_range, weights = weight_options)\n",
    "knn = neighbors.KNeighborsClassifier()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.777 +/- 0.042\n"
     ]
    }
   ],
   "source": [
    "grid = GridSearchCV(knn, param_grid, cv = 5, scoring = 'accuracy')\n",
    "scores=cross_val_score(grid,X,y,scoring='accuracy',cv=3)\n",
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Games\\anaconoda\\lib\\site-packages\\sklearn\\preprocessing\\data.py:645: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
      "  return self.partial_fit(X, y)\n",
      "C:\\Games\\anaconoda\\lib\\site-packages\\ipykernel_launcher.py:2: DataConversionWarning: Data with input dtype int64, float64 were all converted to float64 by StandardScaler.\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "scaler.fit(X)\n",
    "X=scaler.transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.884 +/- 0.038\n"
     ]
    }
   ],
   "source": [
    "\n",
    "scores=cross_val_score(grid,X,y,scoring='accuracy',cv=3)\n",
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "WE can see that, after we normalizing the data, the accuracy score increases from 0.777 to 0.884. Hence, we should normalize our dataset for models rely on distance such as KNN."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=data.iloc[:,a]\n",
    "y=data.iloc[:,-1]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "complexity_values = range(1,20)\n",
    "train_accuracies = []\n",
    "test_accuracies=[]\n",
    "# Set up possible values of parameters to optimize over\n",
    "for complexity_value in complexity_values:\n",
    "    clf = tree.DecisionTreeClassifier(criterion=\"entropy\", max_depth=complexity_value)\n",
    "    test_accuracies.append(clf.fit(X_train, y_train).score(X_test, y_test))\n",
    "    train_accuracies.append(clf.fit(X_train, y_train).score(X_train, y_train))\n",
    "    \n",
    "line1, =plt.plot(complexity_values, test_accuracies,label='test_accuracies')\n",
    "line2, =plt.plot(complexity_values, train_accuracies,label='train_accuracies')\n",
    "plt.xlabel(\"max_depth\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend((line1, line2), ('test', 'train'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=10, error_score='raise-deprecating',\n",
       "             estimator=DecisionTreeClassifier(class_weight=None,\n",
       "                                              criterion='entropy', max_depth=19,\n",
       "                                              max_features=None,\n",
       "                                              max_leaf_nodes=None,\n",
       "                                              min_impurity_decrease=0.0,\n",
       "                                              min_impurity_split=None,\n",
       "                                              min_samples_leaf=1,\n",
       "                                              min_samples_split=2,\n",
       "                                              min_weight_fraction_leaf=0.0,\n",
       "                                              presort=False, random_state=None,\n",
       "                                              splitter='best'),\n",
       "             iid='warn', n_jobs=None, param_grid={'max_depth': range(1, 20, 2)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring='accuracy', verbose=0)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = tree.DecisionTreeClassifier(criterion=\"entropy\", max_depth=complexity_value)\n",
    "parameters={'max_depth': range(1,20,2)}\n",
    "grid = GridSearchCV(clf, parameters,cv = 10, scoring = 'accuracy')\n",
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=13,\n",
      "                       max_features=None, max_leaf_nodes=None,\n",
      "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                       min_samples_leaf=1, min_samples_split=2,\n",
      "                       min_weight_fraction_leaf=0.0, presort=False,\n",
      "                       random_state=None, splitter='best')\n"
     ]
    }
   ],
   "source": [
    "print(grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=19,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = tree.DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=19,\n",
    "            max_features=None, max_leaf_nodes=None,\n",
    "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
    "            min_samples_leaf=1, min_samples_split=2,\n",
    "            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
    "            splitter='best')\n",
    "clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, classification_report "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[513  25]\n",
      " [ 44 339]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.95      0.94       538\n",
      "           1       0.93      0.89      0.91       383\n",
      "\n",
      "    accuracy                           0.93       921\n",
      "   macro avg       0.93      0.92      0.92       921\n",
      "weighted avg       0.93      0.93      0.92       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf.predict(X_test)\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "treematrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "gs=GridSearchCV(clf, parameters,cv = 10, scoring = 'accuracy',n_jobs=-1)\n",
    "scores=cross_val_score(gs,X,y,scoring='accuracy',cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.891 +/- 0.053\n"
     ]
    }
   ],
   "source": [
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import scikitplot as skplt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "probs = clf.predict_proba(X_test) \n",
    "skplt.metrics.plot_roc(y_test, probs) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = RandomForestClassifier(n_estimators=10000, random_state=0, n_jobs=-1,max_depth=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=3, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=10000,\n",
       "                       n_jobs=-1, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[526  12]\n",
      " [ 75 308]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.98      0.92       538\n",
      "           1       0.96      0.80      0.88       383\n",
      "\n",
      "    accuracy                           0.91       921\n",
      "   macro avg       0.92      0.89      0.90       921\n",
      "weighted avg       0.91      0.91      0.90       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf.predict(X_test)\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [],
   "source": [
    "gs=GridSearchCV(clf, parameters,cv = 3, scoring = 'accuracy',n_jobs=-1)\n",
    "scores=cross_val_score(gs,X,y,scoring='accuracy',cv=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV accuracy: 0.925 +/- 0.027\n"
     ]
    }
   ],
   "source": [
    "print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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rU62bt2Kh4cHCQkJjBs3jjVr1uDv74+npyczZsxIl8+RI0eMrqFDhw74+fkRFBREzZo1+e67/z6oUmRrZs6cyfz583FxccHPz48dO3YwZcoU7t+/n+H9TUubNm1wdnZO90uJq5ma69eva1pwVlZWWFtbc+fOHaM0tra2BAcHc+fOHR48eMC+ffu4evUqYIiRGBwcTLNmzWjbti0nT57UzrOzs0un75bVqG7DbODRo0ds3ryZGTNmcOXKFU6ePKl90ebHgJkFhUqVKlGnTh0AatWqhaurK0II6tSpw+XLl9OlNyUZEhkZScWKFWnUqBFgcCROTk6UKVMGgG7duhEcHEz79u2N8kpISGDs2LH8/vvvWFhYcPHiRQBatGjBhAkTiIuLY//+/ej1eooWLcrBgwc5c+aMJmgZHR1NeHg4hQoVomHDhkZKzqYkQ65evYqTkxOlSpUCDF/uKWWaI7ECBqkevV5PWFgYI0eO1JyLqej5Kfsyk5dJzb1797h+/TodOnQAMDs8U+rFyx4eHmzdupVRo0bx448/8u2332YqjZKaf/75xygYbmayKallaw4ePMjPP//MkiVLAMO41NWrVylfvrzJ+5uWn382P5a5qVCAaeu2Zs2ajBgxgrfffpsXX3yRunXraq3JpKQkIiMj2b9/PydPnuS9997j9OnTCCFyRHZFOa8sJiAggClTphAaGgpA7dq1C4RESUEgdWBgCwsLbVsI8UQy8qllTDKKNbpjxw7mzJkDGLrZ9uzZQ7ly5Th8+LDRC7VIkSI4OTlx4MABtm7dSpcuXbR8586dm057KjAw0Kj8jCRDMouBao7ECvw35hUWFkbr1q1p37499evXx9bWllOnTlG3bl0t7enTp6lZsybW1ta8+OKLREREGDnYtGRkn5WVlZGaeGYSMp07d8bLy4sOHToghKBatWqcOXMmQ2mU1BQpUsQo78xkU9Le7zVr1qSLRzpr1iyT9zctbdq04d69e+n2f/LJJzRt2tRon42NDX///TevvfYaiYmJREdHax8jqenTpw99+vQBYPr06ZpQpo2NjVY3b731FhYWFty+fZsyZcrkiOyK6jbMIv766y969OhBx44dCQ0N5dVXX+WLL74gMDDQpHid4tmICnvX6JcRCT1raGn++b0bD2fqss3Gx0mGANjb2xMUFMTt27dJSkpiy5YtODk50aFD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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "probs = clf.predict_proba(X_test) \n",
    "skplt.metrics.plot_roc(y_test, probs) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "              colsample_bynode=1, colsample_bytree=1, gamma=0,\n",
       "              learning_rate=0.1, max_delta_step=0, max_depth=3,\n",
       "              min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n",
       "              nthread=None, objective='binary:logistic', random_state=0,\n",
       "              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
       "              silent=None, subsample=1, verbosity=1)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "clf=XGBClassifier()\n",
    "clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[522  16]\n",
      " [ 44 339]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.97      0.95       538\n",
      "           1       0.95      0.89      0.92       383\n",
      "\n",
      "    accuracy                           0.93       921\n",
      "   macro avg       0.94      0.93      0.93       921\n",
      "weighted avg       0.94      0.93      0.93       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf.predict(X_test)\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "probs = clf.predict_proba(X_test) \n",
    "skplt.metrics.plot_roc(y_test, probs) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "def create_model():\n",
    "\t# create model\n",
    "\tmodel = Sequential()\n",
    "\tmodel.add(Dense(23, input_dim=23, activation='relu'))\n",
    "\tmodel.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "\tmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\treturn model\n",
    "model = KerasClassifier(build_fn=create_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune batch size and epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "3680/3680 [==============================] - ETA: 29s - loss: 10.0478 - accuracy: 0.75 - ETA: 0s - loss: 7.5182 - accuracy: 0.4878 - ETA: 0s - loss: 5.6463 - accuracy: 0.51 - ETA: 0s - loss: 4.4017 - accuracy: 0.54 - ETA: 0s - loss: 3.4854 - accuracy: 0.58 - ETA: 0s - loss: 2.8372 - accuracy: 0.62 - 0s 116us/step - loss: 2.7376 - accuracy: 0.6380\n",
      "Epoch 2/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.8022 - accuracy: 0.75 - ETA: 0s - loss: 0.8275 - accuracy: 0.78 - ETA: 0s - loss: 0.6346 - accuracy: 0.80 - ETA: 0s - loss: 0.6223 - accuracy: 0.80 - ETA: 0s - loss: 0.5786 - accuracy: 0.81 - 0s 64us/step - loss: 0.5595 - accuracy: 0.8234\n",
      "Epoch 3/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.7956 - accuracy: 0.75 - ETA: 0s - loss: 0.5447 - accuracy: 0.83 - ETA: 0s - loss: 0.4946 - accuracy: 0.83 - ETA: 0s - loss: 0.4447 - accuracy: 0.85 - ETA: 0s - loss: 0.4196 - accuracy: 0.86 - 0s 64us/step - loss: 0.4802 - accuracy: 0.8579\n",
      "Epoch 4/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3492 - accuracy: 0.90 - ETA: 0s - loss: 0.5290 - accuracy: 0.84 - ETA: 0s - loss: 0.4444 - accuracy: 0.85 - ETA: 0s - loss: 0.3990 - accuracy: 0.86 - ETA: 0s - loss: 0.3932 - accuracy: 0.87 - 0s 61us/step - loss: 0.3857 - accuracy: 0.8750\n",
      "Epoch 5/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4349 - accuracy: 0.85 - ETA: 0s - loss: 0.2845 - accuracy: 0.90 - ETA: 0s - loss: 0.3437 - accuracy: 0.88 - ETA: 0s - loss: 0.3290 - accuracy: 0.89 - ETA: 0s - loss: 0.4080 - accuracy: 0.87 - 0s 60us/step - loss: 0.4146 - accuracy: 0.8780\n",
      "Epoch 6/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2958 - accuracy: 0.90 - ETA: 0s - loss: 0.4072 - accuracy: 0.86 - ETA: 0s - loss: 0.3585 - accuracy: 0.88 - ETA: 0s - loss: 0.3396 - accuracy: 0.88 - ETA: 0s - loss: 0.3398 - accuracy: 0.89 - 0s 57us/step - loss: 0.3376 - accuracy: 0.8913\n",
      "Epoch 7/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1483 - accuracy: 1.00 - ETA: 0s - loss: 0.3373 - accuracy: 0.88 - ETA: 0s - loss: 0.4290 - accuracy: 0.87 - ETA: 0s - loss: 0.4147 - accuracy: 0.88 - 0s 54us/step - loss: 0.4066 - accuracy: 0.8813\n",
      "Epoch 8/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.7897 - accuracy: 0.85 - ETA: 0s - loss: 0.2611 - accuracy: 0.90 - ETA: 0s - loss: 0.2679 - accuracy: 0.91 - ETA: 0s - loss: 0.3049 - accuracy: 0.90 - ETA: 0s - loss: 0.5084 - accuracy: 0.87 - 0s 57us/step - loss: 0.5100 - accuracy: 0.8774\n",
      "Epoch 9/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1316 - accuracy: 0.95 - ETA: 0s - loss: 0.2444 - accuracy: 0.92 - ETA: 0s - loss: 0.2794 - accuracy: 0.90 - ETA: 0s - loss: 0.2893 - accuracy: 0.90 - ETA: 0s - loss: 0.2930 - accuracy: 0.90 - 0s 58us/step - loss: 0.2936 - accuracy: 0.9035\n",
      "Epoch 10/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2271 - accuracy: 0.90 - ETA: 0s - loss: 0.2658 - accuracy: 0.90 - ETA: 0s - loss: 0.2593 - accuracy: 0.90 - ETA: 0s - loss: 0.2720 - accuracy: 0.90 - ETA: 0s - loss: 0.2733 - accuracy: 0.90 - 0s 57us/step - loss: 0.2737 - accuracy: 0.9057\n",
      "Epoch 11/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3475 - accuracy: 0.90 - ETA: 0s - loss: 0.3316 - accuracy: 0.88 - ETA: 0s - loss: 0.3418 - accuracy: 0.88 - ETA: 0s - loss: 0.3801 - accuracy: 0.88 - ETA: 0s - loss: 0.3572 - accuracy: 0.89 - 0s 59us/step - loss: 0.3551 - accuracy: 0.8929\n",
      "Epoch 12/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1309 - accuracy: 0.95 - ETA: 0s - loss: 0.2921 - accuracy: 0.90 - ETA: 0s - loss: 0.2774 - accuracy: 0.89 - ETA: 0s - loss: 0.2609 - accuracy: 0.90 - ETA: 0s - loss: 0.2708 - accuracy: 0.90 - 0s 59us/step - loss: 0.2719 - accuracy: 0.9049\n",
      "Epoch 13/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3047 - accuracy: 0.90 - ETA: 0s - loss: 0.2941 - accuracy: 0.92 - ETA: 0s - loss: 0.3952 - accuracy: 0.90 - ETA: 0s - loss: 0.3731 - accuracy: 0.90 - ETA: 0s - loss: 0.3514 - accuracy: 0.90 - 0s 57us/step - loss: 0.3511 - accuracy: 0.9030\n",
      "Epoch 14/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2619 - accuracy: 0.90 - ETA: 0s - loss: 0.2452 - accuracy: 0.91 - ETA: 0s - loss: 0.2977 - accuracy: 0.90 - ETA: 0s - loss: 0.2866 - accuracy: 0.90 - ETA: 0s - loss: 0.2939 - accuracy: 0.90 - 0s 57us/step - loss: 0.2964 - accuracy: 0.9092\n",
      "Epoch 15/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3930 - accuracy: 0.90 - ETA: 0s - loss: 0.4941 - accuracy: 0.87 - ETA: 0s - loss: 0.3831 - accuracy: 0.89 - ETA: 0s - loss: 0.3529 - accuracy: 0.89 - 0s 52us/step - loss: 0.3330 - accuracy: 0.9000\n",
      "Epoch 16/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3449 - accuracy: 0.80 - ETA: 0s - loss: 0.2341 - accuracy: 0.92 - ETA: 0s - loss: 0.2932 - accuracy: 0.90 - ETA: 0s - loss: 0.2988 - accuracy: 0.90 - 0s 51us/step - loss: 0.2919 - accuracy: 0.9060\n",
      "Epoch 17/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1883 - accuracy: 0.95 - ETA: 0s - loss: 0.2352 - accuracy: 0.92 - ETA: 0s - loss: 0.2365 - accuracy: 0.92 - ETA: 0s - loss: 0.2382 - accuracy: 0.91 - 0s 54us/step - loss: 0.2323 - accuracy: 0.9193\n",
      "Epoch 18/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0422 - accuracy: 1.00 - ETA: 0s - loss: 0.2959 - accuracy: 0.91 - ETA: 0s - loss: 0.2691 - accuracy: 0.91 - ETA: 0s - loss: 0.2562 - accuracy: 0.91 - 0s 54us/step - loss: 0.2549 - accuracy: 0.9166\n",
      "Epoch 19/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.5329 - accuracy: 0.75 - ETA: 0s - loss: 0.4493 - accuracy: 0.89 - ETA: 0s - loss: 0.4194 - accuracy: 0.90 - ETA: 0s - loss: 0.3805 - accuracy: 0.89 - 0s 52us/step - loss: 0.3711 - accuracy: 0.8989\n",
      "Epoch 20/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3559 - accuracy: 0.80 - ETA: 0s - loss: 0.2444 - accuracy: 0.90 - ETA: 0s - loss: 0.2657 - accuracy: 0.90 - ETA: 0s - loss: 0.2478 - accuracy: 0.90 - 0s 53us/step - loss: 0.2522 - accuracy: 0.9073\n",
      "Epoch 21/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4381 - accuracy: 0.95 - ETA: 0s - loss: 0.2663 - accuracy: 0.90 - ETA: 0s - loss: 0.2627 - accuracy: 0.91 - ETA: 0s - loss: 0.2581 - accuracy: 0.91 - 0s 51us/step - loss: 0.2575 - accuracy: 0.9130\n",
      "Epoch 22/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2731 - accuracy: 0.90 - ETA: 0s - loss: 0.2102 - accuracy: 0.93 - ETA: 0s - loss: 0.2411 - accuracy: 0.92 - ETA: 0s - loss: 0.2654 - accuracy: 0.91 - 0s 51us/step - loss: 0.2894 - accuracy: 0.9106\n",
      "Epoch 23/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1973 - accuracy: 0.95 - ETA: 0s - loss: 0.5039 - accuracy: 0.89 - ETA: 0s - loss: 0.4382 - accuracy: 0.89 - ETA: 0s - loss: 0.4853 - accuracy: 0.89 - 0s 52us/step - loss: 0.4714 - accuracy: 0.8938\n",
      "Epoch 24/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3292 - accuracy: 0.95 - ETA: 0s - loss: 0.2315 - accuracy: 0.91 - ETA: 0s - loss: 0.2402 - accuracy: 0.91 - ETA: 0s - loss: 0.2717 - accuracy: 0.91 - 0s 51us/step - loss: 0.2891 - accuracy: 0.9122\n",
      "Epoch 25/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1022 - accuracy: 0.90 - ETA: 0s - loss: 0.3137 - accuracy: 0.90 - ETA: 0s - loss: 0.2885 - accuracy: 0.91 - ETA: 0s - loss: 0.2787 - accuracy: 0.91 - 0s 51us/step - loss: 0.2877 - accuracy: 0.9073\n",
      "Epoch 26/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1235 - accuracy: 1.00 - ETA: 0s - loss: 0.2332 - accuracy: 0.92 - ETA: 0s - loss: 0.2357 - accuracy: 0.92 - ETA: 0s - loss: 0.2434 - accuracy: 0.92 - 0s 49us/step - loss: 0.2480 - accuracy: 0.9198\n",
      "Epoch 27/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1296 - accuracy: 0.95 - ETA: 0s - loss: 0.2796 - accuracy: 0.90 - ETA: 0s - loss: 0.3445 - accuracy: 0.90 - ETA: 0s - loss: 0.4325 - accuracy: 0.89 - 0s 49us/step - loss: 0.5649 - accuracy: 0.8861\n",
      "Epoch 28/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 1.1129 - accuracy: 0.75 - ETA: 0s - loss: 0.3936 - accuracy: 0.89 - ETA: 0s - loss: 0.5333 - accuracy: 0.88 - ETA: 0s - loss: 0.4670 - accuracy: 0.89 - 0s 48us/step - loss: 0.4608 - accuracy: 0.8943\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1730 - accuracy: 0.85 - ETA: 0s - loss: 0.2700 - accuracy: 0.92 - ETA: 0s - loss: 0.2699 - accuracy: 0.91 - ETA: 0s - loss: 0.2561 - accuracy: 0.92 - 0s 47us/step - loss: 0.2513 - accuracy: 0.9201\n",
      "Epoch 30/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.5714 - accuracy: 0.80 - ETA: 0s - loss: 0.2066 - accuracy: 0.92 - ETA: 0s - loss: 0.2562 - accuracy: 0.91 - ETA: 0s - loss: 0.3174 - accuracy: 0.90 - 0s 45us/step - loss: 0.3110 - accuracy: 0.9071\n",
      "Epoch 31/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1168 - accuracy: 0.95 - ETA: 0s - loss: 0.2398 - accuracy: 0.92 - ETA: 0s - loss: 0.2367 - accuracy: 0.91 - ETA: 0s - loss: 0.2527 - accuracy: 0.91 - 0s 46us/step - loss: 0.2658 - accuracy: 0.9182\n",
      "Epoch 32/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.6104 - accuracy: 0.85 - ETA: 0s - loss: 0.3128 - accuracy: 0.92 - ETA: 0s - loss: 0.2896 - accuracy: 0.92 - ETA: 0s - loss: 0.2698 - accuracy: 0.91 - 0s 45us/step - loss: 0.2679 - accuracy: 0.9190\n",
      "Epoch 33/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0348 - accuracy: 1.00 - ETA: 0s - loss: 0.7479 - accuracy: 0.88 - ETA: 0s - loss: 0.6342 - accuracy: 0.88 - ETA: 0s - loss: 0.5199 - accuracy: 0.89 - 0s 46us/step - loss: 0.4906 - accuracy: 0.8957\n",
      "Epoch 34/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4773 - accuracy: 0.95 - ETA: 0s - loss: 0.2752 - accuracy: 0.91 - ETA: 0s - loss: 0.3118 - accuracy: 0.90 - ETA: 0s - loss: 0.3174 - accuracy: 0.90 - 0s 46us/step - loss: 0.3042 - accuracy: 0.9122\n",
      "Epoch 35/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.5120 - accuracy: 0.85 - ETA: 0s - loss: 0.2471 - accuracy: 0.92 - ETA: 0s - loss: 0.2747 - accuracy: 0.91 - ETA: 0s - loss: 0.2685 - accuracy: 0.92 - 0s 48us/step - loss: 0.2881 - accuracy: 0.9196\n",
      "Epoch 36/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1112 - accuracy: 0.95 - ETA: 0s - loss: 0.2333 - accuracy: 0.92 - ETA: 0s - loss: 0.2784 - accuracy: 0.91 - ETA: 0s - loss: 0.3829 - accuracy: 0.90 - 0s 45us/step - loss: 0.3922 - accuracy: 0.9014\n",
      "Epoch 37/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2842 - accuracy: 0.90 - ETA: 0s - loss: 0.2134 - accuracy: 0.92 - ETA: 0s - loss: 0.2671 - accuracy: 0.91 - ETA: 0s - loss: 0.2647 - accuracy: 0.92 - 0s 46us/step - loss: 0.2631 - accuracy: 0.9204\n",
      "Epoch 38/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0653 - accuracy: 0.95 - ETA: 0s - loss: 0.2087 - accuracy: 0.93 - ETA: 0s - loss: 0.2173 - accuracy: 0.93 - ETA: 0s - loss: 0.2233 - accuracy: 0.93 - 0s 44us/step - loss: 0.2212 - accuracy: 0.9304\n",
      "Epoch 39/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4107 - accuracy: 0.80 - ETA: 0s - loss: 0.2042 - accuracy: 0.92 - ETA: 0s - loss: 0.2331 - accuracy: 0.93 - ETA: 0s - loss: 0.2460 - accuracy: 0.92 - 0s 45us/step - loss: 0.2418 - accuracy: 0.9277\n",
      "Epoch 40/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1780 - accuracy: 0.90 - ETA: 0s - loss: 0.2264 - accuracy: 0.93 - ETA: 0s - loss: 0.2763 - accuracy: 0.92 - ETA: 0s - loss: 0.2673 - accuracy: 0.92 - 0s 44us/step - loss: 0.2681 - accuracy: 0.9215\n",
      "Epoch 41/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2709 - accuracy: 0.95 - ETA: 0s - loss: 0.2218 - accuracy: 0.93 - ETA: 0s - loss: 0.2193 - accuracy: 0.93 - ETA: 0s - loss: 0.2546 - accuracy: 0.92 - 0s 46us/step - loss: 0.2676 - accuracy: 0.9204\n",
      "Epoch 42/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2047 - accuracy: 0.95 - ETA: 0s - loss: 0.3300 - accuracy: 0.90 - ETA: 0s - loss: 0.2579 - accuracy: 0.91 - ETA: 0s - loss: 0.3393 - accuracy: 0.90 - 0s 46us/step - loss: 0.3384 - accuracy: 0.9076\n",
      "Epoch 43/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0518 - accuracy: 1.00 - ETA: 0s - loss: 0.3125 - accuracy: 0.93 - ETA: 0s - loss: 0.3373 - accuracy: 0.92 - ETA: 0s - loss: 0.3824 - accuracy: 0.90 - 0s 44us/step - loss: 0.3859 - accuracy: 0.9090\n",
      "Epoch 44/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2196 - accuracy: 0.95 - ETA: 0s - loss: 0.3026 - accuracy: 0.90 - ETA: 0s - loss: 0.3202 - accuracy: 0.91 - ETA: 0s - loss: 0.3127 - accuracy: 0.91 - 0s 44us/step - loss: 0.3100 - accuracy: 0.9155\n",
      "Epoch 45/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4539 - accuracy: 0.80 - ETA: 0s - loss: 0.3018 - accuracy: 0.91 - ETA: 0s - loss: 0.3051 - accuracy: 0.91 - ETA: 0s - loss: 0.2753 - accuracy: 0.91 - 0s 44us/step - loss: 0.2744 - accuracy: 0.9182\n",
      "Epoch 46/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3070 - accuracy: 0.80 - ETA: 0s - loss: 0.3078 - accuracy: 0.92 - ETA: 0s - loss: 0.2585 - accuracy: 0.92 - ETA: 0s - loss: 0.2441 - accuracy: 0.92 - 0s 44us/step - loss: 0.2396 - accuracy: 0.9283\n",
      "Epoch 47/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3528 - accuracy: 0.85 - ETA: 0s - loss: 0.2050 - accuracy: 0.93 - ETA: 0s - loss: 0.2081 - accuracy: 0.92 - ETA: 0s - loss: 0.3377 - accuracy: 0.91 - 0s 46us/step - loss: 0.3481 - accuracy: 0.9158\n",
      "Epoch 48/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3420 - accuracy: 0.85 - ETA: 0s - loss: 0.4388 - accuracy: 0.89 - ETA: 0s - loss: 0.3489 - accuracy: 0.90 - ETA: 0s - loss: 0.4406 - accuracy: 0.89 - 0s 45us/step - loss: 0.4275 - accuracy: 0.9005\n",
      "Epoch 49/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.7933 - accuracy: 0.85 - ETA: 0s - loss: 0.2493 - accuracy: 0.91 - ETA: 0s - loss: 0.3501 - accuracy: 0.90 - ETA: 0s - loss: 0.3396 - accuracy: 0.90 - 0s 45us/step - loss: 0.3418 - accuracy: 0.9106\n",
      "Epoch 50/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1547 - accuracy: 0.95 - ETA: 0s - loss: 0.1920 - accuracy: 0.92 - ETA: 0s - loss: 0.2104 - accuracy: 0.92 - ETA: 0s - loss: 0.2229 - accuracy: 0.92 - 0s 45us/step - loss: 0.2217 - accuracy: 0.9274\n",
      "Epoch 51/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2267 - accuracy: 0.85 - ETA: 0s - loss: 0.2228 - accuracy: 0.92 - ETA: 0s - loss: 0.2118 - accuracy: 0.93 - ETA: 0s - loss: 0.2217 - accuracy: 0.92 - 0s 44us/step - loss: 0.2236 - accuracy: 0.9288\n",
      "Epoch 52/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1157 - accuracy: 0.95 - ETA: 0s - loss: 0.2341 - accuracy: 0.91 - ETA: 0s - loss: 0.2774 - accuracy: 0.91 - ETA: 0s - loss: 0.3087 - accuracy: 0.91 - 0s 44us/step - loss: 0.3066 - accuracy: 0.9179\n",
      "Epoch 53/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0842 - accuracy: 1.00 - ETA: 0s - loss: 0.2383 - accuracy: 0.92 - ETA: 0s - loss: 0.2833 - accuracy: 0.92 - ETA: 0s - loss: 0.3184 - accuracy: 0.91 - 0s 45us/step - loss: 0.3032 - accuracy: 0.9209\n",
      "Epoch 54/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2358 - accuracy: 0.90 - ETA: 0s - loss: 0.1836 - accuracy: 0.93 - ETA: 0s - loss: 0.2222 - accuracy: 0.93 - ETA: 0s - loss: 0.2153 - accuracy: 0.93 - 0s 43us/step - loss: 0.2171 - accuracy: 0.9340\n",
      "Epoch 55/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0980 - accuracy: 0.95 - ETA: 0s - loss: 0.2383 - accuracy: 0.92 - ETA: 0s - loss: 0.2325 - accuracy: 0.92 - 0s 42us/step - loss: 0.2327 - accuracy: 0.9266\n",
      "Epoch 56/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2918 - accuracy: 0.85 - ETA: 0s - loss: 0.1865 - accuracy: 0.93 - ETA: 0s - loss: 0.2125 - accuracy: 0.92 - 0s 42us/step - loss: 0.2650 - accuracy: 0.9253\n",
      "Epoch 57/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0674 - accuracy: 1.00 - ETA: 0s - loss: 0.2625 - accuracy: 0.91 - ETA: 0s - loss: 0.2727 - accuracy: 0.92 - ETA: 0s - loss: 0.3600 - accuracy: 0.91 - 0s 43us/step - loss: 0.3603 - accuracy: 0.9158\n",
      "Epoch 58/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3550 - accuracy: 0.85 - ETA: 0s - loss: 0.4740 - accuracy: 0.90 - ETA: 0s - loss: 0.4021 - accuracy: 0.90 - 0s 41us/step - loss: 0.3893 - accuracy: 0.9098\n",
      "Epoch 59/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0838 - accuracy: 1.00 - ETA: 0s - loss: 0.4751 - accuracy: 0.89 - ETA: 0s - loss: 0.3779 - accuracy: 0.90 - ETA: 0s - loss: 0.3478 - accuracy: 0.91 - 0s 45us/step - loss: 0.3429 - accuracy: 0.9147\n",
      "Epoch 60/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2009 - accuracy: 0.95 - ETA: 0s - loss: 0.2772 - accuracy: 0.91 - ETA: 0s - loss: 0.2411 - accuracy: 0.92 - ETA: 0s - loss: 0.2285 - accuracy: 0.92 - 0s 43us/step - loss: 0.2290 - accuracy: 0.9277\n",
      "Epoch 61/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1371 - accuracy: 0.95 - ETA: 0s - loss: 0.2096 - accuracy: 0.93 - ETA: 0s - loss: 0.2096 - accuracy: 0.93 - ETA: 0s - loss: 0.2195 - accuracy: 0.93 - 0s 43us/step - loss: 0.2188 - accuracy: 0.9299\n",
      "Epoch 62/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0995 - accuracy: 0.95 - ETA: 0s - loss: 0.2521 - accuracy: 0.91 - ETA: 0s - loss: 0.2604 - accuracy: 0.92 - ETA: 0s - loss: 0.2623 - accuracy: 0.92 - 0s 43us/step - loss: 0.2601 - accuracy: 0.9261\n",
      "Epoch 63/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1251 - accuracy: 0.95 - ETA: 0s - loss: 0.2020 - accuracy: 0.93 - ETA: 0s - loss: 0.2246 - accuracy: 0.92 - ETA: 0s - loss: 0.2154 - accuracy: 0.92 - 0s 43us/step - loss: 0.2139 - accuracy: 0.9285\n",
      "Epoch 64/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.5961 - accuracy: 0.80 - ETA: 0s - loss: 0.2918 - accuracy: 0.90 - ETA: 0s - loss: 0.3620 - accuracy: 0.90 - 0s 42us/step - loss: 0.3056 - accuracy: 0.9185\n",
      "Epoch 65/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0430 - accuracy: 1.00 - ETA: 0s - loss: 0.1906 - accuracy: 0.93 - ETA: 0s - loss: 0.1976 - accuracy: 0.93 - 0s 41us/step - loss: 0.2101 - accuracy: 0.9353\n",
      "Epoch 66/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0911 - accuracy: 1.00 - ETA: 0s - loss: 0.2203 - accuracy: 0.92 - ETA: 0s - loss: 0.2535 - accuracy: 0.93 - 0s 41us/step - loss: 0.2364 - accuracy: 0.9312\n",
      "Epoch 67/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1391 - accuracy: 0.95 - ETA: 0s - loss: 0.2159 - accuracy: 0.92 - ETA: 0s - loss: 0.2244 - accuracy: 0.92 - ETA: 0s - loss: 0.2275 - accuracy: 0.92 - 0s 45us/step - loss: 0.2376 - accuracy: 0.9228\n",
      "Epoch 68/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 1.3272 - accuracy: 0.80 - ETA: 0s - loss: 0.7436 - accuracy: 0.88 - ETA: 0s - loss: 0.5523 - accuracy: 0.89 - ETA: 0s - loss: 0.4451 - accuracy: 0.90 - 0s 43us/step - loss: 0.4395 - accuracy: 0.9060\n",
      "Epoch 69/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0660 - accuracy: 1.00 - ETA: 0s - loss: 0.2377 - accuracy: 0.92 - ETA: 0s - loss: 0.2243 - accuracy: 0.92 - ETA: 0s - loss: 0.2273 - accuracy: 0.92 - 0s 44us/step - loss: 0.2281 - accuracy: 0.9291\n",
      "Epoch 70/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2517 - accuracy: 0.90 - ETA: 0s - loss: 0.1948 - accuracy: 0.93 - ETA: 0s - loss: 0.2408 - accuracy: 0.92 - ETA: 0s - loss: 0.2389 - accuracy: 0.92 - 0s 43us/step - loss: 0.2362 - accuracy: 0.9261\n",
      "Epoch 71/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1286 - accuracy: 0.95 - ETA: 0s - loss: 0.2315 - accuracy: 0.94 - ETA: 0s - loss: 0.2464 - accuracy: 0.93 - ETA: 0s - loss: 0.2374 - accuracy: 0.93 - 0s 43us/step - loss: 0.2356 - accuracy: 0.9329\n",
      "Epoch 72/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1212 - accuracy: 0.95 - ETA: 0s - loss: 0.1762 - accuracy: 0.93 - ETA: 0s - loss: 0.1809 - accuracy: 0.94 - 0s 41us/step - loss: 0.1975 - accuracy: 0.9375\n",
      "Epoch 73/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4035 - accuracy: 0.80 - ETA: 0s - loss: 0.1890 - accuracy: 0.93 - ETA: 0s - loss: 0.2010 - accuracy: 0.93 - 0s 41us/step - loss: 0.2123 - accuracy: 0.9351\n",
      "Epoch 74/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0863 - accuracy: 0.95 - ETA: 0s - loss: 0.2247 - accuracy: 0.93 - ETA: 0s - loss: 0.2133 - accuracy: 0.93 - 0s 41us/step - loss: 0.2019 - accuracy: 0.9353\n",
      "Epoch 75/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.5468 - accuracy: 0.80 - ETA: 0s - loss: 0.2052 - accuracy: 0.93 - ETA: 0s - loss: 0.2167 - accuracy: 0.93 - ETA: 0s - loss: 0.2922 - accuracy: 0.92 - 0s 42us/step - loss: 0.2913 - accuracy: 0.9212\n",
      "Epoch 76/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1883 - accuracy: 0.90 - ETA: 0s - loss: 0.2057 - accuracy: 0.93 - ETA: 0s - loss: 0.1969 - accuracy: 0.93 - ETA: 0s - loss: 0.2275 - accuracy: 0.93 - 0s 45us/step - loss: 0.2261 - accuracy: 0.9293\n",
      "Epoch 77/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4096 - accuracy: 0.85 - ETA: 0s - loss: 0.2354 - accuracy: 0.92 - ETA: 0s - loss: 0.2643 - accuracy: 0.92 - ETA: 0s - loss: 0.3276 - accuracy: 0.91 - 0s 44us/step - loss: 0.3711 - accuracy: 0.9155\n",
      "Epoch 78/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4003 - accuracy: 0.90 - ETA: 0s - loss: 0.2750 - accuracy: 0.92 - ETA: 0s - loss: 0.2636 - accuracy: 0.93 - ETA: 0s - loss: 0.2989 - accuracy: 0.92 - 0s 43us/step - loss: 0.2972 - accuracy: 0.9236\n",
      "Epoch 79/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1911 - accuracy: 0.95 - ETA: 0s - loss: 0.2591 - accuracy: 0.93 - ETA: 0s - loss: 0.2230 - accuracy: 0.93 - 0s 41us/step - loss: 0.2586 - accuracy: 0.9321\n",
      "Epoch 80/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2209 - accuracy: 0.85 - ETA: 0s - loss: 0.2373 - accuracy: 0.91 - ETA: 0s - loss: 0.2140 - accuracy: 0.92 - 0s 41us/step - loss: 0.2015 - accuracy: 0.9337\n",
      "Epoch 81/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4258 - accuracy: 0.85 - ETA: 0s - loss: 0.2163 - accuracy: 0.92 - ETA: 0s - loss: 0.1966 - accuracy: 0.93 - ETA: 0s - loss: 0.2334 - accuracy: 0.92 - 0s 42us/step - loss: 0.2419 - accuracy: 0.9277\n",
      "Epoch 82/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 2.0758 - accuracy: 0.90 - ETA: 0s - loss: 0.4518 - accuracy: 0.91 - ETA: 0s - loss: 0.3288 - accuracy: 0.92 - ETA: 0s - loss: 0.3043 - accuracy: 0.92 - 0s 42us/step - loss: 0.3032 - accuracy: 0.9255\n",
      "Epoch 83/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.6339 - accuracy: 0.90 - ETA: 0s - loss: 0.1904 - accuracy: 0.93 - ETA: 0s - loss: 0.2065 - accuracy: 0.93 - 0s 41us/step - loss: 0.2323 - accuracy: 0.9329\n",
      "Epoch 84/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2277 - accuracy: 0.95 - ETA: 0s - loss: 0.1945 - accuracy: 0.93 - ETA: 0s - loss: 0.2104 - accuracy: 0.93 - ETA: 0s - loss: 0.2161 - accuracy: 0.93 - 0s 43us/step - loss: 0.2174 - accuracy: 0.9323\n",
      "Epoch 85/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 3.7858 - accuracy: 0.60 - ETA: 0s - loss: 0.4838 - accuracy: 0.91 - ETA: 0s - loss: 0.3588 - accuracy: 0.91 - ETA: 0s - loss: 0.2980 - accuracy: 0.92 - 0s 43us/step - loss: 0.2950 - accuracy: 0.9266\n",
      "Epoch 86/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1359 - accuracy: 1.00 - ETA: 0s - loss: 0.3108 - accuracy: 0.91 - ETA: 0s - loss: 0.3325 - accuracy: 0.92 - ETA: 0s - loss: 0.3857 - accuracy: 0.91 - 0s 43us/step - loss: 0.3861 - accuracy: 0.9182\n",
      "Epoch 87/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.4578 - accuracy: 0.85 - ETA: 0s - loss: 0.2924 - accuracy: 0.92 - ETA: 0s - loss: 0.2743 - accuracy: 0.91 - ETA: 0s - loss: 0.2443 - accuracy: 0.92 - 0s 42us/step - loss: 0.2443 - accuracy: 0.9261\n",
      "Epoch 88/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1060 - accuracy: 1.00 - ETA: 0s - loss: 0.3958 - accuracy: 0.91 - ETA: 0s - loss: 0.3585 - accuracy: 0.91 - 0s 41us/step - loss: 0.3112 - accuracy: 0.9223\n",
      "Epoch 89/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0817 - accuracy: 0.95 - ETA: 0s - loss: 0.1983 - accuracy: 0.93 - ETA: 0s - loss: 0.2096 - accuracy: 0.93 - ETA: 0s - loss: 0.2339 - accuracy: 0.93 - 0s 44us/step - loss: 0.2443 - accuracy: 0.9288\n",
      "Epoch 90/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3680/3680 [==============================] - ETA: 0s - loss: 0.3117 - accuracy: 0.90 - ETA: 0s - loss: 0.2218 - accuracy: 0.92 - ETA: 0s - loss: 0.2373 - accuracy: 0.92 - ETA: 0s - loss: 0.2794 - accuracy: 0.92 - 0s 43us/step - loss: 0.2775 - accuracy: 0.9250\n",
      "Epoch 91/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.0494 - accuracy: 1.00 - ETA: 0s - loss: 0.2110 - accuracy: 0.93 - ETA: 0s - loss: 0.2056 - accuracy: 0.93 - ETA: 0s - loss: 0.2213 - accuracy: 0.93 - 0s 43us/step - loss: 0.2215 - accuracy: 0.9342\n",
      "Epoch 92/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1724 - accuracy: 0.90 - ETA: 0s - loss: 0.2352 - accuracy: 0.92 - ETA: 0s - loss: 0.2093 - accuracy: 0.93 - ETA: 0s - loss: 0.2039 - accuracy: 0.93 - 0s 44us/step - loss: 0.2073 - accuracy: 0.9340\n",
      "Epoch 93/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1275 - accuracy: 0.95 - ETA: 0s - loss: 0.1818 - accuracy: 0.94 - ETA: 0s - loss: 0.2048 - accuracy: 0.93 - ETA: 0s - loss: 0.2029 - accuracy: 0.93 - 0s 45us/step - loss: 0.2021 - accuracy: 0.9351\n",
      "Epoch 94/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2549 - accuracy: 0.90 - ETA: 0s - loss: 0.4146 - accuracy: 0.91 - ETA: 0s - loss: 0.3268 - accuracy: 0.92 - ETA: 0s - loss: 0.3045 - accuracy: 0.92 - 0s 45us/step - loss: 0.2955 - accuracy: 0.9236\n",
      "Epoch 95/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2056 - accuracy: 0.95 - ETA: 0s - loss: 0.1715 - accuracy: 0.93 - ETA: 0s - loss: 0.3121 - accuracy: 0.92 - ETA: 0s - loss: 0.4290 - accuracy: 0.91 - 0s 46us/step - loss: 0.4166 - accuracy: 0.9130\n",
      "Epoch 96/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2773 - accuracy: 0.90 - ETA: 0s - loss: 0.2899 - accuracy: 0.90 - ETA: 0s - loss: 0.2526 - accuracy: 0.92 - ETA: 0s - loss: 0.3085 - accuracy: 0.92 - 0s 45us/step - loss: 0.3069 - accuracy: 0.9209\n",
      "Epoch 97/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1947 - accuracy: 0.95 - ETA: 0s - loss: 0.3039 - accuracy: 0.93 - ETA: 0s - loss: 0.2434 - accuracy: 0.93 - ETA: 0s - loss: 0.2274 - accuracy: 0.93 - 0s 45us/step - loss: 0.2251 - accuracy: 0.9372\n",
      "Epoch 98/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.2688 - accuracy: 0.90 - ETA: 0s - loss: 0.1821 - accuracy: 0.94 - ETA: 0s - loss: 0.2471 - accuracy: 0.93 - ETA: 0s - loss: 0.2415 - accuracy: 0.92 - 0s 44us/step - loss: 0.2399 - accuracy: 0.9296\n",
      "Epoch 99/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1989 - accuracy: 0.95 - ETA: 0s - loss: 0.2098 - accuracy: 0.93 - ETA: 0s - loss: 0.1957 - accuracy: 0.93 - ETA: 0s - loss: 0.3386 - accuracy: 0.92 - 0s 45us/step - loss: 0.3338 - accuracy: 0.9228\n",
      "Epoch 100/100\n",
      "3680/3680 [==============================] - ETA: 0s - loss: 0.1333 - accuracy: 0.95 - ETA: 0s - loss: 0.3238 - accuracy: 0.91 - ETA: 0s - loss: 0.2713 - accuracy: 0.92 - ETA: 0s - loss: 0.2523 - accuracy: 0.92 - 0s 45us/step - loss: 0.2486 - accuracy: 0.9264\n"
     ]
    }
   ],
   "source": [
    "batch_size = [10, 20, 40, 60, 80, 100]\n",
    "epochs = [10, 50, 100]\n",
    "param_grid = dict(batch_size=batch_size, epochs=epochs)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n",
    "grid_result = grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'batch_size': 20, 'epochs': 100}"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_result.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[517  21]\n",
      " [ 47 336]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      0.96      0.94       538\n",
      "           1       0.94      0.88      0.91       383\n",
      "\n",
      "    accuracy                           0.93       921\n",
      "   macro avg       0.93      0.92      0.92       921\n",
      "weighted avg       0.93      0.93      0.93       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def create_model():\n",
    "\t# create model\n",
    "\tmodel = Sequential()\n",
    "\tmodel.add(Dense(23, input_dim=23, activation='relu'))\n",
    "\tmodel.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "\tmodel.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])\n",
    "\treturn model\n",
    "model = KerasClassifier(build_fn=create_model, verbose=0,epochs=100, batch_size=20)\n",
    "\n",
    "model.fit(X_train, y_train)\n",
    "y_pred = model.predict(X_test)\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "nnmatrix = confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tune learn rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import optimizers\n",
    "def create_model(learn_rate=0.01):\n",
    "# create model\n",
    "    model = Sequential()\n",
    "    model.add(Dense(23, input_dim=23, activation='relu'))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    optimizer = keras.optimizers.Adam(lr=learn_rate)\n",
    "    model.compile(loss='binary_crossentropy', optimizer=optimizer,metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=20, verbose=0)\n",
    "\n",
    "learn_rate = [0.001, 0.01,0.05, 0.1]\n",
    "param_grid = dict(learn_rate=learn_rate)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)\n",
    "grid_result = grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learn_rate': 0.01}"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_result.best_params_\n",
    "#choose adamax as optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[529   9]\n",
      " [ 92 291]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.98      0.91       538\n",
      "           1       0.97      0.76      0.85       383\n",
      "\n",
      "    accuracy                           0.89       921\n",
      "   macro avg       0.91      0.87      0.88       921\n",
      "weighted avg       0.90      0.89      0.89       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def create_model(learn_rate=0.01):\n",
    "# create model\n",
    "    model = Sequential()\n",
    "    model.add(Dense(23, input_dim=23, activation='relu'))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    model.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=20, verbose=0)\n",
    "\n",
    "\n",
    "model.fit(X_train, y_train)\n",
    "y_pred = model.predict(X_test)\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "nnmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "probs = model.predict_proba(X_test) \n",
    "skplt.metrics.plot_roc(y_test, probs) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler.fit(X_train)\n",
    "X_train_scale=scaler.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler.fit(X_test)\n",
    "X_test_scale=scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[513  25]\n",
      " [ 52 331]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.95      0.93       538\n",
      "           1       0.93      0.86      0.90       383\n",
      "\n",
      "    accuracy                           0.92       921\n",
      "   macro avg       0.92      0.91      0.91       921\n",
      "weighted avg       0.92      0.92      0.92       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "k_range = list(range(1,31))\n",
    "weight_options = [\"uniform\", \"distance\"]\n",
    "\n",
    "param_grid = dict(n_neighbors = k_range, weights = weight_options)\n",
    "knn = neighbors.KNeighborsClassifier()\n",
    "\n",
    "grid = GridSearchCV(knn, param_grid, cv = 10, scoring = 'accuracy')\n",
    "grid.fit(X_train_scale,y_train)\n",
    "y_pred =grid.predict(X_test_scale)\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "knnmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "penalty = ['l1', 'l2']\n",
    "C = np.logspace(0, 4, 10)\n",
    "hyperparameters = dict(C=C, penalty=penalty)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Penalty: l1\n",
      "Best C: 59.94842503189409\n"
     ]
    }
   ],
   "source": [
    "logistic = linear_model.LogisticRegression()\n",
    "clf = GridSearchCV(logistic, hyperparameters, cv=10, verbose=0)\n",
    "best_model = clf.fit(X_train, y_train)\n",
    "print('Best Penalty:', best_model.best_estimator_.get_params()['penalty'])\n",
    "print('Best C:', best_model.best_estimator_.get_params()['C'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "logisticRegr = LogisticRegression(C=59.94842503189409,penalty='l1') \n",
    "clf = logisticRegr.fit(X_train, y_train) \n",
    "clf.fit(X_train, y_train) \n",
    "y_pred=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[502  36]\n",
      " [ 56 327]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.93      0.92       538\n",
      "           1       0.90      0.85      0.88       383\n",
      "\n",
      "    accuracy                           0.90       921\n",
      "   macro avg       0.90      0.89      0.90       921\n",
      "weighted avg       0.90      0.90      0.90       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "logitmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "probs = model.predict_proba(X_test) \n",
    "skplt.metrics.plot_roc(y_test, probs) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n",
    "'C': [1, 10, 100, 1000]},\n",
    "{'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "             estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
       "                           decision_function_shape='ovr', degree=3,\n",
       "                           gamma='auto_deprecated', kernel='rbf', max_iter=-1,\n",
       "                           probability=False, random_state=None, shrinking=True,\n",
       "                           tol=0.001, verbose=False),\n",
       "             iid='warn', n_jobs=None,\n",
       "             param_grid=[{'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001],\n",
       "                          'kernel': ['rbf']},\n",
       "                         {'C': [1, 10, 100, 1000], 'kernel': ['linear']}],\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "clf = GridSearchCV(SVC(), parameters, cv=5)\n",
    "clf.fit(X_train_scale, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters set found on development set:\n",
      "\n",
      "{'C': 1000, 'gamma': 0.001, 'kernel': 'rbf'}\n",
      "\n",
      "Grid scores on development set:\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Best parameters set found on development set:\")\n",
    "print()\n",
    "print(clf.best_params_)\n",
    "print()\n",
    "print(\"Grid scores on development set:\")\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[515  23]\n",
      " [ 54 329]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.96      0.93       538\n",
      "           1       0.93      0.86      0.90       383\n",
      "\n",
      "    accuracy                           0.92       921\n",
      "   macro avg       0.92      0.91      0.91       921\n",
      "weighted avg       0.92      0.92      0.92       921\n",
      "\n"
     ]
    }
   ],
   "source": [
    "clf=SVC(kernel='rbf', C=1000,gamma=0.001)\n",
    "clf.fit(X_train_scale, y_train)\n",
    "\n",
    "y_pred = clf.predict(X_test_scale)\n",
    "    \n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "svcmatrix=confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on our result, we choose XGBoost to be our best model.\n",
    "It has the best f1 score and best accuracy score.\n",
    "It also has the best AUC score based on ROC graph."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate Average Cost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we mark a non-spam mail as spam mail, we might miss some important messages. Hence, we see that False Negative has higher cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "treematrix=np.array([[513, 25], [44,339]])\n",
    "rfmatrix=np.array([[526, 12], [75,308]])\n",
    "xgmatrix=np.array([[522, 16], [44,339]])\n",
    "nnmatrix=np.array([[529, 9], [92,291]])\n",
    "knnmatrix=np.array([[513, 25], [52,331]])\n",
    "logitmatrix=np.array([[502, 36], [56,327]])\n",
    "svcmatrix=np.array([[515, 23], [54,329]])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "cost_matrix = np.array([[0, -10], [-1,0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0, -10],\n",
       "       [ -1,   0]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "treecost= treematrix[0][1]*cost_matrix[0][1]+treematrix[1][0]*cost_matrix[1][0]\n",
    "rfcost= rfmatrix[0][1]*cost_matrix[0][1]+rfmatrix[1][0]*cost_matrix[1][0]\n",
    "xgcost= xgmatrix[0][1]*cost_matrix[0][1]+xgmatrix[1][0]*cost_matrix[1][0]\n",
    "nncost= nnmatrix[0][1]*cost_matrix[0][1]+nnmatrix[1][0]*cost_matrix[1][0]\n",
    "knncost= knnmatrix[0][1]*cost_matrix[0][1]+knnmatrix[1][0]*cost_matrix[1][0]\n",
    "logitcost= logitmatrix[0][1]*cost_matrix[0][1]+logitmatrix[1][0]*cost_matrix[1][0]\n",
    "svccost= svcmatrix[0][1]*cost_matrix[0][1]+svcmatrix[1][0]*cost_matrix[1][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tree: -294\n",
      "Random Forest: -195\n",
      "XGBoost: -204\n",
      "Neural Network: -182\n",
      "KNN: -302\n",
      "Logistic: -416\n",
      "SVC: -284\n"
     ]
    }
   ],
   "source": [
    "print('tree:',treecost)\n",
    "print('Random Forest:',rfcost)\n",
    "print('XGBoost:',xgcost)\n",
    "print('Neural Network:',nncost)\n",
    "print('KNN:',knncost)\n",
    "print('Logistic:',logitcost)\n",
    "print('SVC:',svccost)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that our model of Neural Network has the lease cost. We see that Neural Network gives us the least cost.However, if we consider"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
