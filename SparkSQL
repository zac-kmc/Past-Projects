{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MSBA 6330 Homework 6\n\n## Part C Requirements\n\nThis Part C uses the classic MNIST handwritten digit recognition dataset. It is from LeCun et al. (1998) and may be found under [\"mnist\" at the LibSVM dataset page](https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass.html#mnist). \n  \nOur datasets are vectors of pixels representing images of handwritten digits.  For example:\n\n![Image of a digit](http://training.databricks.com/databricks_guide/digit.png)\n\n- Our goal for our data is to learn how to recognize digits (0 - 9) from images of handwriting. \n- This part is semi-open-ended: we ask you to train a decision tree model then try to improve it.\n\nGiven that our course emphasizes 3Vs including \"variety\", I think that you may appreciate an assignment that deals with images. Hope you like it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1: Explore data\n\n1\\. Use databrick filesystem commands `%fs ls` to explore the data at `/databricks-datasets/mnist-digits/data-001` on databricks. \n - list the files in the directory\n \nIn the following, you will use `mnist-digits-train.txt` to train your model, and `mnist-digits-test.txt` to test it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>path</th><th>name</th><th>size</th></tr></thead><tbody><tr><td>dbfs:/databricks-datasets/mnist-digits/data-001/mnist-digits-test.txt</td><td>mnist-digits-test.txt</td><td>11671108</td></tr><tr><td>dbfs:/databricks-datasets/mnist-digits/data-001/mnist-digits-train.txt</td><td>mnist-digits-train.txt</td><td>69430283</td></tr></tbody></table></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%fs ls /databricks-datasets/mnist-digits/data-001"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2\\. Explore the data format\n\n- display the first two rows of the data in the training dataset \n-  Note that Databrick has extremely limited shell commands, you should use spark for this task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">[Truncated to first 65536 bytes]\n5 153:3 154:18 155:18 156:18 157:126 158:136 159:175 160:26 161:166 162:255 163:247 164:127 177:30 178:36 179:94 180:154 181:170 182:253 183:253 184:253 185:253 186:253 187:225 188:172 189:253 190:242 191:195 192:64 204:49 205:238 206:253 207:253 208:253 209:253 210:253 211:253 212:253 213:253 214:251 215:93 216:82 217:82 218:56 219:39 232:18 233:219 234:253 235:253 236:253 237:253 238:253 239:198 240:182 241:247 242:241 261:80 262:156 263:107 264:253 265:253 266:205 267:11 269:43 270:154 290:14 291:1 292:154 293:253 294:90 320:139 321:253 322:190 323:2 348:11 349:190 350:253 351:70 377:35 378:241 379:225 380:160 381:108 382:1 406:81 407:240 408:253 409:253 410:119 411:25 435:45 436:186 437:253 438:253 439:150 440:27 464:16 465:93 466:252 467:253 468:187 494:249 495:253 496:249 497:64 519:46 520:130 521:183 522:253 523:253 524:207 525:2 545:39 546:148 547:229 548:253 549:253 550:253 551:250 552:182 571:24 572:114 573:221 574:253 575:253 576:253 577:253 578:201 579:78 597:23 598:66 599:213 600:253 601:253 602:253 603:253 604:198 605:81 606:2 623:18 624:171 625:219 626:253 627:253 628:253 629:253 630:195 631:80 632:9 649:55 650:172 651:226 652:253 653:253 654:253 655:253 656:244 657:133 658:11 677:136 678:253 679:253 680:253 681:212 682:135 683:132 684:16\n0 128:51 129:159 130:253 131:159 132:50 155:48 156:238 157:252 158:252 159:252 160:237 182:54 183:227 184:253 185:252 186:239 187:233 188:252 189:57 190:6 208:10 209:60 210:224 211:252 212:253 213:252 214:202 215:84 216:252 217:253 218:122 236:163 237:252 238:252 239:252 240:253 241:252 242:252 243:96 244:189 245:253 246:167 263:51 264:238 265:253 266:253 267:190 268:114 269:253 270:228 271:47 272:79 273:255 274:168 290:48 291:238 292:252 293:252 294:179 295:12 296:75 297:121 298:21 301:253 302:243 303:50 317:38 318:165 319:253 320:233 321:208 322:84 329:253 330:252 331:165 344:7 345:178 346:252 347:240 348:71 349:19 350:28 357:253 358:252 359:195 372:57 373:252 374:252 375:63 385:253 386:252 387:195 400:198 401:253 402:190 413:255 414:253 415:196 427:76 428:246 429:252 430:112 441:253 442:252 443:148 455:85 456:252 457:230 458:25 467:7 468:135 469:253 470:186 471:12 483:85 484:252 485:223 494:7 495:131 496:252 497:225 498:71 511:85 512:252 513:145 521:48 522:165 523:252 524:173 539:86 540:253 541:225 548:114 549:238 550:253 551:162 567:85 568:252 569:249 570:146 571:48 572:29 573:85 574:178 575:225 576:253 577:223 578:167 579:56 595:85 596:252 597:252 598:252 599:229 600:215 601:252 602:252 603:252 604:196 605:130 623:28 624:199 625:252 626:252 627:253 628:252 629:252 630:233 631:145 652:25 653:128 654:252 655:253 656:252 657:141 658:37\n4 161:67 162:232 163:39 173:62 174:81 189:120 190:180 191:39 201:126 202:163 216:2 217:153 218:210 219:40 229:220 230:163 244:27 245:254 246:162 257:222 258:163 272:183 273:254 274:125 284:46 285:245 286:163 300:198 301:254 302:56 312:120 313:254 314:163 327:23 328:231 329:254 330:29 340:159 341:254 342:120 355:163 356:254 357:216 358:16 368:159 369:254 370:67 380:14 381:86 382:178 383:248 384:254 385:91 396:159 397:254 398:85 402:47 403:49 404:116 405:144 406:150 407:241 408:243 409:234 410:179 411:241 412:252 413:40 424:150 425:253 426:237 427:207 428:207 429:207 430:253 431:254 432:250 433:240 434:198 435:143 436:91 437:28 438:5 439:233 440:250 453:119 454:177 455:177 456:177 457:177 458:177 459:98 460:56 466:102 467:254 468:220 494:169 495:254 496:137 522:169 523:254 524:57 550:169 551:254 552:57 578:169 579:255 580:94 606:169 607:254 608:96 634:169 635:254 636:153 662:169 663:255 664:153 690:96 691:254 692:153\n1 159:124 160:253 161:255 162:63 186:96 187:244 188:251 189:253 190:62 214:127 215:251 216:251 217:253 218:62 241:68 242:236 243:251 244:211 245:31 246:8 268:60 269:228 270:251 271:251 272:94 296:155 297:253 298:253 299:189 323:20 324:253 325:251 326:235 327:66 350:32 351:205 352:253 353:251 354:126 378:104 379:251 380:253 381:184 382:15 405:80 406:240 407:251 408:193 409:23 432:32 433:253 434:253 435:253 436:159 460:151 461:251 462:251 463:251 464:39 487:48 488:221 489:251 490:251 491:172 515:234 516:251 517:251 518:196 519:12 543:253 544:251 545:251 546:89 570:159 571:255 572:253 573:253 574:31 597:48 598:228 599:253 600:247 601:140 602:8 625:64 626:251 627:253 628:220 653:64 654:251 655:253 656:220 681:24 682:193 683:253 684:220\n9 209:55 210:148 211:210 212:253 213:253 214:113 215:87 216:148 217:55 236:87 237:232 238:252 239:253 240:189 241:210 242:252 243:252 244:253 245:168 262:4 263:57 264:242 265:252 266:190 267:65 268:5 269:12 270:182 271:252 272:253 273:116 290:96 291:252 292:252 293:183 294:14 297:92 298:252 299:252 300:225 301:21 317:132 318:253 319:252 320:146 321:14 325:215 326:252 327:252 328:79 344:126 345:253 346:247 347:176 348:9 351:8 352:78 353:245 354:253 355:129 371:16 372:232 373:252 374:176 378:36 379:201 380:252 381:252 382:169 383:11 399:22 400:252 401:252 402:30 403:22 404:119 405:197 406:241 407:253 408:252 409:251 410:77 427:16 428:231 429:252 430:253 431:252 432:252 433:252 434:226 435:227 436:252 437:231 456:55 457:235 458:253 459:217 460:138 461:42 462:24 463:192 464:252 465:143 490:62 491:255 492:253 493:109 518:71 519:253 520:252 521:21 547:253 548:252 549:21 574:71 575:253 576:252 577:21 602:106 603:253 604:252 605:21 630:45 631:255 632:253 633:21 659:218 660:252 661:56 687:96 688:252 689:189 690:42 715:14 716:184 717:252 718:170 719:11 744:14 745:147 746:252 747:42\n2 156:13 157:25 158:100 159:122 160:7 182:33 183:151 184:208 185:252 186:252 187:252 188:146 208:40 209:152 210:244 211:252 212:253 213:224 214:211 215:252 216:232 217:40 234:15 235:152 236:239 237:252 238:252 239:252 240:216 241:31 242:37 243:252 244:252 245:60 262:96 263:252 264:252 265:252 266:252 267:217 268:29 270:37 271:252 272:252 273:60 290:181 291:252 292:252 293:220 294:167 295:30 298:77 299:252 300:252 301:60 318:26 319:128 320:58 321:22 326:100 327:252 328:252 329:60 354:157 355:252 356:252 357:60 378:110 379:121 380:122 381:121 382:202 383:252 384:194 385:3 403:10 404:53 405:179 406:253 407:253 408:255 409:253 410:253 411:228 412:35 429:5 430:54 431:227 432:252 433:243 434:228 435:170 436:242 437:252 438:252 439:231 440:117 441:6 456:6 457:78 458:252 459:252 460:125 461:59 463:18 464:208 465:252 466:252 467:252 468:252 469:87 470:7 483:5 484:135 485:252 486:252 487:180 488:16 490:21 491:203 492:253 493:247 494:129 495:173 496:252 497:252 498:184 499:66 500:49 501:49 510:3 511:136 512:252 513:241 514:106 515:17 517:53 518:200 519:252 520:216 521:65 523:14 524:72 525:163 526:241 527:252 528:252 529:223 538:105 539:252 540:242 541:88 542:18 543:73 544:170 545:244 546:252 547:126 548:29 554:89 555:180 556:180 557:37 566:231 567:252 568:245 569:205 570:216 571:252 572:252 573:252 574:124 575:3 594:207 595:252 596:252 597:252 598:252 599:178 600:116 601:36 602:4 622:13 623:93 624:143 625:121 626:23 627:6\n1 125:145 126:255 127:211 128:31 152:32 153:237 154:253 155:252 156:71 180:11 181:175 182:253 183:252 184:71 209:144 210:253 211:252 212:71 236:16 237:191 238:253 239:252 240:71 264:26 265:221 266:253 267:252 268:124 269:31 293:125 294:253 295:252 296:252 297:108 322:253 323:252 324:252 325:108 350:255 351:253 352:253 353:108 378:253 379:252 380:252 381:108 406:253 407:252 408:252 409:108 434:253 435:252 436:252 437:108 462:255 463:253 464:253 465:170 490:253 491:252 492:252 493:252 494:42 518:149 519:252 520:252 521:252 522:144 546:109 547:252 548:252 549:252 550:144 575:218 576:253 577:253 578:255 579:35 603:175 604:252 605:252 606:253 607:35 631:73 632:252 633:252 634:253 635:35 659:31 660:211 661:252 662:253 663:35\n3 152:38 153:43 154:105 155:255 156:253 157:253 158:253 159:253 160:253 161:174 162:6 178:43 179:139 180:224 181:226 182:252 183:253 184:252 185:252 186:252 187:252 188:252 189:252 190:158 191:14 206:178 207:252 208:252 209:252 210:252 211:253 212:252 213:252 214:252 215:252 216:252 217:252 218:252 219:59 234:109 235:252 236:252 237:230 238:132 239:133 240:132 241:132 242:189 243:252 244:252 245:252 246:252 247:59 262:4 263:29 264:29 265:24 270:14 271:226 272:252 273:252 274:172 275:7 298:85 299:243 300:252 301:252 302:144 325:88 326:189 327:252 328:252 329:252 330:14 351:91 352:212 353:247 354:252 355:252 356:252 357:204 358:9 374:32 375:125 376:193 377:193 378:193 379:253 380:252 381:252 382:252 383:238 384:102 385:28 401:45 402:222 403:252 404:252 405:252 406:252 407:253 408:252 409:252 410:252 411:177 429:45 430:223 431:253 432:253 433:253 434:253 435:255 436:253 437:253 438:253 439:253 440:74 458:31 459:123 460:52 461:44 462:44 463:44 464:44 465:143 466:252 467:252 468:74 493:15 494:252 495:252 496:74 521:86 522:252 523:252 524:74 539:5 540:75 541:9 548:98 549:242 550:252 551:252 552:74 566:61 567:183 568:252 569:29 574:18 575:92 576:239 577:252 578:252 579:243 580:65 594:208 595:252 596:252 597:147 598:134 599:134 600:134 601:134 602:203 603:253 604:252 605:252 606:188 607:83 622:208 623:252 624:252 625:252 626:252 627:252 628:252 629:252 630:252 631:253 632:230 633:153 634:8 650:49 651:157 652:252 653:252 654:252 655:252 656:252 657:217 658:207 659:146 660:45 679:7 680:103 681:235 682:252 683:172 684:103 685:24\n1 153:5 154:63 155:197 181:20 182:254 183:230 184:24 209:20 210:254 211:254 212:48 237:20 238:254 239:255 240:48 265:20 266:254 267:254 268:57 293:20 294:254 295:254 296:108 321:16 322:239 323:254 324:143 350:178 351:254 352:143 378:178 379:254 380:143 406:178 407:254 408:162 434:178 435:254 436:240 462:113 463:254 464:240 490:83 491:254 492:245 493:31 518:79 519:254 520:246 521:38 547:214 548:254 549:150 575:144 576:241 577:8 603:144 604:240 605:2 631:144 632:254 633:82 659:230 660:247 661:40 687:168 688:209 689:31\n4 135:189 136:190 162:143 163:247 164:153 189:136 190:247 191:242 192:86 217:192 218:252 219:187 237:62 238:185 239:18 244:89 245:236 246:217 247:47 265:216 266:253 267:60 272:212 273:255 274:81 293:206 294:252 295:68 299:48 300:242 301:253 302:89 320:131 321:251 322:212 323:21 326:11 327:167 328:252 329:197 330:5 347:29 348:232 349:247 350:63 354:153 355:252 356:226 374:45 375:219 376:252 377:143 381:116 382:249 383:252 384:103 400:4 401:96 402:253 403:255 404:253 405:200 406:122 407:7 408:25 409:201 410:250 411:158 428:92 429:252 430:252 431:253 432:217 433:252 434:252 435:200 436:227 437:252 438:231 455:87 456:251 457:247 458:231 459:65 460:48 461:189 462:252 463:252 464:253 465:252 466:251 467:227 468:35 483:190 484:221 485:98 489:42 490:196 491:252 492:253 493:252 494:252 495:162 511:111 512:29 517:62 518:239 519:252 520:86 521:42 522:42 523:14 544:15 545:148 546:253 547:218 572:121 573:252 574:231 575:28 599:31 600:221 601:251 602:129 627:218 628:252 629:160 655:122 656:252 657:82\n3 124:42 125:118 126:219 127:166 128:118 129:118 130:6 151:103 152:242 153:254 154:254 155:254 156:254 157:254 158:66 179:18 180:232 181:254 182:254 183:254 184:254 185:254 186:238 187:70 208:104 209:244 210:254 211:224 212:254 213:254 214:254 215:141 237:207 238:254 239:210 240:254 241:254 242:254 243:34 265:84 266:206 267:254 268:254 269:254 270:254 271:41 294:24 295:209 296:254 297:254 298:254 299:171 321:91 322:137 323:253 324:254 325:254 326:254 327:112 347:40 348:214 349:250 350:254 351:254 352:254 353:254 354:254 355:34 375:81 376:247 377:254 378:254 379:254 380:254 381:254 382:254 383:146 404:110 405:246 406:254 407:254 408:254 409:254 410:254 411:171 433:73 434:89 435:89 436:93 437:240 438:254 439:171 464:1 465:128 466:254 467:219 468:31 492:7 493:254 494:254 495:214 496:28 520:138 521:254 522:254 523:116 539:19 540:177 541:90 547:25 548:240 549:254 550:254 551:34 567:164 568:254 569:215 570:63 571:36 573:51 574:89 575:206 576:254 577:254 578:139 579:8 595:57 596:197 597:254 598:254 599:222 600:180 601:241 602:254 603:254 604:253 605:213 606:11 624:140 625:105 626:254 627:254 628:254 629:254 630:254 631:254 632:236 653:7 654:117 655:117 656:165 657:254 658:254 659:239 660:50\n5 217:31 218:40 219:129 220:234 221:234 222:159 243:68 244:150 245:239 246:254 247:253 248:253 249:253 250:215 269:156 270:201 271:254 272:254 273:254 274:241 275:150 276:98 277:8 295:19 296:154 297:254 298:236 299:203 300:83 301:39 302:30 323:144 324:253 325:145 326:12 348:10 349:129 350:222 351:78 352:79 353:8 376:134 377:253 378:167 379:8 404:255 405:254 406:78 432:201 433:253 434:226 435:69 457:55 458:6 460:18 461:128 462:253 463:241 464:41 483:25 484:205 485:235 486:92 489:20 490:253 491:253 492:58 511:231 512:245 513:108 517:132 518:253 519:185 520:14 539:121 540:245 541:254 542:254 543:254 544:217 545:254 546:223 547:50 568:116 569:165 570:233 571:233 572:234 573:180 574:39 575:3\n3 144:12 145:99 146:91 147:142 148:155 149:246 150:182 151:155 152:155 153:155 154:155 155:131 156:52 172:138 173:254 174:254 175:254 176:254 177:254 178:254 179:254 180:254 181:254 182:254 183:254 184:252 185:210 186:122 187:33 200:220 201:254 202:254 203:254 204:235 205:189 206:189 207:189 208:189 209:150 210:189 211:205 212:254 213:254 214:254 215:75 228:35 229:74 230:35 231:35 232:25 239:13 240:224 241:254 242:254 243:153 267:90 268:254 269:254 270:247 271:53 293:6 294:152 295:246 296:254 297:254 298:49 320:66 321:158 322:254 323:254 324:249 325:103 326:8 347:54 348:251 349:254 350:254 351:254 352:248 353:74 354:5 375:140 376:254 377:254 378:254 379:254 380:254 381:254 382:202 383:125 384:45 403:58 404:181 405:234 406:254 407:254 408:254 409:254 410:254 411:254 412:252 413:140 414:22 433:30 434:50 435:73 436:155 437:253 438:254 439:254 440:254 441:254 442:191 443:2 465:91 466:200 467:254 468:254 469:254 470:254 471:118 494:4 495:192 496:254 497:254 498:254 499:154 523:141 524:254 525:254 526:254 527:116 541:25 542:126 543:86 550:3 551:188 552:254 553:254 554:250 555:61 568:24 569:209 570:254 571:15 577:23 578:137 579:254 580:254 581:254 582:209 596:168 597:254 598:254 599:48 600:9 603:9 604:127 605:241 606:254 607:254 608:255 609:242 610:63 624:101 625:254 626:254 627:254 628:205 629:190 630:190 631:205 632:254 633:254 634:254 635:254 636:242 637:67 652:33 653:166 654:254 655:254 656:254 657:254 658:254 659:254 660:254 661:254 662:250 663:138 664:55 681:7 682:88 683:154 684:116 685:194 686:194 687:154 688:154 689:88 690:49\n6 73:38 74:222 75:225 100:147 101:234 102:252 103:176 126:23 127:197 128:253 129:252 130:208 131:19 153:38 154:178 155:252 156:253 157:117 158:65 181:57 182:252 183:252 184:253 185:89 208:38 209:222 210:253 211:253 212:79 236:131 237:252 238:179 239:27 263:198 264:246 265:220 266:37 290:79 291:253 292:252 293:135 294:28 317:16 318:140 319:253 320:252 321:118 326:111 327:140 328:140 345:13 346:191 347:255 348:253 349:56 352:114 353:113 354:222 355:253 356:253 357:255 358:27 373:76 374:252 375:253 376:223 377:37 379:48 380:174 381:252 382:252 383:242 384:214 385:253 386:199 387:31 400:13 401:109 402:252 403:228 404:130 406:38 407:165 408:253 409:233 410:164 411:49 412:63 413:253 414:214 415:31 428:73 429:252 430:252 431:126 433:23 434:178 435:252 436:240 437:148 438:7 439:44 440:215 441:240 442:148 456:119 457:252 458:252 461:197 462:252 463:252 464:63 466:57 467:252 468:252 469:140 484:135 485:253 486:174 488:48 489:229 490:253 491:112 493:38 494:222 495:253 496:112 512:135 513:252 514:173 516:48 517:227 518:252 519:158 520:226 521:234 522:201 523:27 524:12 540:57 541:252 542:252 543:57 544:104 545:240 546:252 547:252 548:253 549:233 550:74 568:51 569:242 570:252 571:253 572:252 573:252 574:252 575:252 576:240 577:148 597:75 598:189 599:253 600:252 601:252 602:157 603:112 604:63\n1 152:1 153:168 154:242 155:28 180:10 181:228 182:254 183:100 209:190 210:254 211:122 237:83 238:254 239:162 265:29 266:254 267:248 268:25 293:29 294:255 295:254 296:103 321:29 322:254 323:254 324:109 349:29 350:254 351:254 352:109 377:29 378:254 379:254 380:109 405:29 406:255 407:254 408:109 433:29 434:254 435:254 436:109 461:29 462:254 463:254 464:63 489:29 490:254 491:254 492:28 517:29 518:254 519:254 520:28 545:29 546:254 547:254 548:35 573:29 574:254 575:254 576:109 601:6 602:212 603:254 604:109 630:203 631:254 632:178 658:155 659:254 660:190 686:32 687:199 688:104\n7 212:115 213:121 214:162 215:253 216:253 217:213 237:63 238:107 239:170 240:251 241:252 242:252 243:252 244:252 245:250 246:214 261:25 262:192 263:226 264:226 265:241 266:252 267:253 268:202 269:252 270:252 271:252 272:252 273:252 274:225 288:68 289:223 290:252 291:252 292:252 293:252 294:252 295:39 296:19 297:39 298:65 299:224 300:252 301:252 302:183 316:186 317:252 318:252 319:252 320:245 321:108 322:53 326:150 327:252 328:252 329:220 330:20 343:70 344:242 345:252 346:252 347:222 348:59 354:178 355:252 356:252 357:141 371:185 372:252 373:252 374:194 375:67 380:17 381:90 382:240 383:252 384:194 385:67 399:83 400:205 401:190 402:24 408:121 409:252 410:252 411:209 412:24 435:77 436:247 437:252 438:248 439:106 463:253 464:252 465:252 466:102 490:134 491:255 492:253 493:253 494:39 517:6 518:183 519:253 520:252 521:107 522:2 544:10 545:102 546:252 547:253 548:163 549:16 571:13 572:168 573:252 574:252 575:110 576:2 599:41 600:252 601:252 602:217 626:40 627:155 628:252 629:214 630:31 654:165 655:252 656:252 657:106 681:43 682:179 683:252 684:150 685:39 709:137 710:252 711:221 712:39 737:67 738:252 739:79\n2 152:93 153:164 154:211 155:250 156:250 157:194 158:15 178:20 179:176 180:253 181:237 182:180 183:180 184:243 185:254 186:214 206:204 207:236 208:135 209:18 212:40 213:242 214:252 215:126 233:69 234:253 235:167 241:130 242:254 243:223 261:74 262:217 263:79 269:46 270:254 271:231 272:14 289:8 290:10 297:39 298:254 299:254 300:104 325:5 326:212 327:254 328:141 354:207 355:254 356:141 381:7 382:215 383:254 384:128 409:39 410:254 411:254 412:56 415:20 416:67 417:124 418:39 435:7 436:35 437:98 438:254 439:254 440:208 441:157 442:207 443:225 444:254 445:241 446:160 457:9 458:31 459:82 460:137 461:203 462:203 463:212 464:254 465:254 466:254 467:254 468:251 469:223 470:223 471:127 472:52 473:33 483:9 484:137 485:214 486:254 487:254 488:254 489:254 490:240 491:228 492:250 493:254 494:254 495:154 496:50 511:185 512:254 513:247 514:179 515:146 516:67 517:60 518:28 520:216 521:254 522:220 523:12 539:255 540:222 541:49 546:4 547:137 548:244 549:232 550:50 567:254 568:206 569:4 573:8 574:179 575:254 576:247 577:64 595:216 596:254 597:158 598:177 599:130 600:96 601:213 602:252 603:199 604:49 624:131 625:247 626:249 627:249 628:249 629:171 630:72\n8 160:11 161:203 162:229 163:32 184:26 185:47 186:47 187:30 188:95 189:254 190:215 191:13 208:45 209:154 210:185 211:185 212:223 213:253 214:253 215:133 216:175 217:255 218:188 219:19 236:110 237:253 238:253 239:253 240:246 241:161 242:228 243:253 244:253 245:254 246:92 263:128 264:245 265:253 266:158 267:137 268:21 270:48 271:233 272:253 273:233 274:8 291:139 292:254 293:223 294:25 297:36 298:170 299:254 300:244 301:106 319:55 320:212 321:253 322:161 323:11 324:26 325:178 326:253 327:236 328:113 347:7 348:155 349:253 350:228 351:80 352:223 353:253 354:253 355:109 376:141 377:253 378:253 379:253 380:254 381:253 382:154 383:29 404:110 405:253 406:253 407:253 408:254 409:179 410:38 431:3 432:171 433:254 434:254 435:254 436:179 459:171 460:253 461:253 462:253 463:253 464:178 485:26 486:123 487:254 488:253 489:203 490:156 491:253 492:200 513:93 514:253 515:254 516:121 517:13 518:93 519:253 520:158 540:64 541:239 542:253 543:76 544:8 545:32 546:219 547:253 548:126 568:133 569:254 570:191 572:5 573:108 574:234 575:254 576:106 596:132 597:253 598:190 599:5 600:85 601:253 602:236 603:154 624:153 625:253 626:169 627:192 628:253 629:253 630:77 652:112 653:253 654:253 655:254 656:236 657:129 658:9 680:17 681:118 682:243 683:191 684:113\n6 101:34 102:169 103:250 104:40 128:58 129:242 130:221 131:143 132:17 155:75 156:247 157:143 158:10 182:37 183:245 184:184 185:2 209:8 210:192 211:200 212:14 237:139 238:247 239:28 264:7 265:231 266:183 292:125 293:243 294:50 320:195 321:184 347:61 348:251 349:41 353:64 354:43 375:152 376:210 377:7 379:96 380:237 381:254 382:247 383:107 403:250 404:84 406:6 407:223 408:84 409:13 410:87 411:246 412:72 430:43 431:254 432:80 434:56 435:151 439:147 440:193 458:67 459:254 460:41 462:13 463:19 467:42 468:253 486:67 487:254 488:13 495:14 496:253 514:68 515:255 516:13 523:77 524:240 542:67 543:254 544:13 550:5 551:181 552:147 570:25 571:229 572:105 577:5 578:156 579:213 580:20 599:107 600:246 601:105 602:14 603:49 604:95 605:217 606:209 607:27 628:107 629:246 630:253 631:253 632:240 633:130 634:6\n9 210:18 211:105 212:227 213:253 214:253 215:122 237:57 238:199 239:253 240:252 241:252 242:252 243:252 244:159 264:20 265:211 266:252 267:232 268:152 269:73 270:167 271:252 272:215 273:6 292:197 293:252 294:182 298:37 299:235 300:243 301:47 320:188 321:252 322:103 326:37 327:235 328:229 329:27 348:189 349:253 350:86 351:8 352:43 353:139 354:190 355:211 356:45 376:232 377:252 378:200 379:201 380:252 381:252 382:84 404:213 405:245 406:252 407:253 408:252 409:242 410:42 433:56 434:84 435:253 436:252 437:160 462:45 463:253 464:252 465:38 490:89 491:255 492:253 493:38 518:80 519:253 520:189 521:32 545:41 546:179 547:232 548:84 572:15 573:225 574:252 575:115 600:153 601:252 602:164 627:68 628:245 629:243 630:79 654:32 655:237 656:245 657:82 681:9 682:148 683:252 684:169 709:106 710:253 711:196 712:7 736:54 737:228 738:129 739:28\n4 130:38 131:190 132:25 144:13 145:25 146:10 158:112 159:252 160:125 161:4 172:132 173:252 174:113 186:61 187:252 188:252 189:36 200:132 201:252 202:240 203:79 214:84 215:252 216:252 217:36 228:132 229:252 230:252 231:238 232:52 241:12 242:198 243:252 244:252 245:122 256:99 257:252 258:252 259:252 260:181 261:17 269:49 270:252 271:252 272:252 273:122 284:3 285:125 286:252 287:252 288:252 289:100 297:26 298:218 299:252 300:252 301:36 313:15 314:216 315:252 316:252 317:207 318:19 325:49 326:252 327:252 328:252 329:36 342:157 343:252 344:252 345:252 346:48 350:6 351:109 352:109 353:194 354:252 355:252 356:252 357:36 370:100 371:252 372:252 373:252 374:105 376:58 377:116 378:128 379:252 380:252 381:252 382:252 383:252 384:212 385:19 399:164 400:253 401:253 402:253 403:253 404:253 405:253 406:255 407:253 408:253 409:253 410:253 411:253 412:253 413:99 427:49 428:252 429:252 430:252 431:252 432:252 433:252 434:253 435:252 436:252 437:252 438:252 439:252 440:252 441:155 455:49 456:252 457:252 458:252 459:252 460:252 461:252 462:217 463:216 464:141 465:126 466:252 467:252 468:252 469:155 483:49 484:252 485:252 486:252 487:234 488:204 489:89 493:49 494:252 495:252 496:252 497:155 511:14 512:158 513:192 514:151 515:45 521:49 522:252 523:252 524:252 525:225 526:17 549:49 550:252 551:252 552:252 553:252 554:23 577:33 578:228 579:252 580:252 581:252 582:157 583:4 606:55 607:229 608:252 609:252 610:252 611:11 635:53 636:232 637:252 638:252 639:63 664:90 665:206 666:131 667:11\n0 130:64 131:253 132:255 133:63 157:96 158:205 159:251 160:253 161:205 162:111 163:4 184:96 185:189 186:251 187:251 188:253 189:251 190:251 191:31 209:16 210:64 211:223 212:244 213:251 214:251 215:211 216:213 217:251 218:251 219:31 236:80 237:181 238:251 239:253 240:251 241:251 242:251 243:94 244:96 245:251 246:251 247:31 263:92 264:253 265:253 266:253 267:255 268:253 269:253 270:253 271:95 272:96 273:253 274:253 275:31 290:92 291:236 292:251 293:243 294:220 295:233 296:251 297:251 298:243 299:82 300:96 301:251 302:251 303:31 317:80 318:253 319:251 320:251 321:188 323:96 324:251 325:251 326:109 328:96 329:251 330:251 331:31 344:96 345:240 346:253 347:243 348:188 349:42 351:96 352:204 353:109 354:4 356:12 357:197 358:251 359:31 372:221 373:251 374:253 375:121 379:36 380:23 385:190 386:251 387:31 399:48 400:234 401:253 413:191 414:253 415:31 426:44 427:221 428:251 429:251 440:12 441:197 442:251 443:31 454:190 455:251 456:251 457:251 468:96 469:251 470:251 471:31 482:190 483:251 484:251 485:113 495:40 496:234 497:251 498:219 499:23 510:190 511:251 512:251 513:94 522:40 523:217 524:253 525:231 526:47 538:191 539:253 540:253 541:253 548:12 549:174 550:253 551:253 552:219 553:39 566:67 567:236 568:251 569:251 570:191 571:190 572:111 573:72 574:190 575:191 576:197 577:251 578:243 579:121 580:39 595:63 596:236 597:251 598:253 599:251 600:251 601:251 602:251 603:253 604:251 605:188 606:94 624:27 625:129 626:253 627:251 628:251 629:251 630:251 631:229 632:168 633:15 654:95 655:212 656:251 657:211 658:94 659:59\n9 184:31 185:144 186:250 187:254 188:166 211:98 212:241 213:204 214:97 215:126 216:253 217:40 237:6 238:121 239:247 240:133 241:16 243:50 244:253 245:27 265:103 266:253 267:109 271:120 272:231 292:18 293:234 294:169 295:4 298:31 299:220 300:231 319:4 320:215 321:212 322:18 326:195 327:254 328:139 347:88 348:253 349:63 353:90 354:251 355:242 356:23 375:183 376:214 377:5 380:24 381:233 382:253 383:133 403:254 404:124 407:14 408:197 409:253 410:149 411:14 430:67 431:254 432:45 434:71 435:224 436:254 437:218 438:15 458:45 459:246 460:214 461:227 462:248 463:241 464:255 465:111 487:94 488:193 489:167 490:78 491:226 492:189 493:8 517:1 518:145 519:249 520:53 545:64 546:253 547:130 573:230 574:227 575:12 600:52 601:250 602:104 627:8 628:206 629:223 630:11 655:105 656:253 657:45 683:214 684:207 685:4 711:232 712:106\n\n*** WARNING: skipped 16495 bytes of output ***\n\n0 128:73 129:253 130:227 131:73 132:21 156:73 157:251 158:251 159:251 160:174 182:16 183:166 184:228 185:251 186:251 187:251 188:122 210:62 211:220 212:253 213:251 214:251 215:251 216:251 217:79 238:79 239:231 240:253 241:251 242:251 243:251 244:251 245:232 246:77 264:145 265:253 266:253 267:253 268:255 269:253 270:253 271:253 272:253 273:255 274:108 292:144 293:251 294:251 295:251 296:253 297:168 298:107 299:169 300:251 301:253 302:189 303:20 318:27 319:89 320:236 321:251 322:235 323:215 324:164 325:15 326:6 327:129 328:251 329:253 330:251 331:35 345:47 346:211 347:253 348:251 349:251 350:142 354:37 355:251 356:251 357:253 358:251 359:35 373:109 374:251 375:253 376:251 377:251 378:142 382:11 383:148 384:251 385:253 386:251 387:164 400:11 401:150 402:253 403:255 404:211 405:25 410:11 411:150 412:253 413:255 414:211 415:25 428:140 429:251 430:251 431:253 432:107 438:37 439:251 440:251 441:211 442:46 456:190 457:251 458:251 459:253 460:128 461:5 466:37 467:251 468:251 469:51 484:115 485:251 486:251 487:253 488:188 489:20 492:32 493:109 494:129 495:251 496:173 497:103 512:217 513:251 514:251 515:201 516:30 520:73 521:251 522:251 523:251 524:71 540:166 541:253 542:253 543:255 544:149 545:73 546:150 547:253 548:255 549:253 550:253 551:143 568:140 569:251 570:251 571:253 572:251 573:251 574:251 575:251 576:253 577:251 578:230 579:61 596:190 597:251 598:251 599:253 600:251 601:251 602:251 603:251 604:242 605:215 606:55 624:21 625:189 626:251 627:253 628:251 629:251 630:251 631:173 632:103 653:31 654:200 655:253 656:251 657:96 658:71 659:20\n7 202:8 203:29 204:29 205:88 206:89 207:126 208:126 209:126 210:126 211:126 212:121 213:29 214:3 230:168 231:254 232:254 233:254 234:254 235:254 236:254 237:254 238:254 239:254 240:254 241:254 242:176 243:19 258:175 259:204 260:197 261:197 262:197 263:197 264:197 265:197 266:197 267:197 268:200 269:254 270:254 271:75 286:10 287:5 296:4 297:193 298:254 299:139 324:15 325:254 326:254 327:53 352:15 353:254 354:254 355:53 380:95 381:254 382:254 383:53 408:112 409:254 410:224 411:16 413:75 414:83 415:83 416:83 417:83 433:41 434:49 435:67 436:229 437:254 438:252 439:241 440:241 441:253 442:254 443:242 444:193 445:111 456:11 457:74 458:112 459:180 460:207 461:247 462:254 463:254 464:254 465:254 466:252 467:240 468:213 469:143 470:69 471:35 483:20 484:233 485:254 486:254 487:254 488:254 489:254 490:254 491:225 492:254 493:254 494:80 511:14 512:218 513:254 514:135 515:115 516:22 517:19 518:19 519:30 520:229 521:254 522:19 540:74 541:91 542:8 548:207 549:254 550:19 576:207 577:254 578:19 604:193 605:255 606:19 632:112 633:254 634:19 660:112 661:254 662:19 688:18 689:59 690:3\n6 126:2 127:128 128:255 129:120 153:33 154:162 155:253 156:253 157:179 181:174 182:253 183:253 184:248 185:105 208:38 209:220 210:253 211:253 212:113 235:23 236:220 237:253 238:253 239:253 240:61 263:38 264:253 265:253 266:253 267:195 268:23 291:120 292:253 293:253 294:195 295:23 319:161 320:253 321:219 322:24 326:16 327:153 328:128 329:31 346:23 347:227 348:253 349:116 353:54 354:203 355:253 356:253 357:224 358:17 374:123 375:253 376:243 377:61 380:17 381:179 382:253 383:253 384:253 385:253 386:24 402:155 403:253 404:210 408:162 409:253 410:253 411:196 412:149 413:253 414:24 429:20 430:232 431:253 432:173 436:192 437:253 438:229 439:30 440:94 441:253 442:24 457:25 458:253 459:253 460:86 463:51 464:242 465:229 466:57 468:193 469:253 470:24 485:25 486:253 487:253 488:189 490:20 491:188 492:253 493:136 495:116 496:247 497:219 498:16 513:16 514:217 515:253 516:247 517:69 518:56 519:253 520:253 521:128 522:132 523:247 524:219 525:37 542:155 543:253 544:253 545:233 546:230 547:253 548:253 549:253 550:253 551:253 552:112 570:30 571:215 572:253 573:253 574:253 575:253 576:253 577:253 578:253 579:123 580:4 599:30 600:141 601:218 602:253 603:253 604:168 605:106 606:18 607:3 629:33 630:219 631:253 632:61 658:180 659:192 660:2\n1 155:178 156:255 157:105 182:6 183:188 184:253 185:216 186:14 210:14 211:202 212:253 213:253 214:23 238:12 239:199 240:253 241:128 242:6 266:42 267:253 268:253 269:158 294:42 295:253 296:253 297:158 322:155 323:253 324:253 325:158 350:160 351:253 352:253 353:147 378:160 379:253 380:253 381:41 405:17 406:225 407:253 408:235 409:31 433:24 434:253 435:253 436:176 461:24 462:253 463:253 464:176 489:24 490:253 491:253 492:176 517:24 518:253 519:253 520:176 545:24 546:253 547:253 548:162 573:46 574:253 575:253 576:59 601:142 602:253 603:253 604:59 629:142 630:253 631:253 632:59 657:142 658:253 659:202 660:8 685:87 686:253 687:139\n8 132:116 133:244 134:114 155:43 156:47 157:47 158:34 160:116 161:253 162:206 181:19 182:164 183:246 184:253 185:252 186:234 187:33 188:116 189:253 190:174 208:60 209:188 210:252 211:252 212:253 213:252 214:252 215:45 216:210 217:234 218:17 235:74 236:244 237:252 238:252 239:147 240:148 241:210 242:22 243:140 244:250 245:230 263:255 264:253 265:205 266:21 268:64 269:140 270:169 271:233 272:253 273:158 291:253 292:252 293:154 294:9 297:68 298:252 299:252 300:178 319:137 320:252 321:252 322:196 323:48 324:49 325:228 326:252 327:227 328:48 347:5 348:177 349:252 350:252 351:232 352:233 353:252 354:227 355:50 376:15 377:137 378:252 379:252 380:253 381:231 382:48 405:81 406:253 407:253 408:255 409:207 432:51 433:228 434:252 435:231 436:232 437:236 438:44 459:49 460:228 461:252 462:227 463:48 464:138 465:252 466:152 487:233 488:252 489:227 490:50 492:138 493:252 494:208 495:17 514:158 515:253 516:252 517:79 520:138 521:252 522:221 523:25 541:93 542:253 543:255 544:144 548:149 549:253 550:173 569:166 570:252 571:249 572:75 575:43 576:253 577:223 578:25 597:207 598:252 599:237 600:70 601:70 602:112 603:246 604:253 605:174 625:165 626:252 627:253 628:252 629:252 630:252 631:252 632:150 633:17 653:51 654:137 655:253 656:252 657:200 658:210 659:32\n7 210:1 211:26 212:111 213:195 214:230 215:30 236:28 237:107 238:195 239:254 240:254 241:254 242:244 243:20 262:46 263:167 264:248 265:254 266:222 267:146 268:150 269:254 270:174 288:65 289:223 290:246 291:254 292:153 293:61 294:10 296:48 297:254 298:129 316:85 317:175 318:164 319:80 320:2 324:48 325:254 326:120 352:182 353:254 354:16 380:207 381:254 382:16 408:207 409:202 410:3 435:28 436:248 437:170 463:107 464:254 465:61 491:166 492:252 493:30 519:191 520:206 547:191 548:206 574:14 575:246 576:186 602:91 603:254 604:77 630:175 631:254 632:48 658:175 659:240 660:27 686:215 687:222 713:115 714:255 715:152 741:134 742:255 743:68\n9 182:31 183:193 184:254 185:253 186:254 187:213 188:21 209:41 210:173 211:252 212:253 213:252 214:253 215:252 216:183 236:92 237:233 238:244 239:203 240:102 241:20 242:72 243:253 244:142 264:233 265:212 266:81 268:21 269:102 270:193 271:171 272:20 291:123 292:254 293:151 296:62 297:122 298:254 299:151 319:203 320:253 321:151 325:183 326:253 327:111 347:41 348:254 349:213 350:152 351:71 352:173 353:253 354:224 355:20 376:172 377:252 378:253 379:252 380:253 381:252 382:203 405:82 406:163 407:203 408:214 409:253 410:102 436:253 437:252 438:102 463:82 464:254 465:233 490:41 491:243 492:253 493:70 518:72 519:253 520:203 545:41 546:233 547:252 548:81 573:123 574:254 575:233 600:21 601:223 602:253 603:111 628:173 629:253 630:142 655:82 656:253 657:212 658:20 682:11 683:213 684:255 685:131 710:51 711:252 712:192 713:30\n3 175:163 176:132 177:51 178:51 179:51 180:51 181:51 182:51 183:51 184:21 203:203 204:253 205:252 206:253 207:252 208:253 209:252 210:253 211:252 212:223 213:203 214:41 232:103 233:142 234:203 235:203 236:203 237:203 238:203 239:203 240:214 241:253 242:204 268:51 269:252 270:162 296:255 297:253 298:82 323:123 324:253 325:130 350:132 351:253 352:203 353:20 377:123 378:253 379:252 380:20 404:113 405:253 406:224 407:61 432:152 433:252 434:223 435:102 436:102 437:61 438:41 460:62 461:142 462:203 463:243 464:254 465:253 466:254 467:253 468:82 491:40 492:71 493:111 494:172 495:252 496:203 522:72 523:253 524:203 550:152 551:252 552:81 577:102 578:254 579:213 604:21 605:203 606:253 607:130 632:173 633:253 634:163 659:163 660:253 661:171 684:113 685:172 686:132 687:253 688:142 689:20 712:51 713:232 714:151 715:70\n9 209:11 210:185 211:255 212:253 213:253 214:230 215:132 216:132 217:31 235:9 236:71 237:242 238:252 239:252 240:228 241:231 242:252 243:252 244:252 245:167 262:28 263:166 264:252 265:252 266:235 267:92 269:14 270:142 271:252 272:252 273:150 289:12 290:204 291:252 292:234 293:152 294:44 297:48 298:225 299:252 300:180 301:16 316:12 317:164 318:252 319:232 320:61 324:6 325:179 326:252 327:252 328:60 344:49 345:252 346:252 347:76 351:44 352:199 353:252 354:252 355:252 356:60 372:89 373:252 374:228 375:32 378:99 379:231 380:244 381:220 382:252 383:203 384:12 400:169 401:252 402:207 403:97 404:97 405:206 406:234 407:243 408:32 409:157 410:252 411:145 428:60 429:252 430:252 431:252 432:252 433:252 434:200 435:22 436:11 437:198 438:231 439:41 456:26 457:131 458:224 459:252 460:252 461:142 462:11 464:82 465:252 466:204 491:13 492:253 493:253 494:141 519:82 520:252 521:220 522:36 547:208 548:252 549:96 574:24 575:253 576:247 577:78 602:121 603:253 604:199 629:32 630:216 631:244 632:26 657:207 658:252 659:241 683:33 684:200 685:249 686:252 687:92 711:85 712:252 713:252 714:142 739:85 740:252 741:200 742:11\n8 153:2 154:152 155:203 156:181 157:141 158:58 159:17 182:40 183:172 184:247 185:188 186:232 187:234 188:35 207:17 208:82 209:101 210:143 211:252 212:245 213:67 214:35 215:225 216:214 233:5 234:132 235:237 236:254 237:254 238:254 239:254 240:254 241:243 242:80 243:210 244:248 245:35 261:163 262:251 263:211 264:107 265:23 266:36 267:120 268:240 269:246 270:98 271:218 272:143 288:47 289:251 290:166 296:16 297:43 298:189 299:212 300:25 316:40 317:250 318:214 319:14 324:10 325:148 326:250 327:99 345:137 346:254 347:234 348:103 349:6 352:154 353:225 354:85 373:3 374:44 375:195 376:254 377:184 378:24 379:129 380:235 381:35 404:101 405:240 406:254 407:254 408:66 433:172 434:254 435:254 436:108 459:2 460:154 461:253 462:98 463:190 464:254 465:104 487:91 488:254 489:131 491:13 492:212 493:225 494:64 514:20 515:238 516:254 517:29 520:55 521:244 522:195 523:20 542:90 543:254 544:219 545:6 549:100 550:254 551:111 570:127 571:254 572:116 577:23 578:248 579:126 598:127 599:254 600:63 605:49 606:252 607:126 626:124 627:248 628:29 632:38 633:167 634:254 635:101 654:29 655:233 656:211 657:115 658:115 659:135 660:254 661:244 662:130 683:70 684:236 685:254 686:254 687:254 688:173 689:38\n5 187:128 188:128 189:255 190:255 191:255 192:255 193:255 194:64 213:128 214:255 215:255 216:255 217:255 218:255 219:255 220:255 221:255 222:255 240:64 241:255 242:255 243:255 244:255 245:255 246:255 247:255 248:191 249:128 250:128 268:255 269:255 270:191 271:128 272:128 273:64 292:64 293:128 296:64 319:191 320:255 321:255 346:64 347:255 348:255 349:128 374:255 375:255 376:191 402:255 403:255 404:255 405:191 406:128 407:64 430:128 431:255 432:255 433:255 434:255 435:255 436:128 460:128 461:128 462:255 463:255 464:255 465:64 490:64 491:191 492:255 493:255 519:128 520:255 521:191 546:64 547:191 548:255 549:191 568:128 569:191 570:64 573:64 574:255 575:255 576:255 577:128 595:128 596:255 597:255 598:255 599:255 600:255 601:255 602:255 603:255 604:191 623:255 624:255 625:255 626:255 627:255 628:255 629:255 630:255 631:128 651:128 652:255 653:255 654:128 655:191 656:128\n9 151:50 152:209 153:255 154:172 155:15 178:48 179:236 180:254 181:247 182:252 183:74 206:109 207:254 208:237 209:31 210:149 211:240 212:31 234:109 235:254 236:137 238:126 239:254 240:121 262:109 263:254 264:137 266:126 267:254 268:121 290:109 291:254 292:137 294:126 295:254 296:156 318:100 319:254 320:189 321:86 322:210 323:254 324:226 325:15 346:6 347:159 348:254 349:254 350:196 351:169 352:254 353:99 375:6 376:50 377:50 378:25 379:90 380:254 381:191 382:5 407:9 408:182 409:254 410:70 436:83 437:248 438:128 465:205 466:207 467:5 493:137 494:254 495:25 521:137 522:254 523:71 549:137 550:254 551:108 577:137 578:254 579:108 599:69 600:220 601:198 602:102 605:137 606:254 607:108 627:137 628:219 629:214 630:252 631:129 632:36 633:162 634:254 635:108 655:34 656:5 657:44 658:199 659:254 660:250 661:253 662:235 663:20 686:2 687:117 688:242 689:254 690:114\n3 153:63 154:114 155:238 156:253 157:253 158:253 159:255 160:27 179:98 180:225 181:240 182:253 183:252 184:252 185:252 186:252 187:253 188:228 189:225 190:130 191:38 200:26 201:6 206:67 207:240 208:252 209:252 210:253 211:252 212:252 213:252 214:252 215:253 216:252 217:252 218:252 219:112 228:101 229:24 234:28 235:121 236:249 237:239 238:253 239:236 240:204 241:112 242:189 243:253 244:252 245:252 246:217 247:37 263:25 264:99 265:63 266:112 267:50 268:159 269:252 270:252 271:253 272:252 273:220 274:37 293:63 294:114 295:238 296:253 297:253 298:253 299:255 300:152 301:110 319:19 320:101 321:240 322:253 323:252 324:252 325:252 326:204 327:106 328:3 347:166 348:252 349:252 350:253 351:252 352:176 353:55 354:25 375:181 376:252 377:252 378:253 379:252 380:155 381:26 403:25 404:112 405:112 406:174 407:252 408:252 409:239 410:63 435:126 436:229 437:253 438:253 439:114 440:12 464:53 465:177 466:252 467:253 468:27 493:22 494:227 495:253 496:136 521:19 522:215 523:253 524:89 549:107 550:252 551:253 552:167 567:92 568:253 569:255 570:27 573:63 574:114 575:113 576:222 577:253 578:253 579:204 580:15 594:51 595:243 596:252 597:253 598:103 599:85 600:178 601:240 602:253 603:252 604:252 605:252 606:252 607:94 622:13 623:155 624:252 625:253 626:252 627:252 628:252 629:252 630:253 631:252 632:239 633:180 634:55 651:26 652:239 653:253 654:252 655:252 656:249 657:223 658:225 659:99 660:65 680:63 681:174 682:252 683:141 684:99\n3 123:12 124:56 125:140 126:126 127:175 128:200 129:96 130:2 149:35 150:166 151:238 152:254 153:246 154:242 155:253 156:246 157:254 158:67 177:184 178:182 179:146 180:127 181:70 182:30 183:45 184:36 185:215 186:175 205:30 213:207 214:246 215:14 240:55 241:251 242:169 243:1 267:11 268:215 269:232 270:20 294:20 295:190 296:250 297:61 320:24 321:118 322:206 323:254 324:248 325:142 326:108 327:18 347:63 348:223 349:254 350:254 351:254 352:254 353:254 354:254 355:209 375:52 376:174 377:129 378:95 379:16 380:16 381:16 382:106 383:249 384:125 411:179 412:239 439:80 440:239 467:80 468:244 469:20 495:100 496:239 523:234 524:239 540:4 541:140 542:5 549:3 550:150 551:254 552:129 568:64 569:254 570:181 571:38 576:34 577:188 578:254 579:209 580:20 596:12 597:226 598:255 599:223 600:88 601:68 602:128 603:157 604:242 605:254 606:207 607:23 625:45 626:210 627:254 628:254 629:254 630:254 631:255 632:254 633:187 634:49 654:41 655:129 656:239 657:229 658:179 659:91 660:16 661:3\n0 154:46 155:105 156:254 157:254 158:254 159:254 160:255 161:239 162:41 180:37 181:118 182:222 183:254 184:253 185:253 186:253 187:253 188:253 189:253 190:211 191:54 207:14 208:200 209:253 210:253 211:254 212:253 213:253 214:253 215:253 216:253 217:253 218:253 219:116 233:16 234:160 235:236 236:253 237:253 238:253 239:254 240:253 241:253 242:246 243:229 244:253 245:253 246:253 247:116 261:99 262:253 263:253 264:253 265:253 266:253 267:254 268:253 269:253 270:213 271:99 272:253 273:253 274:253 275:116 288:25 289:194 290:253 291:253 292:253 293:253 294:131 295:97 296:169 297:253 298:93 299:99 300:253 301:253 302:253 303:116 316:206 317:253 318:253 319:251 320:233 321:127 322:9 324:18 325:38 326:3 327:15 328:171 329:253 330:253 331:116 343:55 344:240 345:253 346:253 347:233 355:31 356:186 357:253 358:253 359:116 371:176 372:253 373:253 374:253 375:127 383:99 384:253 385:253 386:253 387:116 399:176 400:253 401:253 402:131 403:9 411:99 412:253 413:253 414:253 415:116 426:119 427:254 428:254 429:232 430:75 440:158 441:254 442:254 443:117 454:118 455:253 456:253 457:154 468:156 469:253 470:253 471:116 482:118 483:253 484:253 485:154 496:156 497:253 498:253 499:116 509:46 510:222 511:253 512:253 513:154 522:7 523:116 524:246 525:253 526:180 527:9 538:118 539:253 540:253 541:154 550:116 551:253 552:253 553:253 554:174 566:118 567:253 568:253 569:154 577:110 578:246 579:253 580:253 581:240 582:67 594:118 595:253 596:253 597:238 598:215 599:49 600:20 601:20 602:20 603:66 604:215 605:241 606:253 607:245 608:233 609:64 622:82 623:229 624:253 625:253 626:253 627:253 628:253 629:253 630:253 631:254 632:253 633:253 634:240 635:107 651:176 652:253 653:253 654:253 655:253 656:253 657:253 658:253 659:254 660:253 661:253 662:108 679:40 680:239 681:253 682:253 683:253 684:253 685:253 686:253 687:254 688:161 689:57 690:4\n7 204:1 205:109 206:109 207:109 208:109 209:110 210:109 211:129 212:253 213:110 214:109 215:31 230:21 231:94 232:217 233:252 234:252 235:252 236:252 237:253 238:252 239:252 240:252 241:253 242:252 243:227 244:134 245:42 258:176 259:252 260:252 261:252 262:252 263:252 264:252 265:253 266:252 267:252 268:252 269:253 270:252 271:252 272:252 273:222 274:139 275:11 286:217 287:252 288:252 289:252 290:128 291:108 292:108 293:108 294:108 295:108 296:108 297:108 298:232 299:252 300:252 301:253 302:252 303:71 314:42 315:159 316:252 317:252 318:210 319:31 327:37 328:252 329:253 330:252 331:71 343:5 344:119 345:210 346:252 347:124 348:31 355:37 356:252 357:253 358:231 359:51 373:31 374:195 375:195 376:31 383:140 384:252 385:253 386:158 410:42 411:221 412:252 413:191 414:15 438:218 439:253 440:253 441:84 465:94 466:247 467:252 468:210 492:21 493:212 494:252 495:226 496:31 520:144 521:253 522:252 523:132 547:99 548:253 549:255 550:222 551:41 574:21 575:201 576:252 577:253 578:55 602:94 603:252 604:252 605:175 606:10 630:217 631:252 632:252 633:62 657:171 658:253 659:253 660:170 661:110 662:78 685:253 686:252 687:252 688:252 689:253 690:55 713:253 714:252 715:252 716:252 717:154 718:10 741:253 742:252 743:252 744:168\n4 213:42 214:164 215:252 216:63 238:23 239:34 241:244 242:254 243:112 248:85 265:4 266:190 267:225 269:255 270:185 271:13 276:95 292:6 293:170 294:254 295:197 296:64 297:254 298:59 304:95 319:9 320:132 321:254 322:204 323:23 324:112 325:254 326:28 332:77 346:6 347:167 348:254 349:216 350:58 351:24 352:242 353:225 354:16 374:76 375:254 376:254 377:162 378:85 379:138 380:254 381:188 385:48 386:85 387:25 402:3 403:159 404:254 405:254 406:254 407:254 408:254 409:228 410:151 411:151 412:214 413:250 414:254 415:75 431:7 432:79 433:131 434:158 435:254 436:254 437:226 438:225 439:225 440:225 441:190 442:148 443:39 462:127 463:254 464:148 472:71 489:23 490:248 491:201 500:36 517:85 518:254 519:118 544:12 545:189 546:227 547:22 572:114 573:254 574:103 599:44 600:226 601:175 602:8 627:148 628:203 629:59 654:26 655:242 656:140 682:131 683:169 684:22 709:19 710:233 711:65 737:174 738:109\n9 206:49 207:125 208:235 209:255 210:254 211:122 217:13 218:134 219:180 220:57 233:163 234:250 235:253 236:253 237:253 238:253 239:252 240:63 244:16 245:199 246:253 247:253 248:117 259:52 260:168 261:252 262:253 263:213 264:32 265:12 266:49 267:109 268:3 272:157 273:253 274:253 275:183 276:6 287:171 288:253 289:103 290:19 291:12 299:91 300:247 301:253 302:235 303:8 315:248 316:253 317:19 325:21 326:189 327:245 328:253 329:243 330:77 343:201 344:253 345:104 346:9 351:71 352:122 353:228 354:253 355:253 356:253 357:113 371:18 372:199 373:253 374:219 375:215 376:215 377:215 378:215 379:245 380:253 381:253 382:253 383:253 384:182 385:15 400:20 401:165 402:205 403:253 404:253 405:253 406:191 407:175 408:193 409:253 410:253 411:221 412:16 430:20 431:51 432:51 433:51 434:11 436:59 437:253 438:253 439:110 464:93 465:253 466:218 467:19 491:80 492:237 493:253 494:111 519:196 520:253 521:215 522:22 546:13 547:206 548:243 549:98 574:93 575:253 576:194 601:51 602:235 603:253 604:111 629:79 630:253 631:246 632:58 657:155 658:253 659:178 685:135 686:253 687:68 688:4 713:79 714:253 715:253 716:131 741:39 742:159 743:152 744:32\n8 182:29 183:130 184:130 185:225 186:255 187:255 188:109 189:7 190:116 191:243 192:200 193:6 208:8 209:95 210:217 211:253 212:253 213:253 214:253 215:253 216:253 217:253 218:253 219:253 220:248 221:11 235:27 236:213 237:253 238:253 239:240 240:143 241:111 242:152 243:253 244:253 245:253 246:253 247:194 248:62 262:27 263:213 264:253 265:215 266:105 267:31 269:7 270:153 271:253 272:253 273:253 274:244 275:73 290:149 291:253 292:230 293:34 297:69 298:253 299:253 300:253 301:253 302:79 318:149 319:253 320:221 321:13 324:28 325:156 326:253 327:253 328:253 329:176 330:11 346:63 347:236 348:253 349:175 350:14 352:186 353:253 354:253 355:253 356:196 357:13 375:71 376:253 377:253 378:174 379:50 380:199 381:253 382:253 383:237 384:74 403:9 404:92 405:234 406:253 407:253 408:253 409:253 410:237 411:74 433:77 434:253 435:253 436:253 437:236 438:75 460:11 461:161 462:253 463:253 464:253 465:151 487:10 488:101 489:253 490:253 491:237 492:233 493:158 515:131 516:253 517:253 518:173 519:38 520:186 521:185 542:125 543:237 544:253 545:114 546:14 548:186 549:185 569:62 570:238 571:253 572:176 573:13 575:21 576:211 577:185 596:11 597:240 598:253 599:226 600:11 603:165 604:253 605:136 624:126 625:253 626:243 627:69 630:97 631:246 632:227 633:36 652:136 653:253 654:178 655:112 656:112 657:194 658:248 659:253 660:76 680:136 681:253 682:253 683:253 684:253 685:253 686:253 687:142 688:3 708:15 709:253 710:253 711:253 712:235 713:129 714:45 715:2\n0 152:56 153:105 154:220 155:254 156:63 178:18 179:166 180:233 181:253 182:253 183:253 184:236 185:209 186:209 187:209 188:77 189:18 206:84 207:253 208:253 209:253 210:253 211:253 212:254 213:253 214:253 215:253 216:253 217:172 218:8 233:57 234:238 235:253 236:253 237:253 238:253 239:253 240:254 241:253 242:253 243:253 244:253 245:253 246:119 260:14 261:238 262:253 263:253 264:253 265:253 266:253 267:253 268:179 269:196 270:253 271:253 272:253 273:253 274:238 275:12 288:33 289:253 290:253 291:253 292:253 293:253 294:248 295:134 297:18 298:83 299:237 300:253 301:253 302:253 303:14 316:164 317:253 318:253 319:253 320:253 321:253 322:128 327:57 328:119 329:214 330:253 331:94 343:57 344:248 345:253 346:253 347:253 348:126 349:14 350:4 357:179 358:253 359:248 360:56 371:175 372:253 373:253 374:240 375:190 376:28 385:179 386:253 387:253 388:173 399:209 400:253 401:253 402:178 413:92 414:253 415:253 416:208 427:211 428:254 429:254 430:179 442:135 443:255 444:209 455:209 456:253 457:253 458:90 470:134 471:253 472:208 483:209 484:253 485:253 486:178 497:2 498:142 499:253 500:208 511:209 512:253 513:253 514:214 515:35 525:30 526:253 527:253 528:208 539:165 540:253 541:253 542:253 543:215 544:36 553:163 554:253 555:253 556:164 567:18 568:172 569:253 570:253 571:253 572:214 573:127 574:7 580:72 581:232 582:253 583:171 584:17 596:8 597:182 598:253 599:253 600:253 601:253 602:162 603:56 607:64 608:240 609:253 610:253 611:14 625:7 626:173 627:253 628:253 629:253 630:253 631:245 632:241 633:239 634:239 635:246 636:253 637:225 638:14 639:1 654:18 655:59 656:138 657:224 658:253 659:253 660:254 661:253 662:253 663:253 664:240 665:96 685:37 686:104 687:192 688:255 689:253 690:253 691:182 692:73\n9 211:41 212:152 213:233 214:254 215:213 216:82 238:123 239:243 240:253 241:252 242:253 243:252 244:243 245:81 263:21 264:132 265:253 266:254 267:213 268:142 269:61 270:31 271:233 272:254 273:131 290:21 291:203 292:253 293:212 294:50 295:10 297:41 298:132 299:252 300:172 301:10 318:153 319:253 320:163 325:102 326:254 327:253 328:102 346:193 347:252 353:142 354:253 355:252 356:20 374:254 375:151 380:132 381:253 382:254 383:233 402:253 403:232 404:183 405:102 406:102 407:183 408:253 409:252 410:253 411:111 430:203 431:243 432:254 433:253 434:254 435:213 436:152 437:253 438:224 439:20 459:40 460:151 461:151 462:91 463:10 464:152 465:252 466:162 491:163 492:254 493:192 519:203 520:253 521:70 546:132 547:253 548:142 573:41 574:253 575:252 576:61 600:72 601:253 602:254 603:91 628:193 629:252 630:91 631:10 655:123 656:255 657:192 682:82 683:243 684:233 685:50 710:153 711:253 712:183 738:152 739:212 740:20\n4 157:125 158:254 159:210 160:89 177:132 178:47 184:7 185:243 186:253 187:253 188:191 203:17 204:95 205:237 206:232 207:5 212:7 213:253 214:253 215:253 216:191 231:56 232:253 233:253 234:253 235:6 240:7 241:253 242:253 243:253 244:191 259:56 260:253 261:253 262:253 263:6 268:7 269:253 270:253 271:253 272:191 287:56 288:253 289:253 290:253 291:6 296:7 297:253 298:253 299:253 300:191 315:56 316:253 317:253 318:253 319:77 324:7 325:253 326:253 327:253 328:191 343:116 344:253 345:253 346:\n</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%fs  head dbfs:/databricks-datasets/mnist-digits/data-001/mnist-digits-train.txt "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2: Load the data\n\nThe data format is known as LIBSVM which Spark has a built-in reader for.\n\n3\\. First, load the data into a Spark DataFrame. Then: \n- print the schema of the dataframe\n- display first 2 rows (hint: you can use databricks \"display(df)\" function to obtain a nicer display of the dataframe)\n- calaculate the number of rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train = spark.read.format(\"libsvm\").load(\"dbfs:/databricks-datasets/mnist-digits/data-001/mnist-digits-train.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[2]: DataFrame[label: double, features: vector]</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[3]: [Row(label=5.0, features=SparseVector(780, {152: 3.0, 153: 18.0, 154: 18.0, 155: 18.0, 156: 126.0, 157: 136.0, 158: 175.0, 159: 26.0, 160: 166.0, 161: 255.0, 162: 247.0, 163: 127.0, 176: 30.0, 177: 36.0, 178: 94.0, 179: 154.0, 180: 170.0, 181: 253.0, 182: 253.0, 183: 253.0, 184: 253.0, 185: 253.0, 186: 225.0, 187: 172.0, 188: 253.0, 189: 242.0, 190: 195.0, 191: 64.0, 203: 49.0, 204: 238.0, 205: 253.0, 206: 253.0, 207: 253.0, 208: 253.0, 209: 253.0, 210: 253.0, 211: 253.0, 212: 253.0, 213: 251.0, 214: 93.0, 215: 82.0, 216: 82.0, 217: 56.0, 218: 39.0, 231: 18.0, 232: 219.0, 233: 253.0, 234: 253.0, 235: 253.0, 236: 253.0, 237: 253.0, 238: 198.0, 239: 182.0, 240: 247.0, 241: 241.0, 260: 80.0, 261: 156.0, 262: 107.0, 263: 253.0, 264: 253.0, 265: 205.0, 266: 11.0, 268: 43.0, 269: 154.0, 289: 14.0, 290: 1.0, 291: 154.0, 292: 253.0, 293: 90.0, 319: 139.0, 320: 253.0, 321: 190.0, 322: 2.0, 347: 11.0, 348: 190.0, 349: 253.0, 350: 70.0, 376: 35.0, 377: 241.0, 378: 225.0, 379: 160.0, 380: 108.0, 381: 1.0, 405: 81.0, 406: 240.0, 407: 253.0, 408: 253.0, 409: 119.0, 410: 25.0, 434: 45.0, 435: 186.0, 436: 253.0, 437: 253.0, 438: 150.0, 439: 27.0, 463: 16.0, 464: 93.0, 465: 252.0, 466: 253.0, 467: 187.0, 493: 249.0, 494: 253.0, 495: 249.0, 496: 64.0, 518: 46.0, 519: 130.0, 520: 183.0, 521: 253.0, 522: 253.0, 523: 207.0, 524: 2.0, 544: 39.0, 545: 148.0, 546: 229.0, 547: 253.0, 548: 253.0, 549: 253.0, 550: 250.0, 551: 182.0, 570: 24.0, 571: 114.0, 572: 221.0, 573: 253.0, 574: 253.0, 575: 253.0, 576: 253.0, 577: 201.0, 578: 78.0, 596: 23.0, 597: 66.0, 598: 213.0, 599: 253.0, 600: 253.0, 601: 253.0, 602: 253.0, 603: 198.0, 604: 81.0, 605: 2.0, 622: 18.0, 623: 171.0, 624: 219.0, 625: 253.0, 626: 253.0, 627: 253.0, 628: 253.0, 629: 195.0, 630: 80.0, 631: 9.0, 648: 55.0, 649: 172.0, 650: 226.0, 651: 253.0, 652: 253.0, 653: 253.0, 654: 253.0, 655: 244.0, 656: 133.0, 657: 11.0, 676: 136.0, 677: 253.0, 678: 253.0, 679: 253.0, 680: 212.0, 681: 135.0, 682: 132.0, 683: 16.0})),\n Row(label=0.0, features=SparseVector(780, {127: 51.0, 128: 159.0, 129: 253.0, 130: 159.0, 131: 50.0, 154: 48.0, 155: 238.0, 156: 252.0, 157: 252.0, 158: 252.0, 159: 237.0, 181: 54.0, 182: 227.0, 183: 253.0, 184: 252.0, 185: 239.0, 186: 233.0, 187: 252.0, 188: 57.0, 189: 6.0, 207: 10.0, 208: 60.0, 209: 224.0, 210: 252.0, 211: 253.0, 212: 252.0, 213: 202.0, 214: 84.0, 215: 252.0, 216: 253.0, 217: 122.0, 235: 163.0, 236: 252.0, 237: 252.0, 238: 252.0, 239: 253.0, 240: 252.0, 241: 252.0, 242: 96.0, 243: 189.0, 244: 253.0, 245: 167.0, 262: 51.0, 263: 238.0, 264: 253.0, 265: 253.0, 266: 190.0, 267: 114.0, 268: 253.0, 269: 228.0, 270: 47.0, 271: 79.0, 272: 255.0, 273: 168.0, 289: 48.0, 290: 238.0, 291: 252.0, 292: 252.0, 293: 179.0, 294: 12.0, 295: 75.0, 296: 121.0, 297: 21.0, 300: 253.0, 301: 243.0, 302: 50.0, 316: 38.0, 317: 165.0, 318: 253.0, 319: 233.0, 320: 208.0, 321: 84.0, 328: 253.0, 329: 252.0, 330: 165.0, 343: 7.0, 344: 178.0, 345: 252.0, 346: 240.0, 347: 71.0, 348: 19.0, 349: 28.0, 356: 253.0, 357: 252.0, 358: 195.0, 371: 57.0, 372: 252.0, 373: 252.0, 374: 63.0, 384: 253.0, 385: 252.0, 386: 195.0, 399: 198.0, 400: 253.0, 401: 190.0, 412: 255.0, 413: 253.0, 414: 196.0, 426: 76.0, 427: 246.0, 428: 252.0, 429: 112.0, 440: 253.0, 441: 252.0, 442: 148.0, 454: 85.0, 455: 252.0, 456: 230.0, 457: 25.0, 466: 7.0, 467: 135.0, 468: 253.0, 469: 186.0, 470: 12.0, 482: 85.0, 483: 252.0, 484: 223.0, 493: 7.0, 494: 131.0, 495: 252.0, 496: 225.0, 497: 71.0, 510: 85.0, 511: 252.0, 512: 145.0, 520: 48.0, 521: 165.0, 522: 252.0, 523: 173.0, 538: 86.0, 539: 253.0, 540: 225.0, 547: 114.0, 548: 238.0, 549: 253.0, 550: 162.0, 566: 85.0, 567: 252.0, 568: 249.0, 569: 146.0, 570: 48.0, 571: 29.0, 572: 85.0, 573: 178.0, 574: 225.0, 575: 253.0, 576: 223.0, 577: 167.0, 578: 56.0, 594: 85.0, 595: 252.0, 596: 252.0, 597: 252.0, 598: 229.0, 599: 215.0, 600: 252.0, 601: 252.0, 602: 252.0, 603: 196.0, 604: 130.0, 622: 28.0, 623: 199.0, 624: 252.0, 625: 252.0, 626: 253.0, 627: 252.0, 628: 252.0, 629: 233.0, 630: 145.0, 651: 25.0, 652: 128.0, 653: 252.0, 654: 253.0, 655: 252.0, 656: 141.0, 657: 37.0}))]</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Understand the Data\n\nThe pixel intensities are represented in `features` as a sparse vector, for example the first observation, as seen above, has `label` as `5`, i.e. the hand-written image is for the number 5.  And this hand-written image is the following sparse vector (just click the triangle to the left of the feature in first row to see the following):\n\nfield | value\n-- | --\ntype| 0\nsize| 780\nindices| [152,153,155,...,682,683]\nvalues| [3, 18, 18,18,126,...,132,16]\n\nHere \n* `type: 0` says we have a sparse vector.\n* `size: 780` says the vector has 780 indices in total \n * these indices from 0,...,779 are a unidimensional indexing of the two-dimensional array of pixels in the image\n* `indices: [152,153,155,...,682,683]` are the indices from the `[0,1,...,779]` possible indices with non-zero values \n  * a value is an integer encoding the gray-level at the pixel index\n* `values: [3, 18, 18,18,126,...,132,16]` are the actual gray level values, for example:\n  * at pixed index `152` the gray-level value is `3`, \n  * at index `153` the gray-level value is `18`,\n  * ..., and finally at\n  * at index `683` the gray-level value is `18`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4\\. We have provided you a function to display the images along with its label (or predicted label). \n- Read and understand the function and use it to display the first four images in the training data set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\nimport matplotlib.image as mpimg\nimport math\nimport matplotlib.pyplot as plt\n\n# a function to render images stored in the dataset.\ndef show_images(data):\n  # Each image is supposed to be tuple.\n  # the first element of the tuple is a 780 sparse vector, corresponding to features in the MNIST dataset.\n  # the second element is an integer, corresponding to the label or predicted digit\n  # in the following, we display the list of pictures in four-picture rows along with their labels.\n  # don't show too many pictures with this function.\n\n  # e.g. show_images([(r.features, r.label) for r in df.take(4)])\n \n  fig = plt.figure()\n  columns = 4\n  rows = math.ceil(len(data)/4) # determine how many rows we need\n  \n  # ax enables access to manipulate each of subplots\n  ax = []\n\n  for i in range(len(data)):\n      # the image is an array of 28x28 (=784) gray scale pixels. but the data is an 780 array. We need to pad it, \n      # convert it to float values, and reshape it to 28x28 matrices.\n      img = np.array(np.pad(data[i][0],(0,784-len(data[i][0])),'constant',constant_values=(0,0)), dtype='float').reshape((28, 28))\n      # create subplot and append to ax\n      ax.append(fig.add_subplot(rows, 4, i+1) )\n      ax[-1].set_title(str(int(data[i][1])))  # set title for the last image to its label.\n      plt.imshow(img,cmap='gray') # render the image\n      plt.axis('off') # turn off axies\n  \n  # display the images\n  display(fig)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_images([(r.features, r.label) for r in df_train.take(4)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Step 3. Train a DecisionTreeClassifier\n\n5\\. Noting that the task is the a multi-class classification,\n- In the following, build a simple decision tree classifier using the default parameters and the training dataset\n- Then use the train model to recognize digits in the test dataset and report the \"accuracy\" metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.ml.linalg import Vectors\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.feature import StringIndexer, VectorAssembler\nfrom pyspark.ml.classification import DecisionTreeClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[6]: DataFrame[label: double, features: vector]</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_test = spark.read.format(\"libsvm\").load(\"dbfs:/databricks-datasets/mnist-digits/data-001/mnist-digits-test.txt\")\ndf_test.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dt = DecisionTreeClassifier(featuresCol='features',labelCol='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model=dt.fit(df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions = model.transform(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">+-----+--------------------+--------------------+--------------------+----------+\nlabel|            features|       rawPrediction|         probability|prediction|\n+-----+--------------------+--------------------+--------------------+----------+\n  7.0|(778,[202,203,204...|[177.0,75.0,298.0...|[0.03223456565288...|       7.0|\n  2.0|(778,[94,95,96,97...|[24.0,45.0,205.0,...|[0.03902439024390...|       2.0|\n+-----+--------------------+--------------------+--------------------+----------+\nonly showing top 2 rows\n\n</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions.filter(predictions.label==predictions.prediction).show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m = MulticlassClassificationEvaluator(predictionCol='prediction', labelCol='label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[13]: 0.6789</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.evaluate(predictions,{m.metricName: \"accuracy\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 4: Visualize Results\n\n6\\. Because we are dealing with image classification, it is useful to visually check the good predictions and bad ones.\n\nIn the following, using the show_images function to \n- Display 8 random correctly predicted images (using seed=0 to allow for easy grading). The image labels should show predicted values.\n- Display 8 random incorrectly predicted images (using seed=0). The image labels should show predicted values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "true_1=predictions.filter(predictions.label==predictions.prediction)\nfalse_1=predictions.filter(predictions.label!=predictions.prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_images([(r.features, r.prediction) for r in predictions.filter(predictions.label==predictions.prediction).sample(False,0.1,0).take(8)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_images([(r.features, r.prediction) for r in predictions.filter(predictions.label!=predictions.prediction).sample(False,0.01,0).take(8)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 5: Improve the results\n7\\. Report one idea (your best idea if you have a few) to improve the prediction results (you're limited to using Spark, but not limited to using the DecisionTree model).\n- report training steps and testing result (report the accuracy for comparison)\n- report 8 correctly and 8 incorrectly predicted images (same requirement as previously)\n- **Answer this question: reflect on your strategy and how well it worked**\n\nWe will grade this question based on the model performance (accuracy). However, don't pour a large amount of time on this when you don't have much time. I am more interested in seeing different strategies. After grading, we will try to summarize the \"crowd intelligence\" based on the performance of approaches people have tried."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.ml.classification import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(labelCol=\"label\", featuresCol=\"features\", numTrees=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_rf = rf.fit(df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions_rf = model_rf.transform(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[20]: 0.8153</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.evaluate(predictions_rf,{m.metricName: \"accuracy\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.ml.tuning import CrossValidator, ParamGridBuilder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\nparamGrid = (ParamGridBuilder() \\\n    .addGrid(rf.numTrees, [15,20,25]) \\\n    .addGrid(rf.maxDepth, [5,10,15]) \\\n    .build())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "crossval = CrossValidator(\n    estimator=rf,\n    estimatorParamMaps=paramGrid,\n    evaluator=m,\n    numFolds=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample=df_train.sample(False,0.1,100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">/databricks/spark/python/pyspark/ml/util.py:791: UserWarning: Can not find mlflow. To enable mlflow logging, install MLflow library from PyPi.\n  warnings.warn(_MLflowInstrumentation._NO_MLFLOW_WARNING)\n</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_cv = crossval.fit(sample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[66]: RandomForestClassificationModel (uid=RandomForestClassifier_b1757163ba55) with 25 trees</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_cv.bestModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "predictions_cv = model_cv.transform(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Out[68]: 0.9318</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.evaluate(predictions_cv,{m.metricName: \"accuracy\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_images([(r.features, r.prediction) for r in predictions_cv.filter(predictions_cv.label==predictions_cv.prediction).sample(False,0.2,0).take(8)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_images([(r.features, r.prediction) for r in predictions_cv.filter(predictions_cv.label!=predictions_cv.prediction).sample(False,0.2,0).take(8)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use a random forest model with grid search to improve our results. We can see that with a simple decesion tree approach, our accuracy is around 0.67. After cross validation and grid search with random forest, we improve our accuracy to 0.9318. \nMoreover, if we take a look at the sample we got wrong in the first approach, it cannot put some very obvious image to correct categories. In the second model, we see that the objects model got wrong are more deceptive. For instance, if we look at the second last image of images above, even a human cannot tell it is a '3' or '5'. It is reasonable that our model got it wrong. After this process, now our model is better at categorizing numbers."
   ]
  }
 ],
 "metadata": {
  "name": "homework6-partC",
  "notebookId": 3938338638574845
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
